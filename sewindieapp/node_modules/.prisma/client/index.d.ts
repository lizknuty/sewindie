
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Attribute
 * 
 */
export type Attribute = $Result.DefaultSelection<Prisma.$AttributePayload>
/**
 * Model Audience
 * 
 */
export type Audience = $Result.DefaultSelection<Prisma.$AudiencePayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Designer
 * 
 */
export type Designer = $Result.DefaultSelection<Prisma.$DesignerPayload>
/**
 * Model FabricType
 * 
 */
export type FabricType = $Result.DefaultSelection<Prisma.$FabricTypePayload>
/**
 * Model Format
 * 
 */
export type Format = $Result.DefaultSelection<Prisma.$FormatPayload>
/**
 * Model Pattern
 * 
 */
export type Pattern = $Result.DefaultSelection<Prisma.$PatternPayload>
/**
 * Model PatternAttribute
 * 
 */
export type PatternAttribute = $Result.DefaultSelection<Prisma.$PatternAttributePayload>
/**
 * Model PatternAudience
 * 
 */
export type PatternAudience = $Result.DefaultSelection<Prisma.$PatternAudiencePayload>
/**
 * Model PatternCategory
 * 
 */
export type PatternCategory = $Result.DefaultSelection<Prisma.$PatternCategoryPayload>
/**
 * Model PatternFabricType
 * 
 */
export type PatternFabricType = $Result.DefaultSelection<Prisma.$PatternFabricTypePayload>
/**
 * Model PatternSuggestedFabric
 * 
 */
export type PatternSuggestedFabric = $Result.DefaultSelection<Prisma.$PatternSuggestedFabricPayload>
/**
 * Model SuggestedFabric
 * 
 */
export type SuggestedFabric = $Result.DefaultSelection<Prisma.$SuggestedFabricPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Attributes
 * const attributes = await prisma.attribute.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Attributes
   * const attributes = await prisma.attribute.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.attribute`: Exposes CRUD operations for the **Attribute** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attributes
    * const attributes = await prisma.attribute.findMany()
    * ```
    */
  get attribute(): Prisma.AttributeDelegate<ExtArgs>;

  /**
   * `prisma.audience`: Exposes CRUD operations for the **Audience** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Audiences
    * const audiences = await prisma.audience.findMany()
    * ```
    */
  get audience(): Prisma.AudienceDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.designer`: Exposes CRUD operations for the **Designer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Designers
    * const designers = await prisma.designer.findMany()
    * ```
    */
  get designer(): Prisma.DesignerDelegate<ExtArgs>;

  /**
   * `prisma.fabricType`: Exposes CRUD operations for the **FabricType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FabricTypes
    * const fabricTypes = await prisma.fabricType.findMany()
    * ```
    */
  get fabricType(): Prisma.FabricTypeDelegate<ExtArgs>;

  /**
   * `prisma.format`: Exposes CRUD operations for the **Format** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Formats
    * const formats = await prisma.format.findMany()
    * ```
    */
  get format(): Prisma.FormatDelegate<ExtArgs>;

  /**
   * `prisma.pattern`: Exposes CRUD operations for the **Pattern** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patterns
    * const patterns = await prisma.pattern.findMany()
    * ```
    */
  get pattern(): Prisma.PatternDelegate<ExtArgs>;

  /**
   * `prisma.patternAttribute`: Exposes CRUD operations for the **PatternAttribute** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatternAttributes
    * const patternAttributes = await prisma.patternAttribute.findMany()
    * ```
    */
  get patternAttribute(): Prisma.PatternAttributeDelegate<ExtArgs>;

  /**
   * `prisma.patternAudience`: Exposes CRUD operations for the **PatternAudience** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatternAudiences
    * const patternAudiences = await prisma.patternAudience.findMany()
    * ```
    */
  get patternAudience(): Prisma.PatternAudienceDelegate<ExtArgs>;

  /**
   * `prisma.patternCategory`: Exposes CRUD operations for the **PatternCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatternCategories
    * const patternCategories = await prisma.patternCategory.findMany()
    * ```
    */
  get patternCategory(): Prisma.PatternCategoryDelegate<ExtArgs>;

  /**
   * `prisma.patternFabricType`: Exposes CRUD operations for the **PatternFabricType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatternFabricTypes
    * const patternFabricTypes = await prisma.patternFabricType.findMany()
    * ```
    */
  get patternFabricType(): Prisma.PatternFabricTypeDelegate<ExtArgs>;

  /**
   * `prisma.patternSuggestedFabric`: Exposes CRUD operations for the **PatternSuggestedFabric** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatternSuggestedFabrics
    * const patternSuggestedFabrics = await prisma.patternSuggestedFabric.findMany()
    * ```
    */
  get patternSuggestedFabric(): Prisma.PatternSuggestedFabricDelegate<ExtArgs>;

  /**
   * `prisma.suggestedFabric`: Exposes CRUD operations for the **SuggestedFabric** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SuggestedFabrics
    * const suggestedFabrics = await prisma.suggestedFabric.findMany()
    * ```
    */
  get suggestedFabric(): Prisma.SuggestedFabricDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Attribute: 'Attribute',
    Audience: 'Audience',
    Category: 'Category',
    Designer: 'Designer',
    FabricType: 'FabricType',
    Format: 'Format',
    Pattern: 'Pattern',
    PatternAttribute: 'PatternAttribute',
    PatternAudience: 'PatternAudience',
    PatternCategory: 'PatternCategory',
    PatternFabricType: 'PatternFabricType',
    PatternSuggestedFabric: 'PatternSuggestedFabric',
    SuggestedFabric: 'SuggestedFabric'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "attribute" | "audience" | "category" | "designer" | "fabricType" | "format" | "pattern" | "patternAttribute" | "patternAudience" | "patternCategory" | "patternFabricType" | "patternSuggestedFabric" | "suggestedFabric"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Attribute: {
        payload: Prisma.$AttributePayload<ExtArgs>
        fields: Prisma.AttributeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttributeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttributeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>
          }
          findFirst: {
            args: Prisma.AttributeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttributeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>
          }
          findMany: {
            args: Prisma.AttributeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>[]
          }
          create: {
            args: Prisma.AttributeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>
          }
          createMany: {
            args: Prisma.AttributeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttributeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>[]
          }
          delete: {
            args: Prisma.AttributeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>
          }
          update: {
            args: Prisma.AttributeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>
          }
          deleteMany: {
            args: Prisma.AttributeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttributeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AttributeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttributePayload>
          }
          aggregate: {
            args: Prisma.AttributeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttribute>
          }
          groupBy: {
            args: Prisma.AttributeGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttributeGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttributeCountArgs<ExtArgs>
            result: $Utils.Optional<AttributeCountAggregateOutputType> | number
          }
        }
      }
      Audience: {
        payload: Prisma.$AudiencePayload<ExtArgs>
        fields: Prisma.AudienceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AudienceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudiencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AudienceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudiencePayload>
          }
          findFirst: {
            args: Prisma.AudienceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudiencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AudienceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudiencePayload>
          }
          findMany: {
            args: Prisma.AudienceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudiencePayload>[]
          }
          create: {
            args: Prisma.AudienceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudiencePayload>
          }
          createMany: {
            args: Prisma.AudienceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AudienceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudiencePayload>[]
          }
          delete: {
            args: Prisma.AudienceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudiencePayload>
          }
          update: {
            args: Prisma.AudienceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudiencePayload>
          }
          deleteMany: {
            args: Prisma.AudienceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AudienceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AudienceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AudiencePayload>
          }
          aggregate: {
            args: Prisma.AudienceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAudience>
          }
          groupBy: {
            args: Prisma.AudienceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AudienceGroupByOutputType>[]
          }
          count: {
            args: Prisma.AudienceCountArgs<ExtArgs>
            result: $Utils.Optional<AudienceCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Designer: {
        payload: Prisma.$DesignerPayload<ExtArgs>
        fields: Prisma.DesignerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DesignerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DesignerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignerPayload>
          }
          findFirst: {
            args: Prisma.DesignerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DesignerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignerPayload>
          }
          findMany: {
            args: Prisma.DesignerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignerPayload>[]
          }
          create: {
            args: Prisma.DesignerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignerPayload>
          }
          createMany: {
            args: Prisma.DesignerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DesignerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignerPayload>[]
          }
          delete: {
            args: Prisma.DesignerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignerPayload>
          }
          update: {
            args: Prisma.DesignerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignerPayload>
          }
          deleteMany: {
            args: Prisma.DesignerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DesignerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DesignerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignerPayload>
          }
          aggregate: {
            args: Prisma.DesignerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDesigner>
          }
          groupBy: {
            args: Prisma.DesignerGroupByArgs<ExtArgs>
            result: $Utils.Optional<DesignerGroupByOutputType>[]
          }
          count: {
            args: Prisma.DesignerCountArgs<ExtArgs>
            result: $Utils.Optional<DesignerCountAggregateOutputType> | number
          }
        }
      }
      FabricType: {
        payload: Prisma.$FabricTypePayload<ExtArgs>
        fields: Prisma.FabricTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FabricTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FabricTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FabricTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FabricTypePayload>
          }
          findFirst: {
            args: Prisma.FabricTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FabricTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FabricTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FabricTypePayload>
          }
          findMany: {
            args: Prisma.FabricTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FabricTypePayload>[]
          }
          create: {
            args: Prisma.FabricTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FabricTypePayload>
          }
          createMany: {
            args: Prisma.FabricTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FabricTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FabricTypePayload>[]
          }
          delete: {
            args: Prisma.FabricTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FabricTypePayload>
          }
          update: {
            args: Prisma.FabricTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FabricTypePayload>
          }
          deleteMany: {
            args: Prisma.FabricTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FabricTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FabricTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FabricTypePayload>
          }
          aggregate: {
            args: Prisma.FabricTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFabricType>
          }
          groupBy: {
            args: Prisma.FabricTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<FabricTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.FabricTypeCountArgs<ExtArgs>
            result: $Utils.Optional<FabricTypeCountAggregateOutputType> | number
          }
        }
      }
      Format: {
        payload: Prisma.$FormatPayload<ExtArgs>
        fields: Prisma.FormatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FormatFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FormatFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormatPayload>
          }
          findFirst: {
            args: Prisma.FormatFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FormatFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormatPayload>
          }
          findMany: {
            args: Prisma.FormatFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormatPayload>[]
          }
          create: {
            args: Prisma.FormatCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormatPayload>
          }
          createMany: {
            args: Prisma.FormatCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FormatCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormatPayload>[]
          }
          delete: {
            args: Prisma.FormatDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormatPayload>
          }
          update: {
            args: Prisma.FormatUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormatPayload>
          }
          deleteMany: {
            args: Prisma.FormatDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FormatUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FormatUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormatPayload>
          }
          aggregate: {
            args: Prisma.FormatAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFormat>
          }
          groupBy: {
            args: Prisma.FormatGroupByArgs<ExtArgs>
            result: $Utils.Optional<FormatGroupByOutputType>[]
          }
          count: {
            args: Prisma.FormatCountArgs<ExtArgs>
            result: $Utils.Optional<FormatCountAggregateOutputType> | number
          }
        }
      }
      Pattern: {
        payload: Prisma.$PatternPayload<ExtArgs>
        fields: Prisma.PatternFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatternFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatternFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternPayload>
          }
          findFirst: {
            args: Prisma.PatternFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatternFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternPayload>
          }
          findMany: {
            args: Prisma.PatternFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternPayload>[]
          }
          create: {
            args: Prisma.PatternCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternPayload>
          }
          createMany: {
            args: Prisma.PatternCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatternCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternPayload>[]
          }
          delete: {
            args: Prisma.PatternDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternPayload>
          }
          update: {
            args: Prisma.PatternUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternPayload>
          }
          deleteMany: {
            args: Prisma.PatternDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatternUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatternUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternPayload>
          }
          aggregate: {
            args: Prisma.PatternAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePattern>
          }
          groupBy: {
            args: Prisma.PatternGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatternGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatternCountArgs<ExtArgs>
            result: $Utils.Optional<PatternCountAggregateOutputType> | number
          }
        }
      }
      PatternAttribute: {
        payload: Prisma.$PatternAttributePayload<ExtArgs>
        fields: Prisma.PatternAttributeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatternAttributeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternAttributePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatternAttributeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternAttributePayload>
          }
          findFirst: {
            args: Prisma.PatternAttributeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternAttributePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatternAttributeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternAttributePayload>
          }
          findMany: {
            args: Prisma.PatternAttributeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternAttributePayload>[]
          }
          create: {
            args: Prisma.PatternAttributeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternAttributePayload>
          }
          createMany: {
            args: Prisma.PatternAttributeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatternAttributeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternAttributePayload>[]
          }
          delete: {
            args: Prisma.PatternAttributeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternAttributePayload>
          }
          update: {
            args: Prisma.PatternAttributeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternAttributePayload>
          }
          deleteMany: {
            args: Prisma.PatternAttributeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatternAttributeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatternAttributeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternAttributePayload>
          }
          aggregate: {
            args: Prisma.PatternAttributeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatternAttribute>
          }
          groupBy: {
            args: Prisma.PatternAttributeGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatternAttributeGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatternAttributeCountArgs<ExtArgs>
            result: $Utils.Optional<PatternAttributeCountAggregateOutputType> | number
          }
        }
      }
      PatternAudience: {
        payload: Prisma.$PatternAudiencePayload<ExtArgs>
        fields: Prisma.PatternAudienceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatternAudienceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternAudiencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatternAudienceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternAudiencePayload>
          }
          findFirst: {
            args: Prisma.PatternAudienceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternAudiencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatternAudienceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternAudiencePayload>
          }
          findMany: {
            args: Prisma.PatternAudienceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternAudiencePayload>[]
          }
          create: {
            args: Prisma.PatternAudienceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternAudiencePayload>
          }
          createMany: {
            args: Prisma.PatternAudienceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatternAudienceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternAudiencePayload>[]
          }
          delete: {
            args: Prisma.PatternAudienceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternAudiencePayload>
          }
          update: {
            args: Prisma.PatternAudienceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternAudiencePayload>
          }
          deleteMany: {
            args: Prisma.PatternAudienceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatternAudienceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatternAudienceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternAudiencePayload>
          }
          aggregate: {
            args: Prisma.PatternAudienceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatternAudience>
          }
          groupBy: {
            args: Prisma.PatternAudienceGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatternAudienceGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatternAudienceCountArgs<ExtArgs>
            result: $Utils.Optional<PatternAudienceCountAggregateOutputType> | number
          }
        }
      }
      PatternCategory: {
        payload: Prisma.$PatternCategoryPayload<ExtArgs>
        fields: Prisma.PatternCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatternCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatternCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternCategoryPayload>
          }
          findFirst: {
            args: Prisma.PatternCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatternCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternCategoryPayload>
          }
          findMany: {
            args: Prisma.PatternCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternCategoryPayload>[]
          }
          create: {
            args: Prisma.PatternCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternCategoryPayload>
          }
          createMany: {
            args: Prisma.PatternCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatternCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternCategoryPayload>[]
          }
          delete: {
            args: Prisma.PatternCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternCategoryPayload>
          }
          update: {
            args: Prisma.PatternCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternCategoryPayload>
          }
          deleteMany: {
            args: Prisma.PatternCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatternCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatternCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternCategoryPayload>
          }
          aggregate: {
            args: Prisma.PatternCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatternCategory>
          }
          groupBy: {
            args: Prisma.PatternCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatternCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatternCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<PatternCategoryCountAggregateOutputType> | number
          }
        }
      }
      PatternFabricType: {
        payload: Prisma.$PatternFabricTypePayload<ExtArgs>
        fields: Prisma.PatternFabricTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatternFabricTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternFabricTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatternFabricTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternFabricTypePayload>
          }
          findFirst: {
            args: Prisma.PatternFabricTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternFabricTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatternFabricTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternFabricTypePayload>
          }
          findMany: {
            args: Prisma.PatternFabricTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternFabricTypePayload>[]
          }
          create: {
            args: Prisma.PatternFabricTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternFabricTypePayload>
          }
          createMany: {
            args: Prisma.PatternFabricTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatternFabricTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternFabricTypePayload>[]
          }
          delete: {
            args: Prisma.PatternFabricTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternFabricTypePayload>
          }
          update: {
            args: Prisma.PatternFabricTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternFabricTypePayload>
          }
          deleteMany: {
            args: Prisma.PatternFabricTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatternFabricTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatternFabricTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternFabricTypePayload>
          }
          aggregate: {
            args: Prisma.PatternFabricTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatternFabricType>
          }
          groupBy: {
            args: Prisma.PatternFabricTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatternFabricTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatternFabricTypeCountArgs<ExtArgs>
            result: $Utils.Optional<PatternFabricTypeCountAggregateOutputType> | number
          }
        }
      }
      PatternSuggestedFabric: {
        payload: Prisma.$PatternSuggestedFabricPayload<ExtArgs>
        fields: Prisma.PatternSuggestedFabricFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatternSuggestedFabricFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternSuggestedFabricPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatternSuggestedFabricFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternSuggestedFabricPayload>
          }
          findFirst: {
            args: Prisma.PatternSuggestedFabricFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternSuggestedFabricPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatternSuggestedFabricFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternSuggestedFabricPayload>
          }
          findMany: {
            args: Prisma.PatternSuggestedFabricFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternSuggestedFabricPayload>[]
          }
          create: {
            args: Prisma.PatternSuggestedFabricCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternSuggestedFabricPayload>
          }
          createMany: {
            args: Prisma.PatternSuggestedFabricCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatternSuggestedFabricCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternSuggestedFabricPayload>[]
          }
          delete: {
            args: Prisma.PatternSuggestedFabricDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternSuggestedFabricPayload>
          }
          update: {
            args: Prisma.PatternSuggestedFabricUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternSuggestedFabricPayload>
          }
          deleteMany: {
            args: Prisma.PatternSuggestedFabricDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatternSuggestedFabricUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatternSuggestedFabricUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatternSuggestedFabricPayload>
          }
          aggregate: {
            args: Prisma.PatternSuggestedFabricAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatternSuggestedFabric>
          }
          groupBy: {
            args: Prisma.PatternSuggestedFabricGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatternSuggestedFabricGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatternSuggestedFabricCountArgs<ExtArgs>
            result: $Utils.Optional<PatternSuggestedFabricCountAggregateOutputType> | number
          }
        }
      }
      SuggestedFabric: {
        payload: Prisma.$SuggestedFabricPayload<ExtArgs>
        fields: Prisma.SuggestedFabricFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SuggestedFabricFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuggestedFabricPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SuggestedFabricFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuggestedFabricPayload>
          }
          findFirst: {
            args: Prisma.SuggestedFabricFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuggestedFabricPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SuggestedFabricFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuggestedFabricPayload>
          }
          findMany: {
            args: Prisma.SuggestedFabricFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuggestedFabricPayload>[]
          }
          create: {
            args: Prisma.SuggestedFabricCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuggestedFabricPayload>
          }
          createMany: {
            args: Prisma.SuggestedFabricCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SuggestedFabricCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuggestedFabricPayload>[]
          }
          delete: {
            args: Prisma.SuggestedFabricDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuggestedFabricPayload>
          }
          update: {
            args: Prisma.SuggestedFabricUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuggestedFabricPayload>
          }
          deleteMany: {
            args: Prisma.SuggestedFabricDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SuggestedFabricUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SuggestedFabricUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuggestedFabricPayload>
          }
          aggregate: {
            args: Prisma.SuggestedFabricAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSuggestedFabric>
          }
          groupBy: {
            args: Prisma.SuggestedFabricGroupByArgs<ExtArgs>
            result: $Utils.Optional<SuggestedFabricGroupByOutputType>[]
          }
          count: {
            args: Prisma.SuggestedFabricCountArgs<ExtArgs>
            result: $Utils.Optional<SuggestedFabricCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AttributeCountOutputType
   */

  export type AttributeCountOutputType = {
    PatternAttribute: number
  }

  export type AttributeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PatternAttribute?: boolean | AttributeCountOutputTypeCountPatternAttributeArgs
  }

  // Custom InputTypes
  /**
   * AttributeCountOutputType without action
   */
  export type AttributeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttributeCountOutputType
     */
    select?: AttributeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AttributeCountOutputType without action
   */
  export type AttributeCountOutputTypeCountPatternAttributeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatternAttributeWhereInput
  }


  /**
   * Count Type AudienceCountOutputType
   */

  export type AudienceCountOutputType = {
    PatternAudience: number
  }

  export type AudienceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PatternAudience?: boolean | AudienceCountOutputTypeCountPatternAudienceArgs
  }

  // Custom InputTypes
  /**
   * AudienceCountOutputType without action
   */
  export type AudienceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudienceCountOutputType
     */
    select?: AudienceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AudienceCountOutputType without action
   */
  export type AudienceCountOutputTypeCountPatternAudienceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatternAudienceWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    PatternCategory: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PatternCategory?: boolean | CategoryCountOutputTypeCountPatternCategoryArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountPatternCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatternCategoryWhereInput
  }


  /**
   * Count Type DesignerCountOutputType
   */

  export type DesignerCountOutputType = {
    patterns: number
  }

  export type DesignerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patterns?: boolean | DesignerCountOutputTypeCountPatternsArgs
  }

  // Custom InputTypes
  /**
   * DesignerCountOutputType without action
   */
  export type DesignerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DesignerCountOutputType
     */
    select?: DesignerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DesignerCountOutputType without action
   */
  export type DesignerCountOutputTypeCountPatternsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatternWhereInput
  }


  /**
   * Count Type FabricTypeCountOutputType
   */

  export type FabricTypeCountOutputType = {
    PatternFabricType: number
  }

  export type FabricTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PatternFabricType?: boolean | FabricTypeCountOutputTypeCountPatternFabricTypeArgs
  }

  // Custom InputTypes
  /**
   * FabricTypeCountOutputType without action
   */
  export type FabricTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FabricTypeCountOutputType
     */
    select?: FabricTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FabricTypeCountOutputType without action
   */
  export type FabricTypeCountOutputTypeCountPatternFabricTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatternFabricTypeWhereInput
  }


  /**
   * Count Type PatternCountOutputType
   */

  export type PatternCountOutputType = {
    PatternAttribute: number
    PatternAudience: number
    PatternCategory: number
    PatternFabricType: number
    PatternSuggestedFabric: number
  }

  export type PatternCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PatternAttribute?: boolean | PatternCountOutputTypeCountPatternAttributeArgs
    PatternAudience?: boolean | PatternCountOutputTypeCountPatternAudienceArgs
    PatternCategory?: boolean | PatternCountOutputTypeCountPatternCategoryArgs
    PatternFabricType?: boolean | PatternCountOutputTypeCountPatternFabricTypeArgs
    PatternSuggestedFabric?: boolean | PatternCountOutputTypeCountPatternSuggestedFabricArgs
  }

  // Custom InputTypes
  /**
   * PatternCountOutputType without action
   */
  export type PatternCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternCountOutputType
     */
    select?: PatternCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatternCountOutputType without action
   */
  export type PatternCountOutputTypeCountPatternAttributeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatternAttributeWhereInput
  }

  /**
   * PatternCountOutputType without action
   */
  export type PatternCountOutputTypeCountPatternAudienceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatternAudienceWhereInput
  }

  /**
   * PatternCountOutputType without action
   */
  export type PatternCountOutputTypeCountPatternCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatternCategoryWhereInput
  }

  /**
   * PatternCountOutputType without action
   */
  export type PatternCountOutputTypeCountPatternFabricTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatternFabricTypeWhereInput
  }

  /**
   * PatternCountOutputType without action
   */
  export type PatternCountOutputTypeCountPatternSuggestedFabricArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatternSuggestedFabricWhereInput
  }


  /**
   * Count Type SuggestedFabricCountOutputType
   */

  export type SuggestedFabricCountOutputType = {
    PatternSuggestedFabric: number
  }

  export type SuggestedFabricCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PatternSuggestedFabric?: boolean | SuggestedFabricCountOutputTypeCountPatternSuggestedFabricArgs
  }

  // Custom InputTypes
  /**
   * SuggestedFabricCountOutputType without action
   */
  export type SuggestedFabricCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestedFabricCountOutputType
     */
    select?: SuggestedFabricCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SuggestedFabricCountOutputType without action
   */
  export type SuggestedFabricCountOutputTypeCountPatternSuggestedFabricArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatternSuggestedFabricWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Attribute
   */

  export type AggregateAttribute = {
    _count: AttributeCountAggregateOutputType | null
    _avg: AttributeAvgAggregateOutputType | null
    _sum: AttributeSumAggregateOutputType | null
    _min: AttributeMinAggregateOutputType | null
    _max: AttributeMaxAggregateOutputType | null
  }

  export type AttributeAvgAggregateOutputType = {
    id: number | null
  }

  export type AttributeSumAggregateOutputType = {
    id: number | null
  }

  export type AttributeMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type AttributeMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type AttributeCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type AttributeAvgAggregateInputType = {
    id?: true
  }

  export type AttributeSumAggregateInputType = {
    id?: true
  }

  export type AttributeMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type AttributeMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type AttributeCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type AttributeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attribute to aggregate.
     */
    where?: AttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attributes to fetch.
     */
    orderBy?: AttributeOrderByWithRelationInput | AttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attributes
    **/
    _count?: true | AttributeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttributeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttributeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttributeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttributeMaxAggregateInputType
  }

  export type GetAttributeAggregateType<T extends AttributeAggregateArgs> = {
        [P in keyof T & keyof AggregateAttribute]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttribute[P]>
      : GetScalarType<T[P], AggregateAttribute[P]>
  }




  export type AttributeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttributeWhereInput
    orderBy?: AttributeOrderByWithAggregationInput | AttributeOrderByWithAggregationInput[]
    by: AttributeScalarFieldEnum[] | AttributeScalarFieldEnum
    having?: AttributeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttributeCountAggregateInputType | true
    _avg?: AttributeAvgAggregateInputType
    _sum?: AttributeSumAggregateInputType
    _min?: AttributeMinAggregateInputType
    _max?: AttributeMaxAggregateInputType
  }

  export type AttributeGroupByOutputType = {
    id: number
    name: string
    _count: AttributeCountAggregateOutputType | null
    _avg: AttributeAvgAggregateOutputType | null
    _sum: AttributeSumAggregateOutputType | null
    _min: AttributeMinAggregateOutputType | null
    _max: AttributeMaxAggregateOutputType | null
  }

  type GetAttributeGroupByPayload<T extends AttributeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttributeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttributeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttributeGroupByOutputType[P]>
            : GetScalarType<T[P], AttributeGroupByOutputType[P]>
        }
      >
    >


  export type AttributeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    PatternAttribute?: boolean | Attribute$PatternAttributeArgs<ExtArgs>
    _count?: boolean | AttributeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attribute"]>

  export type AttributeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["attribute"]>

  export type AttributeSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type AttributeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PatternAttribute?: boolean | Attribute$PatternAttributeArgs<ExtArgs>
    _count?: boolean | AttributeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AttributeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AttributePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Attribute"
    objects: {
      PatternAttribute: Prisma.$PatternAttributePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["attribute"]>
    composites: {}
  }

  type AttributeGetPayload<S extends boolean | null | undefined | AttributeDefaultArgs> = $Result.GetResult<Prisma.$AttributePayload, S>

  type AttributeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AttributeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AttributeCountAggregateInputType | true
    }

  export interface AttributeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attribute'], meta: { name: 'Attribute' } }
    /**
     * Find zero or one Attribute that matches the filter.
     * @param {AttributeFindUniqueArgs} args - Arguments to find a Attribute
     * @example
     * // Get one Attribute
     * const attribute = await prisma.attribute.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttributeFindUniqueArgs>(args: SelectSubset<T, AttributeFindUniqueArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Attribute that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AttributeFindUniqueOrThrowArgs} args - Arguments to find a Attribute
     * @example
     * // Get one Attribute
     * const attribute = await prisma.attribute.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttributeFindUniqueOrThrowArgs>(args: SelectSubset<T, AttributeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Attribute that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeFindFirstArgs} args - Arguments to find a Attribute
     * @example
     * // Get one Attribute
     * const attribute = await prisma.attribute.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttributeFindFirstArgs>(args?: SelectSubset<T, AttributeFindFirstArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Attribute that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeFindFirstOrThrowArgs} args - Arguments to find a Attribute
     * @example
     * // Get one Attribute
     * const attribute = await prisma.attribute.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttributeFindFirstOrThrowArgs>(args?: SelectSubset<T, AttributeFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Attributes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attributes
     * const attributes = await prisma.attribute.findMany()
     * 
     * // Get first 10 Attributes
     * const attributes = await prisma.attribute.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attributeWithIdOnly = await prisma.attribute.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttributeFindManyArgs>(args?: SelectSubset<T, AttributeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Attribute.
     * @param {AttributeCreateArgs} args - Arguments to create a Attribute.
     * @example
     * // Create one Attribute
     * const Attribute = await prisma.attribute.create({
     *   data: {
     *     // ... data to create a Attribute
     *   }
     * })
     * 
     */
    create<T extends AttributeCreateArgs>(args: SelectSubset<T, AttributeCreateArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Attributes.
     * @param {AttributeCreateManyArgs} args - Arguments to create many Attributes.
     * @example
     * // Create many Attributes
     * const attribute = await prisma.attribute.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttributeCreateManyArgs>(args?: SelectSubset<T, AttributeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Attributes and returns the data saved in the database.
     * @param {AttributeCreateManyAndReturnArgs} args - Arguments to create many Attributes.
     * @example
     * // Create many Attributes
     * const attribute = await prisma.attribute.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Attributes and only return the `id`
     * const attributeWithIdOnly = await prisma.attribute.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttributeCreateManyAndReturnArgs>(args?: SelectSubset<T, AttributeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Attribute.
     * @param {AttributeDeleteArgs} args - Arguments to delete one Attribute.
     * @example
     * // Delete one Attribute
     * const Attribute = await prisma.attribute.delete({
     *   where: {
     *     // ... filter to delete one Attribute
     *   }
     * })
     * 
     */
    delete<T extends AttributeDeleteArgs>(args: SelectSubset<T, AttributeDeleteArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Attribute.
     * @param {AttributeUpdateArgs} args - Arguments to update one Attribute.
     * @example
     * // Update one Attribute
     * const attribute = await prisma.attribute.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttributeUpdateArgs>(args: SelectSubset<T, AttributeUpdateArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Attributes.
     * @param {AttributeDeleteManyArgs} args - Arguments to filter Attributes to delete.
     * @example
     * // Delete a few Attributes
     * const { count } = await prisma.attribute.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttributeDeleteManyArgs>(args?: SelectSubset<T, AttributeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attributes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attributes
     * const attribute = await prisma.attribute.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttributeUpdateManyArgs>(args: SelectSubset<T, AttributeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Attribute.
     * @param {AttributeUpsertArgs} args - Arguments to update or create a Attribute.
     * @example
     * // Update or create a Attribute
     * const attribute = await prisma.attribute.upsert({
     *   create: {
     *     // ... data to create a Attribute
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attribute we want to update
     *   }
     * })
     */
    upsert<T extends AttributeUpsertArgs>(args: SelectSubset<T, AttributeUpsertArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Attributes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeCountArgs} args - Arguments to filter Attributes to count.
     * @example
     * // Count the number of Attributes
     * const count = await prisma.attribute.count({
     *   where: {
     *     // ... the filter for the Attributes we want to count
     *   }
     * })
    **/
    count<T extends AttributeCountArgs>(
      args?: Subset<T, AttributeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttributeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attribute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttributeAggregateArgs>(args: Subset<T, AttributeAggregateArgs>): Prisma.PrismaPromise<GetAttributeAggregateType<T>>

    /**
     * Group by Attribute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttributeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttributeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttributeGroupByArgs['orderBy'] }
        : { orderBy?: AttributeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttributeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttributeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Attribute model
   */
  readonly fields: AttributeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Attribute.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttributeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    PatternAttribute<T extends Attribute$PatternAttributeArgs<ExtArgs> = {}>(args?: Subset<T, Attribute$PatternAttributeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternAttributePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Attribute model
   */ 
  interface AttributeFieldRefs {
    readonly id: FieldRef<"Attribute", 'Int'>
    readonly name: FieldRef<"Attribute", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Attribute findUnique
   */
  export type AttributeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * Filter, which Attribute to fetch.
     */
    where: AttributeWhereUniqueInput
  }

  /**
   * Attribute findUniqueOrThrow
   */
  export type AttributeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * Filter, which Attribute to fetch.
     */
    where: AttributeWhereUniqueInput
  }

  /**
   * Attribute findFirst
   */
  export type AttributeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * Filter, which Attribute to fetch.
     */
    where?: AttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attributes to fetch.
     */
    orderBy?: AttributeOrderByWithRelationInput | AttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attributes.
     */
    cursor?: AttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attributes.
     */
    distinct?: AttributeScalarFieldEnum | AttributeScalarFieldEnum[]
  }

  /**
   * Attribute findFirstOrThrow
   */
  export type AttributeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * Filter, which Attribute to fetch.
     */
    where?: AttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attributes to fetch.
     */
    orderBy?: AttributeOrderByWithRelationInput | AttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attributes.
     */
    cursor?: AttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attributes.
     */
    distinct?: AttributeScalarFieldEnum | AttributeScalarFieldEnum[]
  }

  /**
   * Attribute findMany
   */
  export type AttributeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * Filter, which Attributes to fetch.
     */
    where?: AttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attributes to fetch.
     */
    orderBy?: AttributeOrderByWithRelationInput | AttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attributes.
     */
    cursor?: AttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attributes.
     */
    skip?: number
    distinct?: AttributeScalarFieldEnum | AttributeScalarFieldEnum[]
  }

  /**
   * Attribute create
   */
  export type AttributeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * The data needed to create a Attribute.
     */
    data: XOR<AttributeCreateInput, AttributeUncheckedCreateInput>
  }

  /**
   * Attribute createMany
   */
  export type AttributeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Attributes.
     */
    data: AttributeCreateManyInput | AttributeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Attribute createManyAndReturn
   */
  export type AttributeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Attributes.
     */
    data: AttributeCreateManyInput | AttributeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Attribute update
   */
  export type AttributeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * The data needed to update a Attribute.
     */
    data: XOR<AttributeUpdateInput, AttributeUncheckedUpdateInput>
    /**
     * Choose, which Attribute to update.
     */
    where: AttributeWhereUniqueInput
  }

  /**
   * Attribute updateMany
   */
  export type AttributeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Attributes.
     */
    data: XOR<AttributeUpdateManyMutationInput, AttributeUncheckedUpdateManyInput>
    /**
     * Filter which Attributes to update
     */
    where?: AttributeWhereInput
  }

  /**
   * Attribute upsert
   */
  export type AttributeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * The filter to search for the Attribute to update in case it exists.
     */
    where: AttributeWhereUniqueInput
    /**
     * In case the Attribute found by the `where` argument doesn't exist, create a new Attribute with this data.
     */
    create: XOR<AttributeCreateInput, AttributeUncheckedCreateInput>
    /**
     * In case the Attribute was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttributeUpdateInput, AttributeUncheckedUpdateInput>
  }

  /**
   * Attribute delete
   */
  export type AttributeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
    /**
     * Filter which Attribute to delete.
     */
    where: AttributeWhereUniqueInput
  }

  /**
   * Attribute deleteMany
   */
  export type AttributeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attributes to delete
     */
    where?: AttributeWhereInput
  }

  /**
   * Attribute.PatternAttribute
   */
  export type Attribute$PatternAttributeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAttribute
     */
    select?: PatternAttributeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAttributeInclude<ExtArgs> | null
    where?: PatternAttributeWhereInput
    orderBy?: PatternAttributeOrderByWithRelationInput | PatternAttributeOrderByWithRelationInput[]
    cursor?: PatternAttributeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatternAttributeScalarFieldEnum | PatternAttributeScalarFieldEnum[]
  }

  /**
   * Attribute without action
   */
  export type AttributeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attribute
     */
    select?: AttributeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttributeInclude<ExtArgs> | null
  }


  /**
   * Model Audience
   */

  export type AggregateAudience = {
    _count: AudienceCountAggregateOutputType | null
    _avg: AudienceAvgAggregateOutputType | null
    _sum: AudienceSumAggregateOutputType | null
    _min: AudienceMinAggregateOutputType | null
    _max: AudienceMaxAggregateOutputType | null
  }

  export type AudienceAvgAggregateOutputType = {
    id: number | null
  }

  export type AudienceSumAggregateOutputType = {
    id: number | null
  }

  export type AudienceMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type AudienceMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type AudienceCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type AudienceAvgAggregateInputType = {
    id?: true
  }

  export type AudienceSumAggregateInputType = {
    id?: true
  }

  export type AudienceMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type AudienceMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type AudienceCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type AudienceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Audience to aggregate.
     */
    where?: AudienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Audiences to fetch.
     */
    orderBy?: AudienceOrderByWithRelationInput | AudienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AudienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Audiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Audiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Audiences
    **/
    _count?: true | AudienceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AudienceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AudienceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AudienceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AudienceMaxAggregateInputType
  }

  export type GetAudienceAggregateType<T extends AudienceAggregateArgs> = {
        [P in keyof T & keyof AggregateAudience]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAudience[P]>
      : GetScalarType<T[P], AggregateAudience[P]>
  }




  export type AudienceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AudienceWhereInput
    orderBy?: AudienceOrderByWithAggregationInput | AudienceOrderByWithAggregationInput[]
    by: AudienceScalarFieldEnum[] | AudienceScalarFieldEnum
    having?: AudienceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AudienceCountAggregateInputType | true
    _avg?: AudienceAvgAggregateInputType
    _sum?: AudienceSumAggregateInputType
    _min?: AudienceMinAggregateInputType
    _max?: AudienceMaxAggregateInputType
  }

  export type AudienceGroupByOutputType = {
    id: number
    name: string
    _count: AudienceCountAggregateOutputType | null
    _avg: AudienceAvgAggregateOutputType | null
    _sum: AudienceSumAggregateOutputType | null
    _min: AudienceMinAggregateOutputType | null
    _max: AudienceMaxAggregateOutputType | null
  }

  type GetAudienceGroupByPayload<T extends AudienceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AudienceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AudienceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AudienceGroupByOutputType[P]>
            : GetScalarType<T[P], AudienceGroupByOutputType[P]>
        }
      >
    >


  export type AudienceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    PatternAudience?: boolean | Audience$PatternAudienceArgs<ExtArgs>
    _count?: boolean | AudienceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["audience"]>

  export type AudienceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["audience"]>

  export type AudienceSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type AudienceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PatternAudience?: boolean | Audience$PatternAudienceArgs<ExtArgs>
    _count?: boolean | AudienceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AudienceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AudiencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Audience"
    objects: {
      PatternAudience: Prisma.$PatternAudiencePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["audience"]>
    composites: {}
  }

  type AudienceGetPayload<S extends boolean | null | undefined | AudienceDefaultArgs> = $Result.GetResult<Prisma.$AudiencePayload, S>

  type AudienceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AudienceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AudienceCountAggregateInputType | true
    }

  export interface AudienceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Audience'], meta: { name: 'Audience' } }
    /**
     * Find zero or one Audience that matches the filter.
     * @param {AudienceFindUniqueArgs} args - Arguments to find a Audience
     * @example
     * // Get one Audience
     * const audience = await prisma.audience.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AudienceFindUniqueArgs>(args: SelectSubset<T, AudienceFindUniqueArgs<ExtArgs>>): Prisma__AudienceClient<$Result.GetResult<Prisma.$AudiencePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Audience that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AudienceFindUniqueOrThrowArgs} args - Arguments to find a Audience
     * @example
     * // Get one Audience
     * const audience = await prisma.audience.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AudienceFindUniqueOrThrowArgs>(args: SelectSubset<T, AudienceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AudienceClient<$Result.GetResult<Prisma.$AudiencePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Audience that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudienceFindFirstArgs} args - Arguments to find a Audience
     * @example
     * // Get one Audience
     * const audience = await prisma.audience.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AudienceFindFirstArgs>(args?: SelectSubset<T, AudienceFindFirstArgs<ExtArgs>>): Prisma__AudienceClient<$Result.GetResult<Prisma.$AudiencePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Audience that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudienceFindFirstOrThrowArgs} args - Arguments to find a Audience
     * @example
     * // Get one Audience
     * const audience = await prisma.audience.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AudienceFindFirstOrThrowArgs>(args?: SelectSubset<T, AudienceFindFirstOrThrowArgs<ExtArgs>>): Prisma__AudienceClient<$Result.GetResult<Prisma.$AudiencePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Audiences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudienceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Audiences
     * const audiences = await prisma.audience.findMany()
     * 
     * // Get first 10 Audiences
     * const audiences = await prisma.audience.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const audienceWithIdOnly = await prisma.audience.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AudienceFindManyArgs>(args?: SelectSubset<T, AudienceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AudiencePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Audience.
     * @param {AudienceCreateArgs} args - Arguments to create a Audience.
     * @example
     * // Create one Audience
     * const Audience = await prisma.audience.create({
     *   data: {
     *     // ... data to create a Audience
     *   }
     * })
     * 
     */
    create<T extends AudienceCreateArgs>(args: SelectSubset<T, AudienceCreateArgs<ExtArgs>>): Prisma__AudienceClient<$Result.GetResult<Prisma.$AudiencePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Audiences.
     * @param {AudienceCreateManyArgs} args - Arguments to create many Audiences.
     * @example
     * // Create many Audiences
     * const audience = await prisma.audience.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AudienceCreateManyArgs>(args?: SelectSubset<T, AudienceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Audiences and returns the data saved in the database.
     * @param {AudienceCreateManyAndReturnArgs} args - Arguments to create many Audiences.
     * @example
     * // Create many Audiences
     * const audience = await prisma.audience.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Audiences and only return the `id`
     * const audienceWithIdOnly = await prisma.audience.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AudienceCreateManyAndReturnArgs>(args?: SelectSubset<T, AudienceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AudiencePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Audience.
     * @param {AudienceDeleteArgs} args - Arguments to delete one Audience.
     * @example
     * // Delete one Audience
     * const Audience = await prisma.audience.delete({
     *   where: {
     *     // ... filter to delete one Audience
     *   }
     * })
     * 
     */
    delete<T extends AudienceDeleteArgs>(args: SelectSubset<T, AudienceDeleteArgs<ExtArgs>>): Prisma__AudienceClient<$Result.GetResult<Prisma.$AudiencePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Audience.
     * @param {AudienceUpdateArgs} args - Arguments to update one Audience.
     * @example
     * // Update one Audience
     * const audience = await prisma.audience.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AudienceUpdateArgs>(args: SelectSubset<T, AudienceUpdateArgs<ExtArgs>>): Prisma__AudienceClient<$Result.GetResult<Prisma.$AudiencePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Audiences.
     * @param {AudienceDeleteManyArgs} args - Arguments to filter Audiences to delete.
     * @example
     * // Delete a few Audiences
     * const { count } = await prisma.audience.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AudienceDeleteManyArgs>(args?: SelectSubset<T, AudienceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Audiences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudienceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Audiences
     * const audience = await prisma.audience.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AudienceUpdateManyArgs>(args: SelectSubset<T, AudienceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Audience.
     * @param {AudienceUpsertArgs} args - Arguments to update or create a Audience.
     * @example
     * // Update or create a Audience
     * const audience = await prisma.audience.upsert({
     *   create: {
     *     // ... data to create a Audience
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Audience we want to update
     *   }
     * })
     */
    upsert<T extends AudienceUpsertArgs>(args: SelectSubset<T, AudienceUpsertArgs<ExtArgs>>): Prisma__AudienceClient<$Result.GetResult<Prisma.$AudiencePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Audiences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudienceCountArgs} args - Arguments to filter Audiences to count.
     * @example
     * // Count the number of Audiences
     * const count = await prisma.audience.count({
     *   where: {
     *     // ... the filter for the Audiences we want to count
     *   }
     * })
    **/
    count<T extends AudienceCountArgs>(
      args?: Subset<T, AudienceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AudienceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Audience.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudienceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AudienceAggregateArgs>(args: Subset<T, AudienceAggregateArgs>): Prisma.PrismaPromise<GetAudienceAggregateType<T>>

    /**
     * Group by Audience.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudienceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AudienceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AudienceGroupByArgs['orderBy'] }
        : { orderBy?: AudienceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AudienceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAudienceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Audience model
   */
  readonly fields: AudienceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Audience.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AudienceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    PatternAudience<T extends Audience$PatternAudienceArgs<ExtArgs> = {}>(args?: Subset<T, Audience$PatternAudienceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternAudiencePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Audience model
   */ 
  interface AudienceFieldRefs {
    readonly id: FieldRef<"Audience", 'Int'>
    readonly name: FieldRef<"Audience", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Audience findUnique
   */
  export type AudienceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audience
     */
    select?: AudienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudienceInclude<ExtArgs> | null
    /**
     * Filter, which Audience to fetch.
     */
    where: AudienceWhereUniqueInput
  }

  /**
   * Audience findUniqueOrThrow
   */
  export type AudienceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audience
     */
    select?: AudienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudienceInclude<ExtArgs> | null
    /**
     * Filter, which Audience to fetch.
     */
    where: AudienceWhereUniqueInput
  }

  /**
   * Audience findFirst
   */
  export type AudienceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audience
     */
    select?: AudienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudienceInclude<ExtArgs> | null
    /**
     * Filter, which Audience to fetch.
     */
    where?: AudienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Audiences to fetch.
     */
    orderBy?: AudienceOrderByWithRelationInput | AudienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Audiences.
     */
    cursor?: AudienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Audiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Audiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Audiences.
     */
    distinct?: AudienceScalarFieldEnum | AudienceScalarFieldEnum[]
  }

  /**
   * Audience findFirstOrThrow
   */
  export type AudienceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audience
     */
    select?: AudienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudienceInclude<ExtArgs> | null
    /**
     * Filter, which Audience to fetch.
     */
    where?: AudienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Audiences to fetch.
     */
    orderBy?: AudienceOrderByWithRelationInput | AudienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Audiences.
     */
    cursor?: AudienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Audiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Audiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Audiences.
     */
    distinct?: AudienceScalarFieldEnum | AudienceScalarFieldEnum[]
  }

  /**
   * Audience findMany
   */
  export type AudienceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audience
     */
    select?: AudienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudienceInclude<ExtArgs> | null
    /**
     * Filter, which Audiences to fetch.
     */
    where?: AudienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Audiences to fetch.
     */
    orderBy?: AudienceOrderByWithRelationInput | AudienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Audiences.
     */
    cursor?: AudienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Audiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Audiences.
     */
    skip?: number
    distinct?: AudienceScalarFieldEnum | AudienceScalarFieldEnum[]
  }

  /**
   * Audience create
   */
  export type AudienceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audience
     */
    select?: AudienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudienceInclude<ExtArgs> | null
    /**
     * The data needed to create a Audience.
     */
    data: XOR<AudienceCreateInput, AudienceUncheckedCreateInput>
  }

  /**
   * Audience createMany
   */
  export type AudienceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Audiences.
     */
    data: AudienceCreateManyInput | AudienceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Audience createManyAndReturn
   */
  export type AudienceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audience
     */
    select?: AudienceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Audiences.
     */
    data: AudienceCreateManyInput | AudienceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Audience update
   */
  export type AudienceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audience
     */
    select?: AudienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudienceInclude<ExtArgs> | null
    /**
     * The data needed to update a Audience.
     */
    data: XOR<AudienceUpdateInput, AudienceUncheckedUpdateInput>
    /**
     * Choose, which Audience to update.
     */
    where: AudienceWhereUniqueInput
  }

  /**
   * Audience updateMany
   */
  export type AudienceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Audiences.
     */
    data: XOR<AudienceUpdateManyMutationInput, AudienceUncheckedUpdateManyInput>
    /**
     * Filter which Audiences to update
     */
    where?: AudienceWhereInput
  }

  /**
   * Audience upsert
   */
  export type AudienceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audience
     */
    select?: AudienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudienceInclude<ExtArgs> | null
    /**
     * The filter to search for the Audience to update in case it exists.
     */
    where: AudienceWhereUniqueInput
    /**
     * In case the Audience found by the `where` argument doesn't exist, create a new Audience with this data.
     */
    create: XOR<AudienceCreateInput, AudienceUncheckedCreateInput>
    /**
     * In case the Audience was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AudienceUpdateInput, AudienceUncheckedUpdateInput>
  }

  /**
   * Audience delete
   */
  export type AudienceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audience
     */
    select?: AudienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudienceInclude<ExtArgs> | null
    /**
     * Filter which Audience to delete.
     */
    where: AudienceWhereUniqueInput
  }

  /**
   * Audience deleteMany
   */
  export type AudienceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Audiences to delete
     */
    where?: AudienceWhereInput
  }

  /**
   * Audience.PatternAudience
   */
  export type Audience$PatternAudienceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAudience
     */
    select?: PatternAudienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAudienceInclude<ExtArgs> | null
    where?: PatternAudienceWhereInput
    orderBy?: PatternAudienceOrderByWithRelationInput | PatternAudienceOrderByWithRelationInput[]
    cursor?: PatternAudienceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatternAudienceScalarFieldEnum | PatternAudienceScalarFieldEnum[]
  }

  /**
   * Audience without action
   */
  export type AudienceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audience
     */
    select?: AudienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AudienceInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    name: string
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    PatternCategory?: boolean | Category$PatternCategoryArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PatternCategory?: boolean | Category$PatternCategoryArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      PatternCategory: Prisma.$PatternCategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    PatternCategory<T extends Category$PatternCategoryArgs<ExtArgs> = {}>(args?: Subset<T, Category$PatternCategoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternCategoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly name: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.PatternCategory
   */
  export type Category$PatternCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternCategory
     */
    select?: PatternCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternCategoryInclude<ExtArgs> | null
    where?: PatternCategoryWhereInput
    orderBy?: PatternCategoryOrderByWithRelationInput | PatternCategoryOrderByWithRelationInput[]
    cursor?: PatternCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatternCategoryScalarFieldEnum | PatternCategoryScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Designer
   */

  export type AggregateDesigner = {
    _count: DesignerCountAggregateOutputType | null
    _avg: DesignerAvgAggregateOutputType | null
    _sum: DesignerSumAggregateOutputType | null
    _min: DesignerMinAggregateOutputType | null
    _max: DesignerMaxAggregateOutputType | null
  }

  export type DesignerAvgAggregateOutputType = {
    id: number | null
  }

  export type DesignerSumAggregateOutputType = {
    id: number | null
  }

  export type DesignerMinAggregateOutputType = {
    id: number | null
    name: string | null
    url: string | null
    logo_url: string | null
    email: string | null
    address: string | null
    facebook: string | null
    instagram: string | null
    pinterest: string | null
    youtube: string | null
  }

  export type DesignerMaxAggregateOutputType = {
    id: number | null
    name: string | null
    url: string | null
    logo_url: string | null
    email: string | null
    address: string | null
    facebook: string | null
    instagram: string | null
    pinterest: string | null
    youtube: string | null
  }

  export type DesignerCountAggregateOutputType = {
    id: number
    name: number
    url: number
    logo_url: number
    email: number
    address: number
    facebook: number
    instagram: number
    pinterest: number
    youtube: number
    _all: number
  }


  export type DesignerAvgAggregateInputType = {
    id?: true
  }

  export type DesignerSumAggregateInputType = {
    id?: true
  }

  export type DesignerMinAggregateInputType = {
    id?: true
    name?: true
    url?: true
    logo_url?: true
    email?: true
    address?: true
    facebook?: true
    instagram?: true
    pinterest?: true
    youtube?: true
  }

  export type DesignerMaxAggregateInputType = {
    id?: true
    name?: true
    url?: true
    logo_url?: true
    email?: true
    address?: true
    facebook?: true
    instagram?: true
    pinterest?: true
    youtube?: true
  }

  export type DesignerCountAggregateInputType = {
    id?: true
    name?: true
    url?: true
    logo_url?: true
    email?: true
    address?: true
    facebook?: true
    instagram?: true
    pinterest?: true
    youtube?: true
    _all?: true
  }

  export type DesignerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Designer to aggregate.
     */
    where?: DesignerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Designers to fetch.
     */
    orderBy?: DesignerOrderByWithRelationInput | DesignerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DesignerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Designers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Designers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Designers
    **/
    _count?: true | DesignerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DesignerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DesignerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DesignerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DesignerMaxAggregateInputType
  }

  export type GetDesignerAggregateType<T extends DesignerAggregateArgs> = {
        [P in keyof T & keyof AggregateDesigner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDesigner[P]>
      : GetScalarType<T[P], AggregateDesigner[P]>
  }




  export type DesignerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DesignerWhereInput
    orderBy?: DesignerOrderByWithAggregationInput | DesignerOrderByWithAggregationInput[]
    by: DesignerScalarFieldEnum[] | DesignerScalarFieldEnum
    having?: DesignerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DesignerCountAggregateInputType | true
    _avg?: DesignerAvgAggregateInputType
    _sum?: DesignerSumAggregateInputType
    _min?: DesignerMinAggregateInputType
    _max?: DesignerMaxAggregateInputType
  }

  export type DesignerGroupByOutputType = {
    id: number
    name: string
    url: string
    logo_url: string | null
    email: string | null
    address: string | null
    facebook: string | null
    instagram: string | null
    pinterest: string | null
    youtube: string | null
    _count: DesignerCountAggregateOutputType | null
    _avg: DesignerAvgAggregateOutputType | null
    _sum: DesignerSumAggregateOutputType | null
    _min: DesignerMinAggregateOutputType | null
    _max: DesignerMaxAggregateOutputType | null
  }

  type GetDesignerGroupByPayload<T extends DesignerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DesignerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DesignerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DesignerGroupByOutputType[P]>
            : GetScalarType<T[P], DesignerGroupByOutputType[P]>
        }
      >
    >


  export type DesignerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    url?: boolean
    logo_url?: boolean
    email?: boolean
    address?: boolean
    facebook?: boolean
    instagram?: boolean
    pinterest?: boolean
    youtube?: boolean
    patterns?: boolean | Designer$patternsArgs<ExtArgs>
    _count?: boolean | DesignerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["designer"]>

  export type DesignerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    url?: boolean
    logo_url?: boolean
    email?: boolean
    address?: boolean
    facebook?: boolean
    instagram?: boolean
    pinterest?: boolean
    youtube?: boolean
  }, ExtArgs["result"]["designer"]>

  export type DesignerSelectScalar = {
    id?: boolean
    name?: boolean
    url?: boolean
    logo_url?: boolean
    email?: boolean
    address?: boolean
    facebook?: boolean
    instagram?: boolean
    pinterest?: boolean
    youtube?: boolean
  }

  export type DesignerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patterns?: boolean | Designer$patternsArgs<ExtArgs>
    _count?: boolean | DesignerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DesignerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DesignerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Designer"
    objects: {
      patterns: Prisma.$PatternPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      url: string
      logo_url: string | null
      email: string | null
      address: string | null
      facebook: string | null
      instagram: string | null
      pinterest: string | null
      youtube: string | null
    }, ExtArgs["result"]["designer"]>
    composites: {}
  }

  type DesignerGetPayload<S extends boolean | null | undefined | DesignerDefaultArgs> = $Result.GetResult<Prisma.$DesignerPayload, S>

  type DesignerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DesignerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DesignerCountAggregateInputType | true
    }

  export interface DesignerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Designer'], meta: { name: 'Designer' } }
    /**
     * Find zero or one Designer that matches the filter.
     * @param {DesignerFindUniqueArgs} args - Arguments to find a Designer
     * @example
     * // Get one Designer
     * const designer = await prisma.designer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DesignerFindUniqueArgs>(args: SelectSubset<T, DesignerFindUniqueArgs<ExtArgs>>): Prisma__DesignerClient<$Result.GetResult<Prisma.$DesignerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Designer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DesignerFindUniqueOrThrowArgs} args - Arguments to find a Designer
     * @example
     * // Get one Designer
     * const designer = await prisma.designer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DesignerFindUniqueOrThrowArgs>(args: SelectSubset<T, DesignerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DesignerClient<$Result.GetResult<Prisma.$DesignerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Designer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesignerFindFirstArgs} args - Arguments to find a Designer
     * @example
     * // Get one Designer
     * const designer = await prisma.designer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DesignerFindFirstArgs>(args?: SelectSubset<T, DesignerFindFirstArgs<ExtArgs>>): Prisma__DesignerClient<$Result.GetResult<Prisma.$DesignerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Designer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesignerFindFirstOrThrowArgs} args - Arguments to find a Designer
     * @example
     * // Get one Designer
     * const designer = await prisma.designer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DesignerFindFirstOrThrowArgs>(args?: SelectSubset<T, DesignerFindFirstOrThrowArgs<ExtArgs>>): Prisma__DesignerClient<$Result.GetResult<Prisma.$DesignerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Designers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesignerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Designers
     * const designers = await prisma.designer.findMany()
     * 
     * // Get first 10 Designers
     * const designers = await prisma.designer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const designerWithIdOnly = await prisma.designer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DesignerFindManyArgs>(args?: SelectSubset<T, DesignerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DesignerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Designer.
     * @param {DesignerCreateArgs} args - Arguments to create a Designer.
     * @example
     * // Create one Designer
     * const Designer = await prisma.designer.create({
     *   data: {
     *     // ... data to create a Designer
     *   }
     * })
     * 
     */
    create<T extends DesignerCreateArgs>(args: SelectSubset<T, DesignerCreateArgs<ExtArgs>>): Prisma__DesignerClient<$Result.GetResult<Prisma.$DesignerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Designers.
     * @param {DesignerCreateManyArgs} args - Arguments to create many Designers.
     * @example
     * // Create many Designers
     * const designer = await prisma.designer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DesignerCreateManyArgs>(args?: SelectSubset<T, DesignerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Designers and returns the data saved in the database.
     * @param {DesignerCreateManyAndReturnArgs} args - Arguments to create many Designers.
     * @example
     * // Create many Designers
     * const designer = await prisma.designer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Designers and only return the `id`
     * const designerWithIdOnly = await prisma.designer.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DesignerCreateManyAndReturnArgs>(args?: SelectSubset<T, DesignerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DesignerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Designer.
     * @param {DesignerDeleteArgs} args - Arguments to delete one Designer.
     * @example
     * // Delete one Designer
     * const Designer = await prisma.designer.delete({
     *   where: {
     *     // ... filter to delete one Designer
     *   }
     * })
     * 
     */
    delete<T extends DesignerDeleteArgs>(args: SelectSubset<T, DesignerDeleteArgs<ExtArgs>>): Prisma__DesignerClient<$Result.GetResult<Prisma.$DesignerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Designer.
     * @param {DesignerUpdateArgs} args - Arguments to update one Designer.
     * @example
     * // Update one Designer
     * const designer = await prisma.designer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DesignerUpdateArgs>(args: SelectSubset<T, DesignerUpdateArgs<ExtArgs>>): Prisma__DesignerClient<$Result.GetResult<Prisma.$DesignerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Designers.
     * @param {DesignerDeleteManyArgs} args - Arguments to filter Designers to delete.
     * @example
     * // Delete a few Designers
     * const { count } = await prisma.designer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DesignerDeleteManyArgs>(args?: SelectSubset<T, DesignerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Designers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesignerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Designers
     * const designer = await prisma.designer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DesignerUpdateManyArgs>(args: SelectSubset<T, DesignerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Designer.
     * @param {DesignerUpsertArgs} args - Arguments to update or create a Designer.
     * @example
     * // Update or create a Designer
     * const designer = await prisma.designer.upsert({
     *   create: {
     *     // ... data to create a Designer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Designer we want to update
     *   }
     * })
     */
    upsert<T extends DesignerUpsertArgs>(args: SelectSubset<T, DesignerUpsertArgs<ExtArgs>>): Prisma__DesignerClient<$Result.GetResult<Prisma.$DesignerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Designers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesignerCountArgs} args - Arguments to filter Designers to count.
     * @example
     * // Count the number of Designers
     * const count = await prisma.designer.count({
     *   where: {
     *     // ... the filter for the Designers we want to count
     *   }
     * })
    **/
    count<T extends DesignerCountArgs>(
      args?: Subset<T, DesignerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DesignerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Designer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesignerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DesignerAggregateArgs>(args: Subset<T, DesignerAggregateArgs>): Prisma.PrismaPromise<GetDesignerAggregateType<T>>

    /**
     * Group by Designer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesignerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DesignerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DesignerGroupByArgs['orderBy'] }
        : { orderBy?: DesignerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DesignerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDesignerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Designer model
   */
  readonly fields: DesignerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Designer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DesignerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patterns<T extends Designer$patternsArgs<ExtArgs> = {}>(args?: Subset<T, Designer$patternsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Designer model
   */ 
  interface DesignerFieldRefs {
    readonly id: FieldRef<"Designer", 'Int'>
    readonly name: FieldRef<"Designer", 'String'>
    readonly url: FieldRef<"Designer", 'String'>
    readonly logo_url: FieldRef<"Designer", 'String'>
    readonly email: FieldRef<"Designer", 'String'>
    readonly address: FieldRef<"Designer", 'String'>
    readonly facebook: FieldRef<"Designer", 'String'>
    readonly instagram: FieldRef<"Designer", 'String'>
    readonly pinterest: FieldRef<"Designer", 'String'>
    readonly youtube: FieldRef<"Designer", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Designer findUnique
   */
  export type DesignerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Designer
     */
    select?: DesignerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignerInclude<ExtArgs> | null
    /**
     * Filter, which Designer to fetch.
     */
    where: DesignerWhereUniqueInput
  }

  /**
   * Designer findUniqueOrThrow
   */
  export type DesignerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Designer
     */
    select?: DesignerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignerInclude<ExtArgs> | null
    /**
     * Filter, which Designer to fetch.
     */
    where: DesignerWhereUniqueInput
  }

  /**
   * Designer findFirst
   */
  export type DesignerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Designer
     */
    select?: DesignerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignerInclude<ExtArgs> | null
    /**
     * Filter, which Designer to fetch.
     */
    where?: DesignerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Designers to fetch.
     */
    orderBy?: DesignerOrderByWithRelationInput | DesignerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Designers.
     */
    cursor?: DesignerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Designers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Designers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Designers.
     */
    distinct?: DesignerScalarFieldEnum | DesignerScalarFieldEnum[]
  }

  /**
   * Designer findFirstOrThrow
   */
  export type DesignerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Designer
     */
    select?: DesignerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignerInclude<ExtArgs> | null
    /**
     * Filter, which Designer to fetch.
     */
    where?: DesignerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Designers to fetch.
     */
    orderBy?: DesignerOrderByWithRelationInput | DesignerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Designers.
     */
    cursor?: DesignerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Designers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Designers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Designers.
     */
    distinct?: DesignerScalarFieldEnum | DesignerScalarFieldEnum[]
  }

  /**
   * Designer findMany
   */
  export type DesignerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Designer
     */
    select?: DesignerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignerInclude<ExtArgs> | null
    /**
     * Filter, which Designers to fetch.
     */
    where?: DesignerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Designers to fetch.
     */
    orderBy?: DesignerOrderByWithRelationInput | DesignerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Designers.
     */
    cursor?: DesignerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Designers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Designers.
     */
    skip?: number
    distinct?: DesignerScalarFieldEnum | DesignerScalarFieldEnum[]
  }

  /**
   * Designer create
   */
  export type DesignerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Designer
     */
    select?: DesignerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignerInclude<ExtArgs> | null
    /**
     * The data needed to create a Designer.
     */
    data: XOR<DesignerCreateInput, DesignerUncheckedCreateInput>
  }

  /**
   * Designer createMany
   */
  export type DesignerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Designers.
     */
    data: DesignerCreateManyInput | DesignerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Designer createManyAndReturn
   */
  export type DesignerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Designer
     */
    select?: DesignerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Designers.
     */
    data: DesignerCreateManyInput | DesignerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Designer update
   */
  export type DesignerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Designer
     */
    select?: DesignerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignerInclude<ExtArgs> | null
    /**
     * The data needed to update a Designer.
     */
    data: XOR<DesignerUpdateInput, DesignerUncheckedUpdateInput>
    /**
     * Choose, which Designer to update.
     */
    where: DesignerWhereUniqueInput
  }

  /**
   * Designer updateMany
   */
  export type DesignerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Designers.
     */
    data: XOR<DesignerUpdateManyMutationInput, DesignerUncheckedUpdateManyInput>
    /**
     * Filter which Designers to update
     */
    where?: DesignerWhereInput
  }

  /**
   * Designer upsert
   */
  export type DesignerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Designer
     */
    select?: DesignerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignerInclude<ExtArgs> | null
    /**
     * The filter to search for the Designer to update in case it exists.
     */
    where: DesignerWhereUniqueInput
    /**
     * In case the Designer found by the `where` argument doesn't exist, create a new Designer with this data.
     */
    create: XOR<DesignerCreateInput, DesignerUncheckedCreateInput>
    /**
     * In case the Designer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DesignerUpdateInput, DesignerUncheckedUpdateInput>
  }

  /**
   * Designer delete
   */
  export type DesignerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Designer
     */
    select?: DesignerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignerInclude<ExtArgs> | null
    /**
     * Filter which Designer to delete.
     */
    where: DesignerWhereUniqueInput
  }

  /**
   * Designer deleteMany
   */
  export type DesignerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Designers to delete
     */
    where?: DesignerWhereInput
  }

  /**
   * Designer.patterns
   */
  export type Designer$patternsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pattern
     */
    select?: PatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternInclude<ExtArgs> | null
    where?: PatternWhereInput
    orderBy?: PatternOrderByWithRelationInput | PatternOrderByWithRelationInput[]
    cursor?: PatternWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatternScalarFieldEnum | PatternScalarFieldEnum[]
  }

  /**
   * Designer without action
   */
  export type DesignerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Designer
     */
    select?: DesignerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DesignerInclude<ExtArgs> | null
  }


  /**
   * Model FabricType
   */

  export type AggregateFabricType = {
    _count: FabricTypeCountAggregateOutputType | null
    _avg: FabricTypeAvgAggregateOutputType | null
    _sum: FabricTypeSumAggregateOutputType | null
    _min: FabricTypeMinAggregateOutputType | null
    _max: FabricTypeMaxAggregateOutputType | null
  }

  export type FabricTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type FabricTypeSumAggregateOutputType = {
    id: number | null
  }

  export type FabricTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type FabricTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type FabricTypeCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type FabricTypeAvgAggregateInputType = {
    id?: true
  }

  export type FabricTypeSumAggregateInputType = {
    id?: true
  }

  export type FabricTypeMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type FabricTypeMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type FabricTypeCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type FabricTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FabricType to aggregate.
     */
    where?: FabricTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FabricTypes to fetch.
     */
    orderBy?: FabricTypeOrderByWithRelationInput | FabricTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FabricTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FabricTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FabricTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FabricTypes
    **/
    _count?: true | FabricTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FabricTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FabricTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FabricTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FabricTypeMaxAggregateInputType
  }

  export type GetFabricTypeAggregateType<T extends FabricTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateFabricType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFabricType[P]>
      : GetScalarType<T[P], AggregateFabricType[P]>
  }




  export type FabricTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FabricTypeWhereInput
    orderBy?: FabricTypeOrderByWithAggregationInput | FabricTypeOrderByWithAggregationInput[]
    by: FabricTypeScalarFieldEnum[] | FabricTypeScalarFieldEnum
    having?: FabricTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FabricTypeCountAggregateInputType | true
    _avg?: FabricTypeAvgAggregateInputType
    _sum?: FabricTypeSumAggregateInputType
    _min?: FabricTypeMinAggregateInputType
    _max?: FabricTypeMaxAggregateInputType
  }

  export type FabricTypeGroupByOutputType = {
    id: number
    name: string
    _count: FabricTypeCountAggregateOutputType | null
    _avg: FabricTypeAvgAggregateOutputType | null
    _sum: FabricTypeSumAggregateOutputType | null
    _min: FabricTypeMinAggregateOutputType | null
    _max: FabricTypeMaxAggregateOutputType | null
  }

  type GetFabricTypeGroupByPayload<T extends FabricTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FabricTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FabricTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FabricTypeGroupByOutputType[P]>
            : GetScalarType<T[P], FabricTypeGroupByOutputType[P]>
        }
      >
    >


  export type FabricTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    PatternFabricType?: boolean | FabricType$PatternFabricTypeArgs<ExtArgs>
    _count?: boolean | FabricTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fabricType"]>

  export type FabricTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["fabricType"]>

  export type FabricTypeSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type FabricTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PatternFabricType?: boolean | FabricType$PatternFabricTypeArgs<ExtArgs>
    _count?: boolean | FabricTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FabricTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FabricTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FabricType"
    objects: {
      PatternFabricType: Prisma.$PatternFabricTypePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["fabricType"]>
    composites: {}
  }

  type FabricTypeGetPayload<S extends boolean | null | undefined | FabricTypeDefaultArgs> = $Result.GetResult<Prisma.$FabricTypePayload, S>

  type FabricTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FabricTypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FabricTypeCountAggregateInputType | true
    }

  export interface FabricTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FabricType'], meta: { name: 'FabricType' } }
    /**
     * Find zero or one FabricType that matches the filter.
     * @param {FabricTypeFindUniqueArgs} args - Arguments to find a FabricType
     * @example
     * // Get one FabricType
     * const fabricType = await prisma.fabricType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FabricTypeFindUniqueArgs>(args: SelectSubset<T, FabricTypeFindUniqueArgs<ExtArgs>>): Prisma__FabricTypeClient<$Result.GetResult<Prisma.$FabricTypePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FabricType that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FabricTypeFindUniqueOrThrowArgs} args - Arguments to find a FabricType
     * @example
     * // Get one FabricType
     * const fabricType = await prisma.fabricType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FabricTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, FabricTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FabricTypeClient<$Result.GetResult<Prisma.$FabricTypePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FabricType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FabricTypeFindFirstArgs} args - Arguments to find a FabricType
     * @example
     * // Get one FabricType
     * const fabricType = await prisma.fabricType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FabricTypeFindFirstArgs>(args?: SelectSubset<T, FabricTypeFindFirstArgs<ExtArgs>>): Prisma__FabricTypeClient<$Result.GetResult<Prisma.$FabricTypePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FabricType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FabricTypeFindFirstOrThrowArgs} args - Arguments to find a FabricType
     * @example
     * // Get one FabricType
     * const fabricType = await prisma.fabricType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FabricTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, FabricTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__FabricTypeClient<$Result.GetResult<Prisma.$FabricTypePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FabricTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FabricTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FabricTypes
     * const fabricTypes = await prisma.fabricType.findMany()
     * 
     * // Get first 10 FabricTypes
     * const fabricTypes = await prisma.fabricType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fabricTypeWithIdOnly = await prisma.fabricType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FabricTypeFindManyArgs>(args?: SelectSubset<T, FabricTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FabricTypePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FabricType.
     * @param {FabricTypeCreateArgs} args - Arguments to create a FabricType.
     * @example
     * // Create one FabricType
     * const FabricType = await prisma.fabricType.create({
     *   data: {
     *     // ... data to create a FabricType
     *   }
     * })
     * 
     */
    create<T extends FabricTypeCreateArgs>(args: SelectSubset<T, FabricTypeCreateArgs<ExtArgs>>): Prisma__FabricTypeClient<$Result.GetResult<Prisma.$FabricTypePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FabricTypes.
     * @param {FabricTypeCreateManyArgs} args - Arguments to create many FabricTypes.
     * @example
     * // Create many FabricTypes
     * const fabricType = await prisma.fabricType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FabricTypeCreateManyArgs>(args?: SelectSubset<T, FabricTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FabricTypes and returns the data saved in the database.
     * @param {FabricTypeCreateManyAndReturnArgs} args - Arguments to create many FabricTypes.
     * @example
     * // Create many FabricTypes
     * const fabricType = await prisma.fabricType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FabricTypes and only return the `id`
     * const fabricTypeWithIdOnly = await prisma.fabricType.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FabricTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, FabricTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FabricTypePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FabricType.
     * @param {FabricTypeDeleteArgs} args - Arguments to delete one FabricType.
     * @example
     * // Delete one FabricType
     * const FabricType = await prisma.fabricType.delete({
     *   where: {
     *     // ... filter to delete one FabricType
     *   }
     * })
     * 
     */
    delete<T extends FabricTypeDeleteArgs>(args: SelectSubset<T, FabricTypeDeleteArgs<ExtArgs>>): Prisma__FabricTypeClient<$Result.GetResult<Prisma.$FabricTypePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FabricType.
     * @param {FabricTypeUpdateArgs} args - Arguments to update one FabricType.
     * @example
     * // Update one FabricType
     * const fabricType = await prisma.fabricType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FabricTypeUpdateArgs>(args: SelectSubset<T, FabricTypeUpdateArgs<ExtArgs>>): Prisma__FabricTypeClient<$Result.GetResult<Prisma.$FabricTypePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FabricTypes.
     * @param {FabricTypeDeleteManyArgs} args - Arguments to filter FabricTypes to delete.
     * @example
     * // Delete a few FabricTypes
     * const { count } = await prisma.fabricType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FabricTypeDeleteManyArgs>(args?: SelectSubset<T, FabricTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FabricTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FabricTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FabricTypes
     * const fabricType = await prisma.fabricType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FabricTypeUpdateManyArgs>(args: SelectSubset<T, FabricTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FabricType.
     * @param {FabricTypeUpsertArgs} args - Arguments to update or create a FabricType.
     * @example
     * // Update or create a FabricType
     * const fabricType = await prisma.fabricType.upsert({
     *   create: {
     *     // ... data to create a FabricType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FabricType we want to update
     *   }
     * })
     */
    upsert<T extends FabricTypeUpsertArgs>(args: SelectSubset<T, FabricTypeUpsertArgs<ExtArgs>>): Prisma__FabricTypeClient<$Result.GetResult<Prisma.$FabricTypePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FabricTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FabricTypeCountArgs} args - Arguments to filter FabricTypes to count.
     * @example
     * // Count the number of FabricTypes
     * const count = await prisma.fabricType.count({
     *   where: {
     *     // ... the filter for the FabricTypes we want to count
     *   }
     * })
    **/
    count<T extends FabricTypeCountArgs>(
      args?: Subset<T, FabricTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FabricTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FabricType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FabricTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FabricTypeAggregateArgs>(args: Subset<T, FabricTypeAggregateArgs>): Prisma.PrismaPromise<GetFabricTypeAggregateType<T>>

    /**
     * Group by FabricType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FabricTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FabricTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FabricTypeGroupByArgs['orderBy'] }
        : { orderBy?: FabricTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FabricTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFabricTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FabricType model
   */
  readonly fields: FabricTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FabricType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FabricTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    PatternFabricType<T extends FabricType$PatternFabricTypeArgs<ExtArgs> = {}>(args?: Subset<T, FabricType$PatternFabricTypeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternFabricTypePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FabricType model
   */ 
  interface FabricTypeFieldRefs {
    readonly id: FieldRef<"FabricType", 'Int'>
    readonly name: FieldRef<"FabricType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FabricType findUnique
   */
  export type FabricTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FabricType
     */
    select?: FabricTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FabricTypeInclude<ExtArgs> | null
    /**
     * Filter, which FabricType to fetch.
     */
    where: FabricTypeWhereUniqueInput
  }

  /**
   * FabricType findUniqueOrThrow
   */
  export type FabricTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FabricType
     */
    select?: FabricTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FabricTypeInclude<ExtArgs> | null
    /**
     * Filter, which FabricType to fetch.
     */
    where: FabricTypeWhereUniqueInput
  }

  /**
   * FabricType findFirst
   */
  export type FabricTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FabricType
     */
    select?: FabricTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FabricTypeInclude<ExtArgs> | null
    /**
     * Filter, which FabricType to fetch.
     */
    where?: FabricTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FabricTypes to fetch.
     */
    orderBy?: FabricTypeOrderByWithRelationInput | FabricTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FabricTypes.
     */
    cursor?: FabricTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FabricTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FabricTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FabricTypes.
     */
    distinct?: FabricTypeScalarFieldEnum | FabricTypeScalarFieldEnum[]
  }

  /**
   * FabricType findFirstOrThrow
   */
  export type FabricTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FabricType
     */
    select?: FabricTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FabricTypeInclude<ExtArgs> | null
    /**
     * Filter, which FabricType to fetch.
     */
    where?: FabricTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FabricTypes to fetch.
     */
    orderBy?: FabricTypeOrderByWithRelationInput | FabricTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FabricTypes.
     */
    cursor?: FabricTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FabricTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FabricTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FabricTypes.
     */
    distinct?: FabricTypeScalarFieldEnum | FabricTypeScalarFieldEnum[]
  }

  /**
   * FabricType findMany
   */
  export type FabricTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FabricType
     */
    select?: FabricTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FabricTypeInclude<ExtArgs> | null
    /**
     * Filter, which FabricTypes to fetch.
     */
    where?: FabricTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FabricTypes to fetch.
     */
    orderBy?: FabricTypeOrderByWithRelationInput | FabricTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FabricTypes.
     */
    cursor?: FabricTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FabricTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FabricTypes.
     */
    skip?: number
    distinct?: FabricTypeScalarFieldEnum | FabricTypeScalarFieldEnum[]
  }

  /**
   * FabricType create
   */
  export type FabricTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FabricType
     */
    select?: FabricTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FabricTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a FabricType.
     */
    data: XOR<FabricTypeCreateInput, FabricTypeUncheckedCreateInput>
  }

  /**
   * FabricType createMany
   */
  export type FabricTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FabricTypes.
     */
    data: FabricTypeCreateManyInput | FabricTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FabricType createManyAndReturn
   */
  export type FabricTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FabricType
     */
    select?: FabricTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FabricTypes.
     */
    data: FabricTypeCreateManyInput | FabricTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FabricType update
   */
  export type FabricTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FabricType
     */
    select?: FabricTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FabricTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a FabricType.
     */
    data: XOR<FabricTypeUpdateInput, FabricTypeUncheckedUpdateInput>
    /**
     * Choose, which FabricType to update.
     */
    where: FabricTypeWhereUniqueInput
  }

  /**
   * FabricType updateMany
   */
  export type FabricTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FabricTypes.
     */
    data: XOR<FabricTypeUpdateManyMutationInput, FabricTypeUncheckedUpdateManyInput>
    /**
     * Filter which FabricTypes to update
     */
    where?: FabricTypeWhereInput
  }

  /**
   * FabricType upsert
   */
  export type FabricTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FabricType
     */
    select?: FabricTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FabricTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the FabricType to update in case it exists.
     */
    where: FabricTypeWhereUniqueInput
    /**
     * In case the FabricType found by the `where` argument doesn't exist, create a new FabricType with this data.
     */
    create: XOR<FabricTypeCreateInput, FabricTypeUncheckedCreateInput>
    /**
     * In case the FabricType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FabricTypeUpdateInput, FabricTypeUncheckedUpdateInput>
  }

  /**
   * FabricType delete
   */
  export type FabricTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FabricType
     */
    select?: FabricTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FabricTypeInclude<ExtArgs> | null
    /**
     * Filter which FabricType to delete.
     */
    where: FabricTypeWhereUniqueInput
  }

  /**
   * FabricType deleteMany
   */
  export type FabricTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FabricTypes to delete
     */
    where?: FabricTypeWhereInput
  }

  /**
   * FabricType.PatternFabricType
   */
  export type FabricType$PatternFabricTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternFabricType
     */
    select?: PatternFabricTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternFabricTypeInclude<ExtArgs> | null
    where?: PatternFabricTypeWhereInput
    orderBy?: PatternFabricTypeOrderByWithRelationInput | PatternFabricTypeOrderByWithRelationInput[]
    cursor?: PatternFabricTypeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatternFabricTypeScalarFieldEnum | PatternFabricTypeScalarFieldEnum[]
  }

  /**
   * FabricType without action
   */
  export type FabricTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FabricType
     */
    select?: FabricTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FabricTypeInclude<ExtArgs> | null
  }


  /**
   * Model Format
   */

  export type AggregateFormat = {
    _count: FormatCountAggregateOutputType | null
    _avg: FormatAvgAggregateOutputType | null
    _sum: FormatSumAggregateOutputType | null
    _min: FormatMinAggregateOutputType | null
    _max: FormatMaxAggregateOutputType | null
  }

  export type FormatAvgAggregateOutputType = {
    id: number | null
  }

  export type FormatSumAggregateOutputType = {
    id: number | null
  }

  export type FormatMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type FormatMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type FormatCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type FormatAvgAggregateInputType = {
    id?: true
  }

  export type FormatSumAggregateInputType = {
    id?: true
  }

  export type FormatMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type FormatMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type FormatCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type FormatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Format to aggregate.
     */
    where?: FormatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Formats to fetch.
     */
    orderBy?: FormatOrderByWithRelationInput | FormatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FormatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Formats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Formats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Formats
    **/
    _count?: true | FormatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FormatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FormatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FormatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FormatMaxAggregateInputType
  }

  export type GetFormatAggregateType<T extends FormatAggregateArgs> = {
        [P in keyof T & keyof AggregateFormat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFormat[P]>
      : GetScalarType<T[P], AggregateFormat[P]>
  }




  export type FormatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FormatWhereInput
    orderBy?: FormatOrderByWithAggregationInput | FormatOrderByWithAggregationInput[]
    by: FormatScalarFieldEnum[] | FormatScalarFieldEnum
    having?: FormatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FormatCountAggregateInputType | true
    _avg?: FormatAvgAggregateInputType
    _sum?: FormatSumAggregateInputType
    _min?: FormatMinAggregateInputType
    _max?: FormatMaxAggregateInputType
  }

  export type FormatGroupByOutputType = {
    id: number
    name: string
    _count: FormatCountAggregateOutputType | null
    _avg: FormatAvgAggregateOutputType | null
    _sum: FormatSumAggregateOutputType | null
    _min: FormatMinAggregateOutputType | null
    _max: FormatMaxAggregateOutputType | null
  }

  type GetFormatGroupByPayload<T extends FormatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FormatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FormatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FormatGroupByOutputType[P]>
            : GetScalarType<T[P], FormatGroupByOutputType[P]>
        }
      >
    >


  export type FormatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["format"]>

  export type FormatSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["format"]>

  export type FormatSelectScalar = {
    id?: boolean
    name?: boolean
  }


  export type $FormatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Format"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["format"]>
    composites: {}
  }

  type FormatGetPayload<S extends boolean | null | undefined | FormatDefaultArgs> = $Result.GetResult<Prisma.$FormatPayload, S>

  type FormatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FormatFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FormatCountAggregateInputType | true
    }

  export interface FormatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Format'], meta: { name: 'Format' } }
    /**
     * Find zero or one Format that matches the filter.
     * @param {FormatFindUniqueArgs} args - Arguments to find a Format
     * @example
     * // Get one Format
     * const format = await prisma.format.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FormatFindUniqueArgs>(args: SelectSubset<T, FormatFindUniqueArgs<ExtArgs>>): Prisma__FormatClient<$Result.GetResult<Prisma.$FormatPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Format that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FormatFindUniqueOrThrowArgs} args - Arguments to find a Format
     * @example
     * // Get one Format
     * const format = await prisma.format.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FormatFindUniqueOrThrowArgs>(args: SelectSubset<T, FormatFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FormatClient<$Result.GetResult<Prisma.$FormatPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Format that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormatFindFirstArgs} args - Arguments to find a Format
     * @example
     * // Get one Format
     * const format = await prisma.format.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FormatFindFirstArgs>(args?: SelectSubset<T, FormatFindFirstArgs<ExtArgs>>): Prisma__FormatClient<$Result.GetResult<Prisma.$FormatPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Format that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormatFindFirstOrThrowArgs} args - Arguments to find a Format
     * @example
     * // Get one Format
     * const format = await prisma.format.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FormatFindFirstOrThrowArgs>(args?: SelectSubset<T, FormatFindFirstOrThrowArgs<ExtArgs>>): Prisma__FormatClient<$Result.GetResult<Prisma.$FormatPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Formats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormatFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Formats
     * const formats = await prisma.format.findMany()
     * 
     * // Get first 10 Formats
     * const formats = await prisma.format.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const formatWithIdOnly = await prisma.format.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FormatFindManyArgs>(args?: SelectSubset<T, FormatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormatPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Format.
     * @param {FormatCreateArgs} args - Arguments to create a Format.
     * @example
     * // Create one Format
     * const Format = await prisma.format.create({
     *   data: {
     *     // ... data to create a Format
     *   }
     * })
     * 
     */
    create<T extends FormatCreateArgs>(args: SelectSubset<T, FormatCreateArgs<ExtArgs>>): Prisma__FormatClient<$Result.GetResult<Prisma.$FormatPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Formats.
     * @param {FormatCreateManyArgs} args - Arguments to create many Formats.
     * @example
     * // Create many Formats
     * const format = await prisma.format.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FormatCreateManyArgs>(args?: SelectSubset<T, FormatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Formats and returns the data saved in the database.
     * @param {FormatCreateManyAndReturnArgs} args - Arguments to create many Formats.
     * @example
     * // Create many Formats
     * const format = await prisma.format.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Formats and only return the `id`
     * const formatWithIdOnly = await prisma.format.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FormatCreateManyAndReturnArgs>(args?: SelectSubset<T, FormatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormatPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Format.
     * @param {FormatDeleteArgs} args - Arguments to delete one Format.
     * @example
     * // Delete one Format
     * const Format = await prisma.format.delete({
     *   where: {
     *     // ... filter to delete one Format
     *   }
     * })
     * 
     */
    delete<T extends FormatDeleteArgs>(args: SelectSubset<T, FormatDeleteArgs<ExtArgs>>): Prisma__FormatClient<$Result.GetResult<Prisma.$FormatPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Format.
     * @param {FormatUpdateArgs} args - Arguments to update one Format.
     * @example
     * // Update one Format
     * const format = await prisma.format.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FormatUpdateArgs>(args: SelectSubset<T, FormatUpdateArgs<ExtArgs>>): Prisma__FormatClient<$Result.GetResult<Prisma.$FormatPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Formats.
     * @param {FormatDeleteManyArgs} args - Arguments to filter Formats to delete.
     * @example
     * // Delete a few Formats
     * const { count } = await prisma.format.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FormatDeleteManyArgs>(args?: SelectSubset<T, FormatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Formats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Formats
     * const format = await prisma.format.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FormatUpdateManyArgs>(args: SelectSubset<T, FormatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Format.
     * @param {FormatUpsertArgs} args - Arguments to update or create a Format.
     * @example
     * // Update or create a Format
     * const format = await prisma.format.upsert({
     *   create: {
     *     // ... data to create a Format
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Format we want to update
     *   }
     * })
     */
    upsert<T extends FormatUpsertArgs>(args: SelectSubset<T, FormatUpsertArgs<ExtArgs>>): Prisma__FormatClient<$Result.GetResult<Prisma.$FormatPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Formats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormatCountArgs} args - Arguments to filter Formats to count.
     * @example
     * // Count the number of Formats
     * const count = await prisma.format.count({
     *   where: {
     *     // ... the filter for the Formats we want to count
     *   }
     * })
    **/
    count<T extends FormatCountArgs>(
      args?: Subset<T, FormatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FormatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Format.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FormatAggregateArgs>(args: Subset<T, FormatAggregateArgs>): Prisma.PrismaPromise<GetFormatAggregateType<T>>

    /**
     * Group by Format.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FormatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FormatGroupByArgs['orderBy'] }
        : { orderBy?: FormatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FormatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Format model
   */
  readonly fields: FormatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Format.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FormatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Format model
   */ 
  interface FormatFieldRefs {
    readonly id: FieldRef<"Format", 'Int'>
    readonly name: FieldRef<"Format", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Format findUnique
   */
  export type FormatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Format
     */
    select?: FormatSelect<ExtArgs> | null
    /**
     * Filter, which Format to fetch.
     */
    where: FormatWhereUniqueInput
  }

  /**
   * Format findUniqueOrThrow
   */
  export type FormatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Format
     */
    select?: FormatSelect<ExtArgs> | null
    /**
     * Filter, which Format to fetch.
     */
    where: FormatWhereUniqueInput
  }

  /**
   * Format findFirst
   */
  export type FormatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Format
     */
    select?: FormatSelect<ExtArgs> | null
    /**
     * Filter, which Format to fetch.
     */
    where?: FormatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Formats to fetch.
     */
    orderBy?: FormatOrderByWithRelationInput | FormatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Formats.
     */
    cursor?: FormatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Formats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Formats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Formats.
     */
    distinct?: FormatScalarFieldEnum | FormatScalarFieldEnum[]
  }

  /**
   * Format findFirstOrThrow
   */
  export type FormatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Format
     */
    select?: FormatSelect<ExtArgs> | null
    /**
     * Filter, which Format to fetch.
     */
    where?: FormatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Formats to fetch.
     */
    orderBy?: FormatOrderByWithRelationInput | FormatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Formats.
     */
    cursor?: FormatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Formats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Formats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Formats.
     */
    distinct?: FormatScalarFieldEnum | FormatScalarFieldEnum[]
  }

  /**
   * Format findMany
   */
  export type FormatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Format
     */
    select?: FormatSelect<ExtArgs> | null
    /**
     * Filter, which Formats to fetch.
     */
    where?: FormatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Formats to fetch.
     */
    orderBy?: FormatOrderByWithRelationInput | FormatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Formats.
     */
    cursor?: FormatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Formats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Formats.
     */
    skip?: number
    distinct?: FormatScalarFieldEnum | FormatScalarFieldEnum[]
  }

  /**
   * Format create
   */
  export type FormatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Format
     */
    select?: FormatSelect<ExtArgs> | null
    /**
     * The data needed to create a Format.
     */
    data: XOR<FormatCreateInput, FormatUncheckedCreateInput>
  }

  /**
   * Format createMany
   */
  export type FormatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Formats.
     */
    data: FormatCreateManyInput | FormatCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Format createManyAndReturn
   */
  export type FormatCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Format
     */
    select?: FormatSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Formats.
     */
    data: FormatCreateManyInput | FormatCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Format update
   */
  export type FormatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Format
     */
    select?: FormatSelect<ExtArgs> | null
    /**
     * The data needed to update a Format.
     */
    data: XOR<FormatUpdateInput, FormatUncheckedUpdateInput>
    /**
     * Choose, which Format to update.
     */
    where: FormatWhereUniqueInput
  }

  /**
   * Format updateMany
   */
  export type FormatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Formats.
     */
    data: XOR<FormatUpdateManyMutationInput, FormatUncheckedUpdateManyInput>
    /**
     * Filter which Formats to update
     */
    where?: FormatWhereInput
  }

  /**
   * Format upsert
   */
  export type FormatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Format
     */
    select?: FormatSelect<ExtArgs> | null
    /**
     * The filter to search for the Format to update in case it exists.
     */
    where: FormatWhereUniqueInput
    /**
     * In case the Format found by the `where` argument doesn't exist, create a new Format with this data.
     */
    create: XOR<FormatCreateInput, FormatUncheckedCreateInput>
    /**
     * In case the Format was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FormatUpdateInput, FormatUncheckedUpdateInput>
  }

  /**
   * Format delete
   */
  export type FormatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Format
     */
    select?: FormatSelect<ExtArgs> | null
    /**
     * Filter which Format to delete.
     */
    where: FormatWhereUniqueInput
  }

  /**
   * Format deleteMany
   */
  export type FormatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Formats to delete
     */
    where?: FormatWhereInput
  }

  /**
   * Format without action
   */
  export type FormatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Format
     */
    select?: FormatSelect<ExtArgs> | null
  }


  /**
   * Model Pattern
   */

  export type AggregatePattern = {
    _count: PatternCountAggregateOutputType | null
    _avg: PatternAvgAggregateOutputType | null
    _sum: PatternSumAggregateOutputType | null
    _min: PatternMinAggregateOutputType | null
    _max: PatternMaxAggregateOutputType | null
  }

  export type PatternAvgAggregateOutputType = {
    id: number | null
    designer_id: number | null
  }

  export type PatternSumAggregateOutputType = {
    id: number | null
    designer_id: number | null
  }

  export type PatternMinAggregateOutputType = {
    id: number | null
    name: string | null
    designer_id: number | null
    url: string | null
    thumbnail_url: string | null
    yardage: string | null
    sizes: string | null
    language: string | null
  }

  export type PatternMaxAggregateOutputType = {
    id: number | null
    name: string | null
    designer_id: number | null
    url: string | null
    thumbnail_url: string | null
    yardage: string | null
    sizes: string | null
    language: string | null
  }

  export type PatternCountAggregateOutputType = {
    id: number
    name: number
    designer_id: number
    url: number
    thumbnail_url: number
    yardage: number
    sizes: number
    language: number
    _all: number
  }


  export type PatternAvgAggregateInputType = {
    id?: true
    designer_id?: true
  }

  export type PatternSumAggregateInputType = {
    id?: true
    designer_id?: true
  }

  export type PatternMinAggregateInputType = {
    id?: true
    name?: true
    designer_id?: true
    url?: true
    thumbnail_url?: true
    yardage?: true
    sizes?: true
    language?: true
  }

  export type PatternMaxAggregateInputType = {
    id?: true
    name?: true
    designer_id?: true
    url?: true
    thumbnail_url?: true
    yardage?: true
    sizes?: true
    language?: true
  }

  export type PatternCountAggregateInputType = {
    id?: true
    name?: true
    designer_id?: true
    url?: true
    thumbnail_url?: true
    yardage?: true
    sizes?: true
    language?: true
    _all?: true
  }

  export type PatternAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pattern to aggregate.
     */
    where?: PatternWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patterns to fetch.
     */
    orderBy?: PatternOrderByWithRelationInput | PatternOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatternWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patterns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patterns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patterns
    **/
    _count?: true | PatternCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatternAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatternSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatternMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatternMaxAggregateInputType
  }

  export type GetPatternAggregateType<T extends PatternAggregateArgs> = {
        [P in keyof T & keyof AggregatePattern]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePattern[P]>
      : GetScalarType<T[P], AggregatePattern[P]>
  }




  export type PatternGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatternWhereInput
    orderBy?: PatternOrderByWithAggregationInput | PatternOrderByWithAggregationInput[]
    by: PatternScalarFieldEnum[] | PatternScalarFieldEnum
    having?: PatternScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatternCountAggregateInputType | true
    _avg?: PatternAvgAggregateInputType
    _sum?: PatternSumAggregateInputType
    _min?: PatternMinAggregateInputType
    _max?: PatternMaxAggregateInputType
  }

  export type PatternGroupByOutputType = {
    id: number
    name: string
    designer_id: number
    url: string
    thumbnail_url: string | null
    yardage: string | null
    sizes: string | null
    language: string | null
    _count: PatternCountAggregateOutputType | null
    _avg: PatternAvgAggregateOutputType | null
    _sum: PatternSumAggregateOutputType | null
    _min: PatternMinAggregateOutputType | null
    _max: PatternMaxAggregateOutputType | null
  }

  type GetPatternGroupByPayload<T extends PatternGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatternGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatternGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatternGroupByOutputType[P]>
            : GetScalarType<T[P], PatternGroupByOutputType[P]>
        }
      >
    >


  export type PatternSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    designer_id?: boolean
    url?: boolean
    thumbnail_url?: boolean
    yardage?: boolean
    sizes?: boolean
    language?: boolean
    designer?: boolean | DesignerDefaultArgs<ExtArgs>
    PatternAttribute?: boolean | Pattern$PatternAttributeArgs<ExtArgs>
    PatternAudience?: boolean | Pattern$PatternAudienceArgs<ExtArgs>
    PatternCategory?: boolean | Pattern$PatternCategoryArgs<ExtArgs>
    PatternFabricType?: boolean | Pattern$PatternFabricTypeArgs<ExtArgs>
    PatternSuggestedFabric?: boolean | Pattern$PatternSuggestedFabricArgs<ExtArgs>
    _count?: boolean | PatternCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pattern"]>

  export type PatternSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    designer_id?: boolean
    url?: boolean
    thumbnail_url?: boolean
    yardage?: boolean
    sizes?: boolean
    language?: boolean
    designer?: boolean | DesignerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pattern"]>

  export type PatternSelectScalar = {
    id?: boolean
    name?: boolean
    designer_id?: boolean
    url?: boolean
    thumbnail_url?: boolean
    yardage?: boolean
    sizes?: boolean
    language?: boolean
  }

  export type PatternInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    designer?: boolean | DesignerDefaultArgs<ExtArgs>
    PatternAttribute?: boolean | Pattern$PatternAttributeArgs<ExtArgs>
    PatternAudience?: boolean | Pattern$PatternAudienceArgs<ExtArgs>
    PatternCategory?: boolean | Pattern$PatternCategoryArgs<ExtArgs>
    PatternFabricType?: boolean | Pattern$PatternFabricTypeArgs<ExtArgs>
    PatternSuggestedFabric?: boolean | Pattern$PatternSuggestedFabricArgs<ExtArgs>
    _count?: boolean | PatternCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PatternIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    designer?: boolean | DesignerDefaultArgs<ExtArgs>
  }

  export type $PatternPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pattern"
    objects: {
      designer: Prisma.$DesignerPayload<ExtArgs>
      PatternAttribute: Prisma.$PatternAttributePayload<ExtArgs>[]
      PatternAudience: Prisma.$PatternAudiencePayload<ExtArgs>[]
      PatternCategory: Prisma.$PatternCategoryPayload<ExtArgs>[]
      PatternFabricType: Prisma.$PatternFabricTypePayload<ExtArgs>[]
      PatternSuggestedFabric: Prisma.$PatternSuggestedFabricPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      designer_id: number
      url: string
      thumbnail_url: string | null
      yardage: string | null
      sizes: string | null
      language: string | null
    }, ExtArgs["result"]["pattern"]>
    composites: {}
  }

  type PatternGetPayload<S extends boolean | null | undefined | PatternDefaultArgs> = $Result.GetResult<Prisma.$PatternPayload, S>

  type PatternCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PatternFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatternCountAggregateInputType | true
    }

  export interface PatternDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pattern'], meta: { name: 'Pattern' } }
    /**
     * Find zero or one Pattern that matches the filter.
     * @param {PatternFindUniqueArgs} args - Arguments to find a Pattern
     * @example
     * // Get one Pattern
     * const pattern = await prisma.pattern.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatternFindUniqueArgs>(args: SelectSubset<T, PatternFindUniqueArgs<ExtArgs>>): Prisma__PatternClient<$Result.GetResult<Prisma.$PatternPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Pattern that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PatternFindUniqueOrThrowArgs} args - Arguments to find a Pattern
     * @example
     * // Get one Pattern
     * const pattern = await prisma.pattern.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatternFindUniqueOrThrowArgs>(args: SelectSubset<T, PatternFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatternClient<$Result.GetResult<Prisma.$PatternPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Pattern that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternFindFirstArgs} args - Arguments to find a Pattern
     * @example
     * // Get one Pattern
     * const pattern = await prisma.pattern.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatternFindFirstArgs>(args?: SelectSubset<T, PatternFindFirstArgs<ExtArgs>>): Prisma__PatternClient<$Result.GetResult<Prisma.$PatternPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Pattern that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternFindFirstOrThrowArgs} args - Arguments to find a Pattern
     * @example
     * // Get one Pattern
     * const pattern = await prisma.pattern.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatternFindFirstOrThrowArgs>(args?: SelectSubset<T, PatternFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatternClient<$Result.GetResult<Prisma.$PatternPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Patterns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patterns
     * const patterns = await prisma.pattern.findMany()
     * 
     * // Get first 10 Patterns
     * const patterns = await prisma.pattern.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patternWithIdOnly = await prisma.pattern.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatternFindManyArgs>(args?: SelectSubset<T, PatternFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Pattern.
     * @param {PatternCreateArgs} args - Arguments to create a Pattern.
     * @example
     * // Create one Pattern
     * const Pattern = await prisma.pattern.create({
     *   data: {
     *     // ... data to create a Pattern
     *   }
     * })
     * 
     */
    create<T extends PatternCreateArgs>(args: SelectSubset<T, PatternCreateArgs<ExtArgs>>): Prisma__PatternClient<$Result.GetResult<Prisma.$PatternPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Patterns.
     * @param {PatternCreateManyArgs} args - Arguments to create many Patterns.
     * @example
     * // Create many Patterns
     * const pattern = await prisma.pattern.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatternCreateManyArgs>(args?: SelectSubset<T, PatternCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Patterns and returns the data saved in the database.
     * @param {PatternCreateManyAndReturnArgs} args - Arguments to create many Patterns.
     * @example
     * // Create many Patterns
     * const pattern = await prisma.pattern.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Patterns and only return the `id`
     * const patternWithIdOnly = await prisma.pattern.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatternCreateManyAndReturnArgs>(args?: SelectSubset<T, PatternCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Pattern.
     * @param {PatternDeleteArgs} args - Arguments to delete one Pattern.
     * @example
     * // Delete one Pattern
     * const Pattern = await prisma.pattern.delete({
     *   where: {
     *     // ... filter to delete one Pattern
     *   }
     * })
     * 
     */
    delete<T extends PatternDeleteArgs>(args: SelectSubset<T, PatternDeleteArgs<ExtArgs>>): Prisma__PatternClient<$Result.GetResult<Prisma.$PatternPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Pattern.
     * @param {PatternUpdateArgs} args - Arguments to update one Pattern.
     * @example
     * // Update one Pattern
     * const pattern = await prisma.pattern.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatternUpdateArgs>(args: SelectSubset<T, PatternUpdateArgs<ExtArgs>>): Prisma__PatternClient<$Result.GetResult<Prisma.$PatternPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Patterns.
     * @param {PatternDeleteManyArgs} args - Arguments to filter Patterns to delete.
     * @example
     * // Delete a few Patterns
     * const { count } = await prisma.pattern.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatternDeleteManyArgs>(args?: SelectSubset<T, PatternDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patterns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patterns
     * const pattern = await prisma.pattern.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatternUpdateManyArgs>(args: SelectSubset<T, PatternUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pattern.
     * @param {PatternUpsertArgs} args - Arguments to update or create a Pattern.
     * @example
     * // Update or create a Pattern
     * const pattern = await prisma.pattern.upsert({
     *   create: {
     *     // ... data to create a Pattern
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pattern we want to update
     *   }
     * })
     */
    upsert<T extends PatternUpsertArgs>(args: SelectSubset<T, PatternUpsertArgs<ExtArgs>>): Prisma__PatternClient<$Result.GetResult<Prisma.$PatternPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Patterns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternCountArgs} args - Arguments to filter Patterns to count.
     * @example
     * // Count the number of Patterns
     * const count = await prisma.pattern.count({
     *   where: {
     *     // ... the filter for the Patterns we want to count
     *   }
     * })
    **/
    count<T extends PatternCountArgs>(
      args?: Subset<T, PatternCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatternCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pattern.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatternAggregateArgs>(args: Subset<T, PatternAggregateArgs>): Prisma.PrismaPromise<GetPatternAggregateType<T>>

    /**
     * Group by Pattern.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatternGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatternGroupByArgs['orderBy'] }
        : { orderBy?: PatternGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatternGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatternGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pattern model
   */
  readonly fields: PatternFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pattern.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatternClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    designer<T extends DesignerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DesignerDefaultArgs<ExtArgs>>): Prisma__DesignerClient<$Result.GetResult<Prisma.$DesignerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    PatternAttribute<T extends Pattern$PatternAttributeArgs<ExtArgs> = {}>(args?: Subset<T, Pattern$PatternAttributeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternAttributePayload<ExtArgs>, T, "findMany"> | Null>
    PatternAudience<T extends Pattern$PatternAudienceArgs<ExtArgs> = {}>(args?: Subset<T, Pattern$PatternAudienceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternAudiencePayload<ExtArgs>, T, "findMany"> | Null>
    PatternCategory<T extends Pattern$PatternCategoryArgs<ExtArgs> = {}>(args?: Subset<T, Pattern$PatternCategoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternCategoryPayload<ExtArgs>, T, "findMany"> | Null>
    PatternFabricType<T extends Pattern$PatternFabricTypeArgs<ExtArgs> = {}>(args?: Subset<T, Pattern$PatternFabricTypeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternFabricTypePayload<ExtArgs>, T, "findMany"> | Null>
    PatternSuggestedFabric<T extends Pattern$PatternSuggestedFabricArgs<ExtArgs> = {}>(args?: Subset<T, Pattern$PatternSuggestedFabricArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternSuggestedFabricPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Pattern model
   */ 
  interface PatternFieldRefs {
    readonly id: FieldRef<"Pattern", 'Int'>
    readonly name: FieldRef<"Pattern", 'String'>
    readonly designer_id: FieldRef<"Pattern", 'Int'>
    readonly url: FieldRef<"Pattern", 'String'>
    readonly thumbnail_url: FieldRef<"Pattern", 'String'>
    readonly yardage: FieldRef<"Pattern", 'String'>
    readonly sizes: FieldRef<"Pattern", 'String'>
    readonly language: FieldRef<"Pattern", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Pattern findUnique
   */
  export type PatternFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pattern
     */
    select?: PatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternInclude<ExtArgs> | null
    /**
     * Filter, which Pattern to fetch.
     */
    where: PatternWhereUniqueInput
  }

  /**
   * Pattern findUniqueOrThrow
   */
  export type PatternFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pattern
     */
    select?: PatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternInclude<ExtArgs> | null
    /**
     * Filter, which Pattern to fetch.
     */
    where: PatternWhereUniqueInput
  }

  /**
   * Pattern findFirst
   */
  export type PatternFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pattern
     */
    select?: PatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternInclude<ExtArgs> | null
    /**
     * Filter, which Pattern to fetch.
     */
    where?: PatternWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patterns to fetch.
     */
    orderBy?: PatternOrderByWithRelationInput | PatternOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patterns.
     */
    cursor?: PatternWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patterns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patterns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patterns.
     */
    distinct?: PatternScalarFieldEnum | PatternScalarFieldEnum[]
  }

  /**
   * Pattern findFirstOrThrow
   */
  export type PatternFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pattern
     */
    select?: PatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternInclude<ExtArgs> | null
    /**
     * Filter, which Pattern to fetch.
     */
    where?: PatternWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patterns to fetch.
     */
    orderBy?: PatternOrderByWithRelationInput | PatternOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patterns.
     */
    cursor?: PatternWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patterns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patterns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patterns.
     */
    distinct?: PatternScalarFieldEnum | PatternScalarFieldEnum[]
  }

  /**
   * Pattern findMany
   */
  export type PatternFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pattern
     */
    select?: PatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternInclude<ExtArgs> | null
    /**
     * Filter, which Patterns to fetch.
     */
    where?: PatternWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patterns to fetch.
     */
    orderBy?: PatternOrderByWithRelationInput | PatternOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patterns.
     */
    cursor?: PatternWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patterns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patterns.
     */
    skip?: number
    distinct?: PatternScalarFieldEnum | PatternScalarFieldEnum[]
  }

  /**
   * Pattern create
   */
  export type PatternCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pattern
     */
    select?: PatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternInclude<ExtArgs> | null
    /**
     * The data needed to create a Pattern.
     */
    data: XOR<PatternCreateInput, PatternUncheckedCreateInput>
  }

  /**
   * Pattern createMany
   */
  export type PatternCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Patterns.
     */
    data: PatternCreateManyInput | PatternCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pattern createManyAndReturn
   */
  export type PatternCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pattern
     */
    select?: PatternSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Patterns.
     */
    data: PatternCreateManyInput | PatternCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Pattern update
   */
  export type PatternUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pattern
     */
    select?: PatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternInclude<ExtArgs> | null
    /**
     * The data needed to update a Pattern.
     */
    data: XOR<PatternUpdateInput, PatternUncheckedUpdateInput>
    /**
     * Choose, which Pattern to update.
     */
    where: PatternWhereUniqueInput
  }

  /**
   * Pattern updateMany
   */
  export type PatternUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Patterns.
     */
    data: XOR<PatternUpdateManyMutationInput, PatternUncheckedUpdateManyInput>
    /**
     * Filter which Patterns to update
     */
    where?: PatternWhereInput
  }

  /**
   * Pattern upsert
   */
  export type PatternUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pattern
     */
    select?: PatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternInclude<ExtArgs> | null
    /**
     * The filter to search for the Pattern to update in case it exists.
     */
    where: PatternWhereUniqueInput
    /**
     * In case the Pattern found by the `where` argument doesn't exist, create a new Pattern with this data.
     */
    create: XOR<PatternCreateInput, PatternUncheckedCreateInput>
    /**
     * In case the Pattern was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatternUpdateInput, PatternUncheckedUpdateInput>
  }

  /**
   * Pattern delete
   */
  export type PatternDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pattern
     */
    select?: PatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternInclude<ExtArgs> | null
    /**
     * Filter which Pattern to delete.
     */
    where: PatternWhereUniqueInput
  }

  /**
   * Pattern deleteMany
   */
  export type PatternDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patterns to delete
     */
    where?: PatternWhereInput
  }

  /**
   * Pattern.PatternAttribute
   */
  export type Pattern$PatternAttributeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAttribute
     */
    select?: PatternAttributeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAttributeInclude<ExtArgs> | null
    where?: PatternAttributeWhereInput
    orderBy?: PatternAttributeOrderByWithRelationInput | PatternAttributeOrderByWithRelationInput[]
    cursor?: PatternAttributeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatternAttributeScalarFieldEnum | PatternAttributeScalarFieldEnum[]
  }

  /**
   * Pattern.PatternAudience
   */
  export type Pattern$PatternAudienceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAudience
     */
    select?: PatternAudienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAudienceInclude<ExtArgs> | null
    where?: PatternAudienceWhereInput
    orderBy?: PatternAudienceOrderByWithRelationInput | PatternAudienceOrderByWithRelationInput[]
    cursor?: PatternAudienceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatternAudienceScalarFieldEnum | PatternAudienceScalarFieldEnum[]
  }

  /**
   * Pattern.PatternCategory
   */
  export type Pattern$PatternCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternCategory
     */
    select?: PatternCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternCategoryInclude<ExtArgs> | null
    where?: PatternCategoryWhereInput
    orderBy?: PatternCategoryOrderByWithRelationInput | PatternCategoryOrderByWithRelationInput[]
    cursor?: PatternCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatternCategoryScalarFieldEnum | PatternCategoryScalarFieldEnum[]
  }

  /**
   * Pattern.PatternFabricType
   */
  export type Pattern$PatternFabricTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternFabricType
     */
    select?: PatternFabricTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternFabricTypeInclude<ExtArgs> | null
    where?: PatternFabricTypeWhereInput
    orderBy?: PatternFabricTypeOrderByWithRelationInput | PatternFabricTypeOrderByWithRelationInput[]
    cursor?: PatternFabricTypeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatternFabricTypeScalarFieldEnum | PatternFabricTypeScalarFieldEnum[]
  }

  /**
   * Pattern.PatternSuggestedFabric
   */
  export type Pattern$PatternSuggestedFabricArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternSuggestedFabric
     */
    select?: PatternSuggestedFabricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternSuggestedFabricInclude<ExtArgs> | null
    where?: PatternSuggestedFabricWhereInput
    orderBy?: PatternSuggestedFabricOrderByWithRelationInput | PatternSuggestedFabricOrderByWithRelationInput[]
    cursor?: PatternSuggestedFabricWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatternSuggestedFabricScalarFieldEnum | PatternSuggestedFabricScalarFieldEnum[]
  }

  /**
   * Pattern without action
   */
  export type PatternDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pattern
     */
    select?: PatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternInclude<ExtArgs> | null
  }


  /**
   * Model PatternAttribute
   */

  export type AggregatePatternAttribute = {
    _count: PatternAttributeCountAggregateOutputType | null
    _avg: PatternAttributeAvgAggregateOutputType | null
    _sum: PatternAttributeSumAggregateOutputType | null
    _min: PatternAttributeMinAggregateOutputType | null
    _max: PatternAttributeMaxAggregateOutputType | null
  }

  export type PatternAttributeAvgAggregateOutputType = {
    id: number | null
    pattern_id: number | null
    attribute_id: number | null
  }

  export type PatternAttributeSumAggregateOutputType = {
    id: number | null
    pattern_id: number | null
    attribute_id: number | null
  }

  export type PatternAttributeMinAggregateOutputType = {
    id: number | null
    pattern_id: number | null
    attribute_id: number | null
  }

  export type PatternAttributeMaxAggregateOutputType = {
    id: number | null
    pattern_id: number | null
    attribute_id: number | null
  }

  export type PatternAttributeCountAggregateOutputType = {
    id: number
    pattern_id: number
    attribute_id: number
    _all: number
  }


  export type PatternAttributeAvgAggregateInputType = {
    id?: true
    pattern_id?: true
    attribute_id?: true
  }

  export type PatternAttributeSumAggregateInputType = {
    id?: true
    pattern_id?: true
    attribute_id?: true
  }

  export type PatternAttributeMinAggregateInputType = {
    id?: true
    pattern_id?: true
    attribute_id?: true
  }

  export type PatternAttributeMaxAggregateInputType = {
    id?: true
    pattern_id?: true
    attribute_id?: true
  }

  export type PatternAttributeCountAggregateInputType = {
    id?: true
    pattern_id?: true
    attribute_id?: true
    _all?: true
  }

  export type PatternAttributeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatternAttribute to aggregate.
     */
    where?: PatternAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatternAttributes to fetch.
     */
    orderBy?: PatternAttributeOrderByWithRelationInput | PatternAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatternAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatternAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatternAttributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatternAttributes
    **/
    _count?: true | PatternAttributeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatternAttributeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatternAttributeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatternAttributeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatternAttributeMaxAggregateInputType
  }

  export type GetPatternAttributeAggregateType<T extends PatternAttributeAggregateArgs> = {
        [P in keyof T & keyof AggregatePatternAttribute]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatternAttribute[P]>
      : GetScalarType<T[P], AggregatePatternAttribute[P]>
  }




  export type PatternAttributeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatternAttributeWhereInput
    orderBy?: PatternAttributeOrderByWithAggregationInput | PatternAttributeOrderByWithAggregationInput[]
    by: PatternAttributeScalarFieldEnum[] | PatternAttributeScalarFieldEnum
    having?: PatternAttributeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatternAttributeCountAggregateInputType | true
    _avg?: PatternAttributeAvgAggregateInputType
    _sum?: PatternAttributeSumAggregateInputType
    _min?: PatternAttributeMinAggregateInputType
    _max?: PatternAttributeMaxAggregateInputType
  }

  export type PatternAttributeGroupByOutputType = {
    id: number
    pattern_id: number
    attribute_id: number
    _count: PatternAttributeCountAggregateOutputType | null
    _avg: PatternAttributeAvgAggregateOutputType | null
    _sum: PatternAttributeSumAggregateOutputType | null
    _min: PatternAttributeMinAggregateOutputType | null
    _max: PatternAttributeMaxAggregateOutputType | null
  }

  type GetPatternAttributeGroupByPayload<T extends PatternAttributeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatternAttributeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatternAttributeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatternAttributeGroupByOutputType[P]>
            : GetScalarType<T[P], PatternAttributeGroupByOutputType[P]>
        }
      >
    >


  export type PatternAttributeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pattern_id?: boolean
    attribute_id?: boolean
    pattern?: boolean | PatternDefaultArgs<ExtArgs>
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patternAttribute"]>

  export type PatternAttributeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pattern_id?: boolean
    attribute_id?: boolean
    pattern?: boolean | PatternDefaultArgs<ExtArgs>
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patternAttribute"]>

  export type PatternAttributeSelectScalar = {
    id?: boolean
    pattern_id?: boolean
    attribute_id?: boolean
  }

  export type PatternAttributeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pattern?: boolean | PatternDefaultArgs<ExtArgs>
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
  }
  export type PatternAttributeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pattern?: boolean | PatternDefaultArgs<ExtArgs>
    attribute?: boolean | AttributeDefaultArgs<ExtArgs>
  }

  export type $PatternAttributePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatternAttribute"
    objects: {
      pattern: Prisma.$PatternPayload<ExtArgs>
      attribute: Prisma.$AttributePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      pattern_id: number
      attribute_id: number
    }, ExtArgs["result"]["patternAttribute"]>
    composites: {}
  }

  type PatternAttributeGetPayload<S extends boolean | null | undefined | PatternAttributeDefaultArgs> = $Result.GetResult<Prisma.$PatternAttributePayload, S>

  type PatternAttributeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PatternAttributeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatternAttributeCountAggregateInputType | true
    }

  export interface PatternAttributeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatternAttribute'], meta: { name: 'PatternAttribute' } }
    /**
     * Find zero or one PatternAttribute that matches the filter.
     * @param {PatternAttributeFindUniqueArgs} args - Arguments to find a PatternAttribute
     * @example
     * // Get one PatternAttribute
     * const patternAttribute = await prisma.patternAttribute.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatternAttributeFindUniqueArgs>(args: SelectSubset<T, PatternAttributeFindUniqueArgs<ExtArgs>>): Prisma__PatternAttributeClient<$Result.GetResult<Prisma.$PatternAttributePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PatternAttribute that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PatternAttributeFindUniqueOrThrowArgs} args - Arguments to find a PatternAttribute
     * @example
     * // Get one PatternAttribute
     * const patternAttribute = await prisma.patternAttribute.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatternAttributeFindUniqueOrThrowArgs>(args: SelectSubset<T, PatternAttributeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatternAttributeClient<$Result.GetResult<Prisma.$PatternAttributePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PatternAttribute that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternAttributeFindFirstArgs} args - Arguments to find a PatternAttribute
     * @example
     * // Get one PatternAttribute
     * const patternAttribute = await prisma.patternAttribute.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatternAttributeFindFirstArgs>(args?: SelectSubset<T, PatternAttributeFindFirstArgs<ExtArgs>>): Prisma__PatternAttributeClient<$Result.GetResult<Prisma.$PatternAttributePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PatternAttribute that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternAttributeFindFirstOrThrowArgs} args - Arguments to find a PatternAttribute
     * @example
     * // Get one PatternAttribute
     * const patternAttribute = await prisma.patternAttribute.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatternAttributeFindFirstOrThrowArgs>(args?: SelectSubset<T, PatternAttributeFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatternAttributeClient<$Result.GetResult<Prisma.$PatternAttributePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PatternAttributes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternAttributeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatternAttributes
     * const patternAttributes = await prisma.patternAttribute.findMany()
     * 
     * // Get first 10 PatternAttributes
     * const patternAttributes = await prisma.patternAttribute.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patternAttributeWithIdOnly = await prisma.patternAttribute.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatternAttributeFindManyArgs>(args?: SelectSubset<T, PatternAttributeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternAttributePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PatternAttribute.
     * @param {PatternAttributeCreateArgs} args - Arguments to create a PatternAttribute.
     * @example
     * // Create one PatternAttribute
     * const PatternAttribute = await prisma.patternAttribute.create({
     *   data: {
     *     // ... data to create a PatternAttribute
     *   }
     * })
     * 
     */
    create<T extends PatternAttributeCreateArgs>(args: SelectSubset<T, PatternAttributeCreateArgs<ExtArgs>>): Prisma__PatternAttributeClient<$Result.GetResult<Prisma.$PatternAttributePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PatternAttributes.
     * @param {PatternAttributeCreateManyArgs} args - Arguments to create many PatternAttributes.
     * @example
     * // Create many PatternAttributes
     * const patternAttribute = await prisma.patternAttribute.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatternAttributeCreateManyArgs>(args?: SelectSubset<T, PatternAttributeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatternAttributes and returns the data saved in the database.
     * @param {PatternAttributeCreateManyAndReturnArgs} args - Arguments to create many PatternAttributes.
     * @example
     * // Create many PatternAttributes
     * const patternAttribute = await prisma.patternAttribute.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatternAttributes and only return the `id`
     * const patternAttributeWithIdOnly = await prisma.patternAttribute.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatternAttributeCreateManyAndReturnArgs>(args?: SelectSubset<T, PatternAttributeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternAttributePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PatternAttribute.
     * @param {PatternAttributeDeleteArgs} args - Arguments to delete one PatternAttribute.
     * @example
     * // Delete one PatternAttribute
     * const PatternAttribute = await prisma.patternAttribute.delete({
     *   where: {
     *     // ... filter to delete one PatternAttribute
     *   }
     * })
     * 
     */
    delete<T extends PatternAttributeDeleteArgs>(args: SelectSubset<T, PatternAttributeDeleteArgs<ExtArgs>>): Prisma__PatternAttributeClient<$Result.GetResult<Prisma.$PatternAttributePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PatternAttribute.
     * @param {PatternAttributeUpdateArgs} args - Arguments to update one PatternAttribute.
     * @example
     * // Update one PatternAttribute
     * const patternAttribute = await prisma.patternAttribute.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatternAttributeUpdateArgs>(args: SelectSubset<T, PatternAttributeUpdateArgs<ExtArgs>>): Prisma__PatternAttributeClient<$Result.GetResult<Prisma.$PatternAttributePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PatternAttributes.
     * @param {PatternAttributeDeleteManyArgs} args - Arguments to filter PatternAttributes to delete.
     * @example
     * // Delete a few PatternAttributes
     * const { count } = await prisma.patternAttribute.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatternAttributeDeleteManyArgs>(args?: SelectSubset<T, PatternAttributeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatternAttributes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternAttributeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatternAttributes
     * const patternAttribute = await prisma.patternAttribute.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatternAttributeUpdateManyArgs>(args: SelectSubset<T, PatternAttributeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PatternAttribute.
     * @param {PatternAttributeUpsertArgs} args - Arguments to update or create a PatternAttribute.
     * @example
     * // Update or create a PatternAttribute
     * const patternAttribute = await prisma.patternAttribute.upsert({
     *   create: {
     *     // ... data to create a PatternAttribute
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatternAttribute we want to update
     *   }
     * })
     */
    upsert<T extends PatternAttributeUpsertArgs>(args: SelectSubset<T, PatternAttributeUpsertArgs<ExtArgs>>): Prisma__PatternAttributeClient<$Result.GetResult<Prisma.$PatternAttributePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PatternAttributes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternAttributeCountArgs} args - Arguments to filter PatternAttributes to count.
     * @example
     * // Count the number of PatternAttributes
     * const count = await prisma.patternAttribute.count({
     *   where: {
     *     // ... the filter for the PatternAttributes we want to count
     *   }
     * })
    **/
    count<T extends PatternAttributeCountArgs>(
      args?: Subset<T, PatternAttributeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatternAttributeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatternAttribute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternAttributeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatternAttributeAggregateArgs>(args: Subset<T, PatternAttributeAggregateArgs>): Prisma.PrismaPromise<GetPatternAttributeAggregateType<T>>

    /**
     * Group by PatternAttribute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternAttributeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatternAttributeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatternAttributeGroupByArgs['orderBy'] }
        : { orderBy?: PatternAttributeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatternAttributeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatternAttributeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatternAttribute model
   */
  readonly fields: PatternAttributeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatternAttribute.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatternAttributeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pattern<T extends PatternDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatternDefaultArgs<ExtArgs>>): Prisma__PatternClient<$Result.GetResult<Prisma.$PatternPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    attribute<T extends AttributeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AttributeDefaultArgs<ExtArgs>>): Prisma__AttributeClient<$Result.GetResult<Prisma.$AttributePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatternAttribute model
   */ 
  interface PatternAttributeFieldRefs {
    readonly id: FieldRef<"PatternAttribute", 'Int'>
    readonly pattern_id: FieldRef<"PatternAttribute", 'Int'>
    readonly attribute_id: FieldRef<"PatternAttribute", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PatternAttribute findUnique
   */
  export type PatternAttributeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAttribute
     */
    select?: PatternAttributeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAttributeInclude<ExtArgs> | null
    /**
     * Filter, which PatternAttribute to fetch.
     */
    where: PatternAttributeWhereUniqueInput
  }

  /**
   * PatternAttribute findUniqueOrThrow
   */
  export type PatternAttributeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAttribute
     */
    select?: PatternAttributeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAttributeInclude<ExtArgs> | null
    /**
     * Filter, which PatternAttribute to fetch.
     */
    where: PatternAttributeWhereUniqueInput
  }

  /**
   * PatternAttribute findFirst
   */
  export type PatternAttributeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAttribute
     */
    select?: PatternAttributeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAttributeInclude<ExtArgs> | null
    /**
     * Filter, which PatternAttribute to fetch.
     */
    where?: PatternAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatternAttributes to fetch.
     */
    orderBy?: PatternAttributeOrderByWithRelationInput | PatternAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatternAttributes.
     */
    cursor?: PatternAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatternAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatternAttributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatternAttributes.
     */
    distinct?: PatternAttributeScalarFieldEnum | PatternAttributeScalarFieldEnum[]
  }

  /**
   * PatternAttribute findFirstOrThrow
   */
  export type PatternAttributeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAttribute
     */
    select?: PatternAttributeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAttributeInclude<ExtArgs> | null
    /**
     * Filter, which PatternAttribute to fetch.
     */
    where?: PatternAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatternAttributes to fetch.
     */
    orderBy?: PatternAttributeOrderByWithRelationInput | PatternAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatternAttributes.
     */
    cursor?: PatternAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatternAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatternAttributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatternAttributes.
     */
    distinct?: PatternAttributeScalarFieldEnum | PatternAttributeScalarFieldEnum[]
  }

  /**
   * PatternAttribute findMany
   */
  export type PatternAttributeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAttribute
     */
    select?: PatternAttributeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAttributeInclude<ExtArgs> | null
    /**
     * Filter, which PatternAttributes to fetch.
     */
    where?: PatternAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatternAttributes to fetch.
     */
    orderBy?: PatternAttributeOrderByWithRelationInput | PatternAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatternAttributes.
     */
    cursor?: PatternAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatternAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatternAttributes.
     */
    skip?: number
    distinct?: PatternAttributeScalarFieldEnum | PatternAttributeScalarFieldEnum[]
  }

  /**
   * PatternAttribute create
   */
  export type PatternAttributeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAttribute
     */
    select?: PatternAttributeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAttributeInclude<ExtArgs> | null
    /**
     * The data needed to create a PatternAttribute.
     */
    data: XOR<PatternAttributeCreateInput, PatternAttributeUncheckedCreateInput>
  }

  /**
   * PatternAttribute createMany
   */
  export type PatternAttributeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatternAttributes.
     */
    data: PatternAttributeCreateManyInput | PatternAttributeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatternAttribute createManyAndReturn
   */
  export type PatternAttributeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAttribute
     */
    select?: PatternAttributeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PatternAttributes.
     */
    data: PatternAttributeCreateManyInput | PatternAttributeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAttributeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatternAttribute update
   */
  export type PatternAttributeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAttribute
     */
    select?: PatternAttributeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAttributeInclude<ExtArgs> | null
    /**
     * The data needed to update a PatternAttribute.
     */
    data: XOR<PatternAttributeUpdateInput, PatternAttributeUncheckedUpdateInput>
    /**
     * Choose, which PatternAttribute to update.
     */
    where: PatternAttributeWhereUniqueInput
  }

  /**
   * PatternAttribute updateMany
   */
  export type PatternAttributeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatternAttributes.
     */
    data: XOR<PatternAttributeUpdateManyMutationInput, PatternAttributeUncheckedUpdateManyInput>
    /**
     * Filter which PatternAttributes to update
     */
    where?: PatternAttributeWhereInput
  }

  /**
   * PatternAttribute upsert
   */
  export type PatternAttributeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAttribute
     */
    select?: PatternAttributeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAttributeInclude<ExtArgs> | null
    /**
     * The filter to search for the PatternAttribute to update in case it exists.
     */
    where: PatternAttributeWhereUniqueInput
    /**
     * In case the PatternAttribute found by the `where` argument doesn't exist, create a new PatternAttribute with this data.
     */
    create: XOR<PatternAttributeCreateInput, PatternAttributeUncheckedCreateInput>
    /**
     * In case the PatternAttribute was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatternAttributeUpdateInput, PatternAttributeUncheckedUpdateInput>
  }

  /**
   * PatternAttribute delete
   */
  export type PatternAttributeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAttribute
     */
    select?: PatternAttributeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAttributeInclude<ExtArgs> | null
    /**
     * Filter which PatternAttribute to delete.
     */
    where: PatternAttributeWhereUniqueInput
  }

  /**
   * PatternAttribute deleteMany
   */
  export type PatternAttributeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatternAttributes to delete
     */
    where?: PatternAttributeWhereInput
  }

  /**
   * PatternAttribute without action
   */
  export type PatternAttributeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAttribute
     */
    select?: PatternAttributeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAttributeInclude<ExtArgs> | null
  }


  /**
   * Model PatternAudience
   */

  export type AggregatePatternAudience = {
    _count: PatternAudienceCountAggregateOutputType | null
    _avg: PatternAudienceAvgAggregateOutputType | null
    _sum: PatternAudienceSumAggregateOutputType | null
    _min: PatternAudienceMinAggregateOutputType | null
    _max: PatternAudienceMaxAggregateOutputType | null
  }

  export type PatternAudienceAvgAggregateOutputType = {
    id: number | null
    pattern_id: number | null
    audience_id: number | null
  }

  export type PatternAudienceSumAggregateOutputType = {
    id: number | null
    pattern_id: number | null
    audience_id: number | null
  }

  export type PatternAudienceMinAggregateOutputType = {
    id: number | null
    pattern_id: number | null
    audience_id: number | null
  }

  export type PatternAudienceMaxAggregateOutputType = {
    id: number | null
    pattern_id: number | null
    audience_id: number | null
  }

  export type PatternAudienceCountAggregateOutputType = {
    id: number
    pattern_id: number
    audience_id: number
    _all: number
  }


  export type PatternAudienceAvgAggregateInputType = {
    id?: true
    pattern_id?: true
    audience_id?: true
  }

  export type PatternAudienceSumAggregateInputType = {
    id?: true
    pattern_id?: true
    audience_id?: true
  }

  export type PatternAudienceMinAggregateInputType = {
    id?: true
    pattern_id?: true
    audience_id?: true
  }

  export type PatternAudienceMaxAggregateInputType = {
    id?: true
    pattern_id?: true
    audience_id?: true
  }

  export type PatternAudienceCountAggregateInputType = {
    id?: true
    pattern_id?: true
    audience_id?: true
    _all?: true
  }

  export type PatternAudienceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatternAudience to aggregate.
     */
    where?: PatternAudienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatternAudiences to fetch.
     */
    orderBy?: PatternAudienceOrderByWithRelationInput | PatternAudienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatternAudienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatternAudiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatternAudiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatternAudiences
    **/
    _count?: true | PatternAudienceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatternAudienceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatternAudienceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatternAudienceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatternAudienceMaxAggregateInputType
  }

  export type GetPatternAudienceAggregateType<T extends PatternAudienceAggregateArgs> = {
        [P in keyof T & keyof AggregatePatternAudience]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatternAudience[P]>
      : GetScalarType<T[P], AggregatePatternAudience[P]>
  }




  export type PatternAudienceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatternAudienceWhereInput
    orderBy?: PatternAudienceOrderByWithAggregationInput | PatternAudienceOrderByWithAggregationInput[]
    by: PatternAudienceScalarFieldEnum[] | PatternAudienceScalarFieldEnum
    having?: PatternAudienceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatternAudienceCountAggregateInputType | true
    _avg?: PatternAudienceAvgAggregateInputType
    _sum?: PatternAudienceSumAggregateInputType
    _min?: PatternAudienceMinAggregateInputType
    _max?: PatternAudienceMaxAggregateInputType
  }

  export type PatternAudienceGroupByOutputType = {
    id: number
    pattern_id: number
    audience_id: number
    _count: PatternAudienceCountAggregateOutputType | null
    _avg: PatternAudienceAvgAggregateOutputType | null
    _sum: PatternAudienceSumAggregateOutputType | null
    _min: PatternAudienceMinAggregateOutputType | null
    _max: PatternAudienceMaxAggregateOutputType | null
  }

  type GetPatternAudienceGroupByPayload<T extends PatternAudienceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatternAudienceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatternAudienceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatternAudienceGroupByOutputType[P]>
            : GetScalarType<T[P], PatternAudienceGroupByOutputType[P]>
        }
      >
    >


  export type PatternAudienceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pattern_id?: boolean
    audience_id?: boolean
    pattern?: boolean | PatternDefaultArgs<ExtArgs>
    audience?: boolean | AudienceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patternAudience"]>

  export type PatternAudienceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pattern_id?: boolean
    audience_id?: boolean
    pattern?: boolean | PatternDefaultArgs<ExtArgs>
    audience?: boolean | AudienceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patternAudience"]>

  export type PatternAudienceSelectScalar = {
    id?: boolean
    pattern_id?: boolean
    audience_id?: boolean
  }

  export type PatternAudienceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pattern?: boolean | PatternDefaultArgs<ExtArgs>
    audience?: boolean | AudienceDefaultArgs<ExtArgs>
  }
  export type PatternAudienceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pattern?: boolean | PatternDefaultArgs<ExtArgs>
    audience?: boolean | AudienceDefaultArgs<ExtArgs>
  }

  export type $PatternAudiencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatternAudience"
    objects: {
      pattern: Prisma.$PatternPayload<ExtArgs>
      audience: Prisma.$AudiencePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      pattern_id: number
      audience_id: number
    }, ExtArgs["result"]["patternAudience"]>
    composites: {}
  }

  type PatternAudienceGetPayload<S extends boolean | null | undefined | PatternAudienceDefaultArgs> = $Result.GetResult<Prisma.$PatternAudiencePayload, S>

  type PatternAudienceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PatternAudienceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatternAudienceCountAggregateInputType | true
    }

  export interface PatternAudienceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatternAudience'], meta: { name: 'PatternAudience' } }
    /**
     * Find zero or one PatternAudience that matches the filter.
     * @param {PatternAudienceFindUniqueArgs} args - Arguments to find a PatternAudience
     * @example
     * // Get one PatternAudience
     * const patternAudience = await prisma.patternAudience.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatternAudienceFindUniqueArgs>(args: SelectSubset<T, PatternAudienceFindUniqueArgs<ExtArgs>>): Prisma__PatternAudienceClient<$Result.GetResult<Prisma.$PatternAudiencePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PatternAudience that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PatternAudienceFindUniqueOrThrowArgs} args - Arguments to find a PatternAudience
     * @example
     * // Get one PatternAudience
     * const patternAudience = await prisma.patternAudience.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatternAudienceFindUniqueOrThrowArgs>(args: SelectSubset<T, PatternAudienceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatternAudienceClient<$Result.GetResult<Prisma.$PatternAudiencePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PatternAudience that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternAudienceFindFirstArgs} args - Arguments to find a PatternAudience
     * @example
     * // Get one PatternAudience
     * const patternAudience = await prisma.patternAudience.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatternAudienceFindFirstArgs>(args?: SelectSubset<T, PatternAudienceFindFirstArgs<ExtArgs>>): Prisma__PatternAudienceClient<$Result.GetResult<Prisma.$PatternAudiencePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PatternAudience that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternAudienceFindFirstOrThrowArgs} args - Arguments to find a PatternAudience
     * @example
     * // Get one PatternAudience
     * const patternAudience = await prisma.patternAudience.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatternAudienceFindFirstOrThrowArgs>(args?: SelectSubset<T, PatternAudienceFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatternAudienceClient<$Result.GetResult<Prisma.$PatternAudiencePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PatternAudiences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternAudienceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatternAudiences
     * const patternAudiences = await prisma.patternAudience.findMany()
     * 
     * // Get first 10 PatternAudiences
     * const patternAudiences = await prisma.patternAudience.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patternAudienceWithIdOnly = await prisma.patternAudience.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatternAudienceFindManyArgs>(args?: SelectSubset<T, PatternAudienceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternAudiencePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PatternAudience.
     * @param {PatternAudienceCreateArgs} args - Arguments to create a PatternAudience.
     * @example
     * // Create one PatternAudience
     * const PatternAudience = await prisma.patternAudience.create({
     *   data: {
     *     // ... data to create a PatternAudience
     *   }
     * })
     * 
     */
    create<T extends PatternAudienceCreateArgs>(args: SelectSubset<T, PatternAudienceCreateArgs<ExtArgs>>): Prisma__PatternAudienceClient<$Result.GetResult<Prisma.$PatternAudiencePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PatternAudiences.
     * @param {PatternAudienceCreateManyArgs} args - Arguments to create many PatternAudiences.
     * @example
     * // Create many PatternAudiences
     * const patternAudience = await prisma.patternAudience.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatternAudienceCreateManyArgs>(args?: SelectSubset<T, PatternAudienceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatternAudiences and returns the data saved in the database.
     * @param {PatternAudienceCreateManyAndReturnArgs} args - Arguments to create many PatternAudiences.
     * @example
     * // Create many PatternAudiences
     * const patternAudience = await prisma.patternAudience.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatternAudiences and only return the `id`
     * const patternAudienceWithIdOnly = await prisma.patternAudience.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatternAudienceCreateManyAndReturnArgs>(args?: SelectSubset<T, PatternAudienceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternAudiencePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PatternAudience.
     * @param {PatternAudienceDeleteArgs} args - Arguments to delete one PatternAudience.
     * @example
     * // Delete one PatternAudience
     * const PatternAudience = await prisma.patternAudience.delete({
     *   where: {
     *     // ... filter to delete one PatternAudience
     *   }
     * })
     * 
     */
    delete<T extends PatternAudienceDeleteArgs>(args: SelectSubset<T, PatternAudienceDeleteArgs<ExtArgs>>): Prisma__PatternAudienceClient<$Result.GetResult<Prisma.$PatternAudiencePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PatternAudience.
     * @param {PatternAudienceUpdateArgs} args - Arguments to update one PatternAudience.
     * @example
     * // Update one PatternAudience
     * const patternAudience = await prisma.patternAudience.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatternAudienceUpdateArgs>(args: SelectSubset<T, PatternAudienceUpdateArgs<ExtArgs>>): Prisma__PatternAudienceClient<$Result.GetResult<Prisma.$PatternAudiencePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PatternAudiences.
     * @param {PatternAudienceDeleteManyArgs} args - Arguments to filter PatternAudiences to delete.
     * @example
     * // Delete a few PatternAudiences
     * const { count } = await prisma.patternAudience.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatternAudienceDeleteManyArgs>(args?: SelectSubset<T, PatternAudienceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatternAudiences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternAudienceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatternAudiences
     * const patternAudience = await prisma.patternAudience.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatternAudienceUpdateManyArgs>(args: SelectSubset<T, PatternAudienceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PatternAudience.
     * @param {PatternAudienceUpsertArgs} args - Arguments to update or create a PatternAudience.
     * @example
     * // Update or create a PatternAudience
     * const patternAudience = await prisma.patternAudience.upsert({
     *   create: {
     *     // ... data to create a PatternAudience
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatternAudience we want to update
     *   }
     * })
     */
    upsert<T extends PatternAudienceUpsertArgs>(args: SelectSubset<T, PatternAudienceUpsertArgs<ExtArgs>>): Prisma__PatternAudienceClient<$Result.GetResult<Prisma.$PatternAudiencePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PatternAudiences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternAudienceCountArgs} args - Arguments to filter PatternAudiences to count.
     * @example
     * // Count the number of PatternAudiences
     * const count = await prisma.patternAudience.count({
     *   where: {
     *     // ... the filter for the PatternAudiences we want to count
     *   }
     * })
    **/
    count<T extends PatternAudienceCountArgs>(
      args?: Subset<T, PatternAudienceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatternAudienceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatternAudience.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternAudienceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatternAudienceAggregateArgs>(args: Subset<T, PatternAudienceAggregateArgs>): Prisma.PrismaPromise<GetPatternAudienceAggregateType<T>>

    /**
     * Group by PatternAudience.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternAudienceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatternAudienceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatternAudienceGroupByArgs['orderBy'] }
        : { orderBy?: PatternAudienceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatternAudienceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatternAudienceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatternAudience model
   */
  readonly fields: PatternAudienceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatternAudience.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatternAudienceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pattern<T extends PatternDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatternDefaultArgs<ExtArgs>>): Prisma__PatternClient<$Result.GetResult<Prisma.$PatternPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    audience<T extends AudienceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AudienceDefaultArgs<ExtArgs>>): Prisma__AudienceClient<$Result.GetResult<Prisma.$AudiencePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatternAudience model
   */ 
  interface PatternAudienceFieldRefs {
    readonly id: FieldRef<"PatternAudience", 'Int'>
    readonly pattern_id: FieldRef<"PatternAudience", 'Int'>
    readonly audience_id: FieldRef<"PatternAudience", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PatternAudience findUnique
   */
  export type PatternAudienceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAudience
     */
    select?: PatternAudienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAudienceInclude<ExtArgs> | null
    /**
     * Filter, which PatternAudience to fetch.
     */
    where: PatternAudienceWhereUniqueInput
  }

  /**
   * PatternAudience findUniqueOrThrow
   */
  export type PatternAudienceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAudience
     */
    select?: PatternAudienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAudienceInclude<ExtArgs> | null
    /**
     * Filter, which PatternAudience to fetch.
     */
    where: PatternAudienceWhereUniqueInput
  }

  /**
   * PatternAudience findFirst
   */
  export type PatternAudienceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAudience
     */
    select?: PatternAudienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAudienceInclude<ExtArgs> | null
    /**
     * Filter, which PatternAudience to fetch.
     */
    where?: PatternAudienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatternAudiences to fetch.
     */
    orderBy?: PatternAudienceOrderByWithRelationInput | PatternAudienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatternAudiences.
     */
    cursor?: PatternAudienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatternAudiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatternAudiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatternAudiences.
     */
    distinct?: PatternAudienceScalarFieldEnum | PatternAudienceScalarFieldEnum[]
  }

  /**
   * PatternAudience findFirstOrThrow
   */
  export type PatternAudienceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAudience
     */
    select?: PatternAudienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAudienceInclude<ExtArgs> | null
    /**
     * Filter, which PatternAudience to fetch.
     */
    where?: PatternAudienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatternAudiences to fetch.
     */
    orderBy?: PatternAudienceOrderByWithRelationInput | PatternAudienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatternAudiences.
     */
    cursor?: PatternAudienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatternAudiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatternAudiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatternAudiences.
     */
    distinct?: PatternAudienceScalarFieldEnum | PatternAudienceScalarFieldEnum[]
  }

  /**
   * PatternAudience findMany
   */
  export type PatternAudienceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAudience
     */
    select?: PatternAudienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAudienceInclude<ExtArgs> | null
    /**
     * Filter, which PatternAudiences to fetch.
     */
    where?: PatternAudienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatternAudiences to fetch.
     */
    orderBy?: PatternAudienceOrderByWithRelationInput | PatternAudienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatternAudiences.
     */
    cursor?: PatternAudienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatternAudiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatternAudiences.
     */
    skip?: number
    distinct?: PatternAudienceScalarFieldEnum | PatternAudienceScalarFieldEnum[]
  }

  /**
   * PatternAudience create
   */
  export type PatternAudienceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAudience
     */
    select?: PatternAudienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAudienceInclude<ExtArgs> | null
    /**
     * The data needed to create a PatternAudience.
     */
    data: XOR<PatternAudienceCreateInput, PatternAudienceUncheckedCreateInput>
  }

  /**
   * PatternAudience createMany
   */
  export type PatternAudienceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatternAudiences.
     */
    data: PatternAudienceCreateManyInput | PatternAudienceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatternAudience createManyAndReturn
   */
  export type PatternAudienceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAudience
     */
    select?: PatternAudienceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PatternAudiences.
     */
    data: PatternAudienceCreateManyInput | PatternAudienceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAudienceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatternAudience update
   */
  export type PatternAudienceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAudience
     */
    select?: PatternAudienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAudienceInclude<ExtArgs> | null
    /**
     * The data needed to update a PatternAudience.
     */
    data: XOR<PatternAudienceUpdateInput, PatternAudienceUncheckedUpdateInput>
    /**
     * Choose, which PatternAudience to update.
     */
    where: PatternAudienceWhereUniqueInput
  }

  /**
   * PatternAudience updateMany
   */
  export type PatternAudienceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatternAudiences.
     */
    data: XOR<PatternAudienceUpdateManyMutationInput, PatternAudienceUncheckedUpdateManyInput>
    /**
     * Filter which PatternAudiences to update
     */
    where?: PatternAudienceWhereInput
  }

  /**
   * PatternAudience upsert
   */
  export type PatternAudienceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAudience
     */
    select?: PatternAudienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAudienceInclude<ExtArgs> | null
    /**
     * The filter to search for the PatternAudience to update in case it exists.
     */
    where: PatternAudienceWhereUniqueInput
    /**
     * In case the PatternAudience found by the `where` argument doesn't exist, create a new PatternAudience with this data.
     */
    create: XOR<PatternAudienceCreateInput, PatternAudienceUncheckedCreateInput>
    /**
     * In case the PatternAudience was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatternAudienceUpdateInput, PatternAudienceUncheckedUpdateInput>
  }

  /**
   * PatternAudience delete
   */
  export type PatternAudienceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAudience
     */
    select?: PatternAudienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAudienceInclude<ExtArgs> | null
    /**
     * Filter which PatternAudience to delete.
     */
    where: PatternAudienceWhereUniqueInput
  }

  /**
   * PatternAudience deleteMany
   */
  export type PatternAudienceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatternAudiences to delete
     */
    where?: PatternAudienceWhereInput
  }

  /**
   * PatternAudience without action
   */
  export type PatternAudienceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternAudience
     */
    select?: PatternAudienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternAudienceInclude<ExtArgs> | null
  }


  /**
   * Model PatternCategory
   */

  export type AggregatePatternCategory = {
    _count: PatternCategoryCountAggregateOutputType | null
    _avg: PatternCategoryAvgAggregateOutputType | null
    _sum: PatternCategorySumAggregateOutputType | null
    _min: PatternCategoryMinAggregateOutputType | null
    _max: PatternCategoryMaxAggregateOutputType | null
  }

  export type PatternCategoryAvgAggregateOutputType = {
    id: number | null
    pattern_id: number | null
    category_id: number | null
  }

  export type PatternCategorySumAggregateOutputType = {
    id: number | null
    pattern_id: number | null
    category_id: number | null
  }

  export type PatternCategoryMinAggregateOutputType = {
    id: number | null
    pattern_id: number | null
    category_id: number | null
  }

  export type PatternCategoryMaxAggregateOutputType = {
    id: number | null
    pattern_id: number | null
    category_id: number | null
  }

  export type PatternCategoryCountAggregateOutputType = {
    id: number
    pattern_id: number
    category_id: number
    _all: number
  }


  export type PatternCategoryAvgAggregateInputType = {
    id?: true
    pattern_id?: true
    category_id?: true
  }

  export type PatternCategorySumAggregateInputType = {
    id?: true
    pattern_id?: true
    category_id?: true
  }

  export type PatternCategoryMinAggregateInputType = {
    id?: true
    pattern_id?: true
    category_id?: true
  }

  export type PatternCategoryMaxAggregateInputType = {
    id?: true
    pattern_id?: true
    category_id?: true
  }

  export type PatternCategoryCountAggregateInputType = {
    id?: true
    pattern_id?: true
    category_id?: true
    _all?: true
  }

  export type PatternCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatternCategory to aggregate.
     */
    where?: PatternCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatternCategories to fetch.
     */
    orderBy?: PatternCategoryOrderByWithRelationInput | PatternCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatternCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatternCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatternCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatternCategories
    **/
    _count?: true | PatternCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatternCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatternCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatternCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatternCategoryMaxAggregateInputType
  }

  export type GetPatternCategoryAggregateType<T extends PatternCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregatePatternCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatternCategory[P]>
      : GetScalarType<T[P], AggregatePatternCategory[P]>
  }




  export type PatternCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatternCategoryWhereInput
    orderBy?: PatternCategoryOrderByWithAggregationInput | PatternCategoryOrderByWithAggregationInput[]
    by: PatternCategoryScalarFieldEnum[] | PatternCategoryScalarFieldEnum
    having?: PatternCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatternCategoryCountAggregateInputType | true
    _avg?: PatternCategoryAvgAggregateInputType
    _sum?: PatternCategorySumAggregateInputType
    _min?: PatternCategoryMinAggregateInputType
    _max?: PatternCategoryMaxAggregateInputType
  }

  export type PatternCategoryGroupByOutputType = {
    id: number
    pattern_id: number
    category_id: number
    _count: PatternCategoryCountAggregateOutputType | null
    _avg: PatternCategoryAvgAggregateOutputType | null
    _sum: PatternCategorySumAggregateOutputType | null
    _min: PatternCategoryMinAggregateOutputType | null
    _max: PatternCategoryMaxAggregateOutputType | null
  }

  type GetPatternCategoryGroupByPayload<T extends PatternCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatternCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatternCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatternCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], PatternCategoryGroupByOutputType[P]>
        }
      >
    >


  export type PatternCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pattern_id?: boolean
    category_id?: boolean
    pattern?: boolean | PatternDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patternCategory"]>

  export type PatternCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pattern_id?: boolean
    category_id?: boolean
    pattern?: boolean | PatternDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patternCategory"]>

  export type PatternCategorySelectScalar = {
    id?: boolean
    pattern_id?: boolean
    category_id?: boolean
  }

  export type PatternCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pattern?: boolean | PatternDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }
  export type PatternCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pattern?: boolean | PatternDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $PatternCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatternCategory"
    objects: {
      pattern: Prisma.$PatternPayload<ExtArgs>
      category: Prisma.$CategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      pattern_id: number
      category_id: number
    }, ExtArgs["result"]["patternCategory"]>
    composites: {}
  }

  type PatternCategoryGetPayload<S extends boolean | null | undefined | PatternCategoryDefaultArgs> = $Result.GetResult<Prisma.$PatternCategoryPayload, S>

  type PatternCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PatternCategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatternCategoryCountAggregateInputType | true
    }

  export interface PatternCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatternCategory'], meta: { name: 'PatternCategory' } }
    /**
     * Find zero or one PatternCategory that matches the filter.
     * @param {PatternCategoryFindUniqueArgs} args - Arguments to find a PatternCategory
     * @example
     * // Get one PatternCategory
     * const patternCategory = await prisma.patternCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatternCategoryFindUniqueArgs>(args: SelectSubset<T, PatternCategoryFindUniqueArgs<ExtArgs>>): Prisma__PatternCategoryClient<$Result.GetResult<Prisma.$PatternCategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PatternCategory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PatternCategoryFindUniqueOrThrowArgs} args - Arguments to find a PatternCategory
     * @example
     * // Get one PatternCategory
     * const patternCategory = await prisma.patternCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatternCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, PatternCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatternCategoryClient<$Result.GetResult<Prisma.$PatternCategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PatternCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternCategoryFindFirstArgs} args - Arguments to find a PatternCategory
     * @example
     * // Get one PatternCategory
     * const patternCategory = await prisma.patternCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatternCategoryFindFirstArgs>(args?: SelectSubset<T, PatternCategoryFindFirstArgs<ExtArgs>>): Prisma__PatternCategoryClient<$Result.GetResult<Prisma.$PatternCategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PatternCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternCategoryFindFirstOrThrowArgs} args - Arguments to find a PatternCategory
     * @example
     * // Get one PatternCategory
     * const patternCategory = await prisma.patternCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatternCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, PatternCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatternCategoryClient<$Result.GetResult<Prisma.$PatternCategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PatternCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatternCategories
     * const patternCategories = await prisma.patternCategory.findMany()
     * 
     * // Get first 10 PatternCategories
     * const patternCategories = await prisma.patternCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patternCategoryWithIdOnly = await prisma.patternCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatternCategoryFindManyArgs>(args?: SelectSubset<T, PatternCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternCategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PatternCategory.
     * @param {PatternCategoryCreateArgs} args - Arguments to create a PatternCategory.
     * @example
     * // Create one PatternCategory
     * const PatternCategory = await prisma.patternCategory.create({
     *   data: {
     *     // ... data to create a PatternCategory
     *   }
     * })
     * 
     */
    create<T extends PatternCategoryCreateArgs>(args: SelectSubset<T, PatternCategoryCreateArgs<ExtArgs>>): Prisma__PatternCategoryClient<$Result.GetResult<Prisma.$PatternCategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PatternCategories.
     * @param {PatternCategoryCreateManyArgs} args - Arguments to create many PatternCategories.
     * @example
     * // Create many PatternCategories
     * const patternCategory = await prisma.patternCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatternCategoryCreateManyArgs>(args?: SelectSubset<T, PatternCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatternCategories and returns the data saved in the database.
     * @param {PatternCategoryCreateManyAndReturnArgs} args - Arguments to create many PatternCategories.
     * @example
     * // Create many PatternCategories
     * const patternCategory = await prisma.patternCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatternCategories and only return the `id`
     * const patternCategoryWithIdOnly = await prisma.patternCategory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatternCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, PatternCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternCategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PatternCategory.
     * @param {PatternCategoryDeleteArgs} args - Arguments to delete one PatternCategory.
     * @example
     * // Delete one PatternCategory
     * const PatternCategory = await prisma.patternCategory.delete({
     *   where: {
     *     // ... filter to delete one PatternCategory
     *   }
     * })
     * 
     */
    delete<T extends PatternCategoryDeleteArgs>(args: SelectSubset<T, PatternCategoryDeleteArgs<ExtArgs>>): Prisma__PatternCategoryClient<$Result.GetResult<Prisma.$PatternCategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PatternCategory.
     * @param {PatternCategoryUpdateArgs} args - Arguments to update one PatternCategory.
     * @example
     * // Update one PatternCategory
     * const patternCategory = await prisma.patternCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatternCategoryUpdateArgs>(args: SelectSubset<T, PatternCategoryUpdateArgs<ExtArgs>>): Prisma__PatternCategoryClient<$Result.GetResult<Prisma.$PatternCategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PatternCategories.
     * @param {PatternCategoryDeleteManyArgs} args - Arguments to filter PatternCategories to delete.
     * @example
     * // Delete a few PatternCategories
     * const { count } = await prisma.patternCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatternCategoryDeleteManyArgs>(args?: SelectSubset<T, PatternCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatternCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatternCategories
     * const patternCategory = await prisma.patternCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatternCategoryUpdateManyArgs>(args: SelectSubset<T, PatternCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PatternCategory.
     * @param {PatternCategoryUpsertArgs} args - Arguments to update or create a PatternCategory.
     * @example
     * // Update or create a PatternCategory
     * const patternCategory = await prisma.patternCategory.upsert({
     *   create: {
     *     // ... data to create a PatternCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatternCategory we want to update
     *   }
     * })
     */
    upsert<T extends PatternCategoryUpsertArgs>(args: SelectSubset<T, PatternCategoryUpsertArgs<ExtArgs>>): Prisma__PatternCategoryClient<$Result.GetResult<Prisma.$PatternCategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PatternCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternCategoryCountArgs} args - Arguments to filter PatternCategories to count.
     * @example
     * // Count the number of PatternCategories
     * const count = await prisma.patternCategory.count({
     *   where: {
     *     // ... the filter for the PatternCategories we want to count
     *   }
     * })
    **/
    count<T extends PatternCategoryCountArgs>(
      args?: Subset<T, PatternCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatternCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatternCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatternCategoryAggregateArgs>(args: Subset<T, PatternCategoryAggregateArgs>): Prisma.PrismaPromise<GetPatternCategoryAggregateType<T>>

    /**
     * Group by PatternCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatternCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatternCategoryGroupByArgs['orderBy'] }
        : { orderBy?: PatternCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatternCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatternCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatternCategory model
   */
  readonly fields: PatternCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatternCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatternCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pattern<T extends PatternDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatternDefaultArgs<ExtArgs>>): Prisma__PatternClient<$Result.GetResult<Prisma.$PatternPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatternCategory model
   */ 
  interface PatternCategoryFieldRefs {
    readonly id: FieldRef<"PatternCategory", 'Int'>
    readonly pattern_id: FieldRef<"PatternCategory", 'Int'>
    readonly category_id: FieldRef<"PatternCategory", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PatternCategory findUnique
   */
  export type PatternCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternCategory
     */
    select?: PatternCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PatternCategory to fetch.
     */
    where: PatternCategoryWhereUniqueInput
  }

  /**
   * PatternCategory findUniqueOrThrow
   */
  export type PatternCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternCategory
     */
    select?: PatternCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PatternCategory to fetch.
     */
    where: PatternCategoryWhereUniqueInput
  }

  /**
   * PatternCategory findFirst
   */
  export type PatternCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternCategory
     */
    select?: PatternCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PatternCategory to fetch.
     */
    where?: PatternCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatternCategories to fetch.
     */
    orderBy?: PatternCategoryOrderByWithRelationInput | PatternCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatternCategories.
     */
    cursor?: PatternCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatternCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatternCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatternCategories.
     */
    distinct?: PatternCategoryScalarFieldEnum | PatternCategoryScalarFieldEnum[]
  }

  /**
   * PatternCategory findFirstOrThrow
   */
  export type PatternCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternCategory
     */
    select?: PatternCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PatternCategory to fetch.
     */
    where?: PatternCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatternCategories to fetch.
     */
    orderBy?: PatternCategoryOrderByWithRelationInput | PatternCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatternCategories.
     */
    cursor?: PatternCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatternCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatternCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatternCategories.
     */
    distinct?: PatternCategoryScalarFieldEnum | PatternCategoryScalarFieldEnum[]
  }

  /**
   * PatternCategory findMany
   */
  export type PatternCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternCategory
     */
    select?: PatternCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PatternCategories to fetch.
     */
    where?: PatternCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatternCategories to fetch.
     */
    orderBy?: PatternCategoryOrderByWithRelationInput | PatternCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatternCategories.
     */
    cursor?: PatternCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatternCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatternCategories.
     */
    skip?: number
    distinct?: PatternCategoryScalarFieldEnum | PatternCategoryScalarFieldEnum[]
  }

  /**
   * PatternCategory create
   */
  export type PatternCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternCategory
     */
    select?: PatternCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a PatternCategory.
     */
    data: XOR<PatternCategoryCreateInput, PatternCategoryUncheckedCreateInput>
  }

  /**
   * PatternCategory createMany
   */
  export type PatternCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatternCategories.
     */
    data: PatternCategoryCreateManyInput | PatternCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatternCategory createManyAndReturn
   */
  export type PatternCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternCategory
     */
    select?: PatternCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PatternCategories.
     */
    data: PatternCategoryCreateManyInput | PatternCategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternCategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatternCategory update
   */
  export type PatternCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternCategory
     */
    select?: PatternCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a PatternCategory.
     */
    data: XOR<PatternCategoryUpdateInput, PatternCategoryUncheckedUpdateInput>
    /**
     * Choose, which PatternCategory to update.
     */
    where: PatternCategoryWhereUniqueInput
  }

  /**
   * PatternCategory updateMany
   */
  export type PatternCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatternCategories.
     */
    data: XOR<PatternCategoryUpdateManyMutationInput, PatternCategoryUncheckedUpdateManyInput>
    /**
     * Filter which PatternCategories to update
     */
    where?: PatternCategoryWhereInput
  }

  /**
   * PatternCategory upsert
   */
  export type PatternCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternCategory
     */
    select?: PatternCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the PatternCategory to update in case it exists.
     */
    where: PatternCategoryWhereUniqueInput
    /**
     * In case the PatternCategory found by the `where` argument doesn't exist, create a new PatternCategory with this data.
     */
    create: XOR<PatternCategoryCreateInput, PatternCategoryUncheckedCreateInput>
    /**
     * In case the PatternCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatternCategoryUpdateInput, PatternCategoryUncheckedUpdateInput>
  }

  /**
   * PatternCategory delete
   */
  export type PatternCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternCategory
     */
    select?: PatternCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternCategoryInclude<ExtArgs> | null
    /**
     * Filter which PatternCategory to delete.
     */
    where: PatternCategoryWhereUniqueInput
  }

  /**
   * PatternCategory deleteMany
   */
  export type PatternCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatternCategories to delete
     */
    where?: PatternCategoryWhereInput
  }

  /**
   * PatternCategory without action
   */
  export type PatternCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternCategory
     */
    select?: PatternCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternCategoryInclude<ExtArgs> | null
  }


  /**
   * Model PatternFabricType
   */

  export type AggregatePatternFabricType = {
    _count: PatternFabricTypeCountAggregateOutputType | null
    _avg: PatternFabricTypeAvgAggregateOutputType | null
    _sum: PatternFabricTypeSumAggregateOutputType | null
    _min: PatternFabricTypeMinAggregateOutputType | null
    _max: PatternFabricTypeMaxAggregateOutputType | null
  }

  export type PatternFabricTypeAvgAggregateOutputType = {
    id: number | null
    pattern_id: number | null
    fabrictype_id: number | null
  }

  export type PatternFabricTypeSumAggregateOutputType = {
    id: number | null
    pattern_id: number | null
    fabrictype_id: number | null
  }

  export type PatternFabricTypeMinAggregateOutputType = {
    id: number | null
    pattern_id: number | null
    fabrictype_id: number | null
  }

  export type PatternFabricTypeMaxAggregateOutputType = {
    id: number | null
    pattern_id: number | null
    fabrictype_id: number | null
  }

  export type PatternFabricTypeCountAggregateOutputType = {
    id: number
    pattern_id: number
    fabrictype_id: number
    _all: number
  }


  export type PatternFabricTypeAvgAggregateInputType = {
    id?: true
    pattern_id?: true
    fabrictype_id?: true
  }

  export type PatternFabricTypeSumAggregateInputType = {
    id?: true
    pattern_id?: true
    fabrictype_id?: true
  }

  export type PatternFabricTypeMinAggregateInputType = {
    id?: true
    pattern_id?: true
    fabrictype_id?: true
  }

  export type PatternFabricTypeMaxAggregateInputType = {
    id?: true
    pattern_id?: true
    fabrictype_id?: true
  }

  export type PatternFabricTypeCountAggregateInputType = {
    id?: true
    pattern_id?: true
    fabrictype_id?: true
    _all?: true
  }

  export type PatternFabricTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatternFabricType to aggregate.
     */
    where?: PatternFabricTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatternFabricTypes to fetch.
     */
    orderBy?: PatternFabricTypeOrderByWithRelationInput | PatternFabricTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatternFabricTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatternFabricTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatternFabricTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatternFabricTypes
    **/
    _count?: true | PatternFabricTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatternFabricTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatternFabricTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatternFabricTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatternFabricTypeMaxAggregateInputType
  }

  export type GetPatternFabricTypeAggregateType<T extends PatternFabricTypeAggregateArgs> = {
        [P in keyof T & keyof AggregatePatternFabricType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatternFabricType[P]>
      : GetScalarType<T[P], AggregatePatternFabricType[P]>
  }




  export type PatternFabricTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatternFabricTypeWhereInput
    orderBy?: PatternFabricTypeOrderByWithAggregationInput | PatternFabricTypeOrderByWithAggregationInput[]
    by: PatternFabricTypeScalarFieldEnum[] | PatternFabricTypeScalarFieldEnum
    having?: PatternFabricTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatternFabricTypeCountAggregateInputType | true
    _avg?: PatternFabricTypeAvgAggregateInputType
    _sum?: PatternFabricTypeSumAggregateInputType
    _min?: PatternFabricTypeMinAggregateInputType
    _max?: PatternFabricTypeMaxAggregateInputType
  }

  export type PatternFabricTypeGroupByOutputType = {
    id: number
    pattern_id: number
    fabrictype_id: number
    _count: PatternFabricTypeCountAggregateOutputType | null
    _avg: PatternFabricTypeAvgAggregateOutputType | null
    _sum: PatternFabricTypeSumAggregateOutputType | null
    _min: PatternFabricTypeMinAggregateOutputType | null
    _max: PatternFabricTypeMaxAggregateOutputType | null
  }

  type GetPatternFabricTypeGroupByPayload<T extends PatternFabricTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatternFabricTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatternFabricTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatternFabricTypeGroupByOutputType[P]>
            : GetScalarType<T[P], PatternFabricTypeGroupByOutputType[P]>
        }
      >
    >


  export type PatternFabricTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pattern_id?: boolean
    fabrictype_id?: boolean
    pattern?: boolean | PatternDefaultArgs<ExtArgs>
    fabricType?: boolean | FabricTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patternFabricType"]>

  export type PatternFabricTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pattern_id?: boolean
    fabrictype_id?: boolean
    pattern?: boolean | PatternDefaultArgs<ExtArgs>
    fabricType?: boolean | FabricTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patternFabricType"]>

  export type PatternFabricTypeSelectScalar = {
    id?: boolean
    pattern_id?: boolean
    fabrictype_id?: boolean
  }

  export type PatternFabricTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pattern?: boolean | PatternDefaultArgs<ExtArgs>
    fabricType?: boolean | FabricTypeDefaultArgs<ExtArgs>
  }
  export type PatternFabricTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pattern?: boolean | PatternDefaultArgs<ExtArgs>
    fabricType?: boolean | FabricTypeDefaultArgs<ExtArgs>
  }

  export type $PatternFabricTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatternFabricType"
    objects: {
      pattern: Prisma.$PatternPayload<ExtArgs>
      fabricType: Prisma.$FabricTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      pattern_id: number
      fabrictype_id: number
    }, ExtArgs["result"]["patternFabricType"]>
    composites: {}
  }

  type PatternFabricTypeGetPayload<S extends boolean | null | undefined | PatternFabricTypeDefaultArgs> = $Result.GetResult<Prisma.$PatternFabricTypePayload, S>

  type PatternFabricTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PatternFabricTypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatternFabricTypeCountAggregateInputType | true
    }

  export interface PatternFabricTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatternFabricType'], meta: { name: 'PatternFabricType' } }
    /**
     * Find zero or one PatternFabricType that matches the filter.
     * @param {PatternFabricTypeFindUniqueArgs} args - Arguments to find a PatternFabricType
     * @example
     * // Get one PatternFabricType
     * const patternFabricType = await prisma.patternFabricType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatternFabricTypeFindUniqueArgs>(args: SelectSubset<T, PatternFabricTypeFindUniqueArgs<ExtArgs>>): Prisma__PatternFabricTypeClient<$Result.GetResult<Prisma.$PatternFabricTypePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PatternFabricType that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PatternFabricTypeFindUniqueOrThrowArgs} args - Arguments to find a PatternFabricType
     * @example
     * // Get one PatternFabricType
     * const patternFabricType = await prisma.patternFabricType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatternFabricTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, PatternFabricTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatternFabricTypeClient<$Result.GetResult<Prisma.$PatternFabricTypePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PatternFabricType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternFabricTypeFindFirstArgs} args - Arguments to find a PatternFabricType
     * @example
     * // Get one PatternFabricType
     * const patternFabricType = await prisma.patternFabricType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatternFabricTypeFindFirstArgs>(args?: SelectSubset<T, PatternFabricTypeFindFirstArgs<ExtArgs>>): Prisma__PatternFabricTypeClient<$Result.GetResult<Prisma.$PatternFabricTypePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PatternFabricType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternFabricTypeFindFirstOrThrowArgs} args - Arguments to find a PatternFabricType
     * @example
     * // Get one PatternFabricType
     * const patternFabricType = await prisma.patternFabricType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatternFabricTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, PatternFabricTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatternFabricTypeClient<$Result.GetResult<Prisma.$PatternFabricTypePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PatternFabricTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternFabricTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatternFabricTypes
     * const patternFabricTypes = await prisma.patternFabricType.findMany()
     * 
     * // Get first 10 PatternFabricTypes
     * const patternFabricTypes = await prisma.patternFabricType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patternFabricTypeWithIdOnly = await prisma.patternFabricType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatternFabricTypeFindManyArgs>(args?: SelectSubset<T, PatternFabricTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternFabricTypePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PatternFabricType.
     * @param {PatternFabricTypeCreateArgs} args - Arguments to create a PatternFabricType.
     * @example
     * // Create one PatternFabricType
     * const PatternFabricType = await prisma.patternFabricType.create({
     *   data: {
     *     // ... data to create a PatternFabricType
     *   }
     * })
     * 
     */
    create<T extends PatternFabricTypeCreateArgs>(args: SelectSubset<T, PatternFabricTypeCreateArgs<ExtArgs>>): Prisma__PatternFabricTypeClient<$Result.GetResult<Prisma.$PatternFabricTypePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PatternFabricTypes.
     * @param {PatternFabricTypeCreateManyArgs} args - Arguments to create many PatternFabricTypes.
     * @example
     * // Create many PatternFabricTypes
     * const patternFabricType = await prisma.patternFabricType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatternFabricTypeCreateManyArgs>(args?: SelectSubset<T, PatternFabricTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatternFabricTypes and returns the data saved in the database.
     * @param {PatternFabricTypeCreateManyAndReturnArgs} args - Arguments to create many PatternFabricTypes.
     * @example
     * // Create many PatternFabricTypes
     * const patternFabricType = await prisma.patternFabricType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatternFabricTypes and only return the `id`
     * const patternFabricTypeWithIdOnly = await prisma.patternFabricType.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatternFabricTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, PatternFabricTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternFabricTypePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PatternFabricType.
     * @param {PatternFabricTypeDeleteArgs} args - Arguments to delete one PatternFabricType.
     * @example
     * // Delete one PatternFabricType
     * const PatternFabricType = await prisma.patternFabricType.delete({
     *   where: {
     *     // ... filter to delete one PatternFabricType
     *   }
     * })
     * 
     */
    delete<T extends PatternFabricTypeDeleteArgs>(args: SelectSubset<T, PatternFabricTypeDeleteArgs<ExtArgs>>): Prisma__PatternFabricTypeClient<$Result.GetResult<Prisma.$PatternFabricTypePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PatternFabricType.
     * @param {PatternFabricTypeUpdateArgs} args - Arguments to update one PatternFabricType.
     * @example
     * // Update one PatternFabricType
     * const patternFabricType = await prisma.patternFabricType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatternFabricTypeUpdateArgs>(args: SelectSubset<T, PatternFabricTypeUpdateArgs<ExtArgs>>): Prisma__PatternFabricTypeClient<$Result.GetResult<Prisma.$PatternFabricTypePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PatternFabricTypes.
     * @param {PatternFabricTypeDeleteManyArgs} args - Arguments to filter PatternFabricTypes to delete.
     * @example
     * // Delete a few PatternFabricTypes
     * const { count } = await prisma.patternFabricType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatternFabricTypeDeleteManyArgs>(args?: SelectSubset<T, PatternFabricTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatternFabricTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternFabricTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatternFabricTypes
     * const patternFabricType = await prisma.patternFabricType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatternFabricTypeUpdateManyArgs>(args: SelectSubset<T, PatternFabricTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PatternFabricType.
     * @param {PatternFabricTypeUpsertArgs} args - Arguments to update or create a PatternFabricType.
     * @example
     * // Update or create a PatternFabricType
     * const patternFabricType = await prisma.patternFabricType.upsert({
     *   create: {
     *     // ... data to create a PatternFabricType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatternFabricType we want to update
     *   }
     * })
     */
    upsert<T extends PatternFabricTypeUpsertArgs>(args: SelectSubset<T, PatternFabricTypeUpsertArgs<ExtArgs>>): Prisma__PatternFabricTypeClient<$Result.GetResult<Prisma.$PatternFabricTypePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PatternFabricTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternFabricTypeCountArgs} args - Arguments to filter PatternFabricTypes to count.
     * @example
     * // Count the number of PatternFabricTypes
     * const count = await prisma.patternFabricType.count({
     *   where: {
     *     // ... the filter for the PatternFabricTypes we want to count
     *   }
     * })
    **/
    count<T extends PatternFabricTypeCountArgs>(
      args?: Subset<T, PatternFabricTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatternFabricTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatternFabricType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternFabricTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatternFabricTypeAggregateArgs>(args: Subset<T, PatternFabricTypeAggregateArgs>): Prisma.PrismaPromise<GetPatternFabricTypeAggregateType<T>>

    /**
     * Group by PatternFabricType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternFabricTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatternFabricTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatternFabricTypeGroupByArgs['orderBy'] }
        : { orderBy?: PatternFabricTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatternFabricTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatternFabricTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatternFabricType model
   */
  readonly fields: PatternFabricTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatternFabricType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatternFabricTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pattern<T extends PatternDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatternDefaultArgs<ExtArgs>>): Prisma__PatternClient<$Result.GetResult<Prisma.$PatternPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    fabricType<T extends FabricTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FabricTypeDefaultArgs<ExtArgs>>): Prisma__FabricTypeClient<$Result.GetResult<Prisma.$FabricTypePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatternFabricType model
   */ 
  interface PatternFabricTypeFieldRefs {
    readonly id: FieldRef<"PatternFabricType", 'Int'>
    readonly pattern_id: FieldRef<"PatternFabricType", 'Int'>
    readonly fabrictype_id: FieldRef<"PatternFabricType", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PatternFabricType findUnique
   */
  export type PatternFabricTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternFabricType
     */
    select?: PatternFabricTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternFabricTypeInclude<ExtArgs> | null
    /**
     * Filter, which PatternFabricType to fetch.
     */
    where: PatternFabricTypeWhereUniqueInput
  }

  /**
   * PatternFabricType findUniqueOrThrow
   */
  export type PatternFabricTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternFabricType
     */
    select?: PatternFabricTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternFabricTypeInclude<ExtArgs> | null
    /**
     * Filter, which PatternFabricType to fetch.
     */
    where: PatternFabricTypeWhereUniqueInput
  }

  /**
   * PatternFabricType findFirst
   */
  export type PatternFabricTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternFabricType
     */
    select?: PatternFabricTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternFabricTypeInclude<ExtArgs> | null
    /**
     * Filter, which PatternFabricType to fetch.
     */
    where?: PatternFabricTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatternFabricTypes to fetch.
     */
    orderBy?: PatternFabricTypeOrderByWithRelationInput | PatternFabricTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatternFabricTypes.
     */
    cursor?: PatternFabricTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatternFabricTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatternFabricTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatternFabricTypes.
     */
    distinct?: PatternFabricTypeScalarFieldEnum | PatternFabricTypeScalarFieldEnum[]
  }

  /**
   * PatternFabricType findFirstOrThrow
   */
  export type PatternFabricTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternFabricType
     */
    select?: PatternFabricTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternFabricTypeInclude<ExtArgs> | null
    /**
     * Filter, which PatternFabricType to fetch.
     */
    where?: PatternFabricTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatternFabricTypes to fetch.
     */
    orderBy?: PatternFabricTypeOrderByWithRelationInput | PatternFabricTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatternFabricTypes.
     */
    cursor?: PatternFabricTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatternFabricTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatternFabricTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatternFabricTypes.
     */
    distinct?: PatternFabricTypeScalarFieldEnum | PatternFabricTypeScalarFieldEnum[]
  }

  /**
   * PatternFabricType findMany
   */
  export type PatternFabricTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternFabricType
     */
    select?: PatternFabricTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternFabricTypeInclude<ExtArgs> | null
    /**
     * Filter, which PatternFabricTypes to fetch.
     */
    where?: PatternFabricTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatternFabricTypes to fetch.
     */
    orderBy?: PatternFabricTypeOrderByWithRelationInput | PatternFabricTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatternFabricTypes.
     */
    cursor?: PatternFabricTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatternFabricTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatternFabricTypes.
     */
    skip?: number
    distinct?: PatternFabricTypeScalarFieldEnum | PatternFabricTypeScalarFieldEnum[]
  }

  /**
   * PatternFabricType create
   */
  export type PatternFabricTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternFabricType
     */
    select?: PatternFabricTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternFabricTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a PatternFabricType.
     */
    data: XOR<PatternFabricTypeCreateInput, PatternFabricTypeUncheckedCreateInput>
  }

  /**
   * PatternFabricType createMany
   */
  export type PatternFabricTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatternFabricTypes.
     */
    data: PatternFabricTypeCreateManyInput | PatternFabricTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatternFabricType createManyAndReturn
   */
  export type PatternFabricTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternFabricType
     */
    select?: PatternFabricTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PatternFabricTypes.
     */
    data: PatternFabricTypeCreateManyInput | PatternFabricTypeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternFabricTypeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatternFabricType update
   */
  export type PatternFabricTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternFabricType
     */
    select?: PatternFabricTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternFabricTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a PatternFabricType.
     */
    data: XOR<PatternFabricTypeUpdateInput, PatternFabricTypeUncheckedUpdateInput>
    /**
     * Choose, which PatternFabricType to update.
     */
    where: PatternFabricTypeWhereUniqueInput
  }

  /**
   * PatternFabricType updateMany
   */
  export type PatternFabricTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatternFabricTypes.
     */
    data: XOR<PatternFabricTypeUpdateManyMutationInput, PatternFabricTypeUncheckedUpdateManyInput>
    /**
     * Filter which PatternFabricTypes to update
     */
    where?: PatternFabricTypeWhereInput
  }

  /**
   * PatternFabricType upsert
   */
  export type PatternFabricTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternFabricType
     */
    select?: PatternFabricTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternFabricTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the PatternFabricType to update in case it exists.
     */
    where: PatternFabricTypeWhereUniqueInput
    /**
     * In case the PatternFabricType found by the `where` argument doesn't exist, create a new PatternFabricType with this data.
     */
    create: XOR<PatternFabricTypeCreateInput, PatternFabricTypeUncheckedCreateInput>
    /**
     * In case the PatternFabricType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatternFabricTypeUpdateInput, PatternFabricTypeUncheckedUpdateInput>
  }

  /**
   * PatternFabricType delete
   */
  export type PatternFabricTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternFabricType
     */
    select?: PatternFabricTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternFabricTypeInclude<ExtArgs> | null
    /**
     * Filter which PatternFabricType to delete.
     */
    where: PatternFabricTypeWhereUniqueInput
  }

  /**
   * PatternFabricType deleteMany
   */
  export type PatternFabricTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatternFabricTypes to delete
     */
    where?: PatternFabricTypeWhereInput
  }

  /**
   * PatternFabricType without action
   */
  export type PatternFabricTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternFabricType
     */
    select?: PatternFabricTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternFabricTypeInclude<ExtArgs> | null
  }


  /**
   * Model PatternSuggestedFabric
   */

  export type AggregatePatternSuggestedFabric = {
    _count: PatternSuggestedFabricCountAggregateOutputType | null
    _avg: PatternSuggestedFabricAvgAggregateOutputType | null
    _sum: PatternSuggestedFabricSumAggregateOutputType | null
    _min: PatternSuggestedFabricMinAggregateOutputType | null
    _max: PatternSuggestedFabricMaxAggregateOutputType | null
  }

  export type PatternSuggestedFabricAvgAggregateOutputType = {
    id: number | null
    pattern_id: number | null
    suggestedfabric_id: number | null
  }

  export type PatternSuggestedFabricSumAggregateOutputType = {
    id: number | null
    pattern_id: number | null
    suggestedfabric_id: number | null
  }

  export type PatternSuggestedFabricMinAggregateOutputType = {
    id: number | null
    pattern_id: number | null
    suggestedfabric_id: number | null
  }

  export type PatternSuggestedFabricMaxAggregateOutputType = {
    id: number | null
    pattern_id: number | null
    suggestedfabric_id: number | null
  }

  export type PatternSuggestedFabricCountAggregateOutputType = {
    id: number
    pattern_id: number
    suggestedfabric_id: number
    _all: number
  }


  export type PatternSuggestedFabricAvgAggregateInputType = {
    id?: true
    pattern_id?: true
    suggestedfabric_id?: true
  }

  export type PatternSuggestedFabricSumAggregateInputType = {
    id?: true
    pattern_id?: true
    suggestedfabric_id?: true
  }

  export type PatternSuggestedFabricMinAggregateInputType = {
    id?: true
    pattern_id?: true
    suggestedfabric_id?: true
  }

  export type PatternSuggestedFabricMaxAggregateInputType = {
    id?: true
    pattern_id?: true
    suggestedfabric_id?: true
  }

  export type PatternSuggestedFabricCountAggregateInputType = {
    id?: true
    pattern_id?: true
    suggestedfabric_id?: true
    _all?: true
  }

  export type PatternSuggestedFabricAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatternSuggestedFabric to aggregate.
     */
    where?: PatternSuggestedFabricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatternSuggestedFabrics to fetch.
     */
    orderBy?: PatternSuggestedFabricOrderByWithRelationInput | PatternSuggestedFabricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatternSuggestedFabricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatternSuggestedFabrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatternSuggestedFabrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatternSuggestedFabrics
    **/
    _count?: true | PatternSuggestedFabricCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatternSuggestedFabricAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatternSuggestedFabricSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatternSuggestedFabricMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatternSuggestedFabricMaxAggregateInputType
  }

  export type GetPatternSuggestedFabricAggregateType<T extends PatternSuggestedFabricAggregateArgs> = {
        [P in keyof T & keyof AggregatePatternSuggestedFabric]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatternSuggestedFabric[P]>
      : GetScalarType<T[P], AggregatePatternSuggestedFabric[P]>
  }




  export type PatternSuggestedFabricGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatternSuggestedFabricWhereInput
    orderBy?: PatternSuggestedFabricOrderByWithAggregationInput | PatternSuggestedFabricOrderByWithAggregationInput[]
    by: PatternSuggestedFabricScalarFieldEnum[] | PatternSuggestedFabricScalarFieldEnum
    having?: PatternSuggestedFabricScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatternSuggestedFabricCountAggregateInputType | true
    _avg?: PatternSuggestedFabricAvgAggregateInputType
    _sum?: PatternSuggestedFabricSumAggregateInputType
    _min?: PatternSuggestedFabricMinAggregateInputType
    _max?: PatternSuggestedFabricMaxAggregateInputType
  }

  export type PatternSuggestedFabricGroupByOutputType = {
    id: number
    pattern_id: number
    suggestedfabric_id: number
    _count: PatternSuggestedFabricCountAggregateOutputType | null
    _avg: PatternSuggestedFabricAvgAggregateOutputType | null
    _sum: PatternSuggestedFabricSumAggregateOutputType | null
    _min: PatternSuggestedFabricMinAggregateOutputType | null
    _max: PatternSuggestedFabricMaxAggregateOutputType | null
  }

  type GetPatternSuggestedFabricGroupByPayload<T extends PatternSuggestedFabricGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatternSuggestedFabricGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatternSuggestedFabricGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatternSuggestedFabricGroupByOutputType[P]>
            : GetScalarType<T[P], PatternSuggestedFabricGroupByOutputType[P]>
        }
      >
    >


  export type PatternSuggestedFabricSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pattern_id?: boolean
    suggestedfabric_id?: boolean
    pattern?: boolean | PatternDefaultArgs<ExtArgs>
    suggestedFabric?: boolean | SuggestedFabricDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patternSuggestedFabric"]>

  export type PatternSuggestedFabricSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pattern_id?: boolean
    suggestedfabric_id?: boolean
    pattern?: boolean | PatternDefaultArgs<ExtArgs>
    suggestedFabric?: boolean | SuggestedFabricDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patternSuggestedFabric"]>

  export type PatternSuggestedFabricSelectScalar = {
    id?: boolean
    pattern_id?: boolean
    suggestedfabric_id?: boolean
  }

  export type PatternSuggestedFabricInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pattern?: boolean | PatternDefaultArgs<ExtArgs>
    suggestedFabric?: boolean | SuggestedFabricDefaultArgs<ExtArgs>
  }
  export type PatternSuggestedFabricIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pattern?: boolean | PatternDefaultArgs<ExtArgs>
    suggestedFabric?: boolean | SuggestedFabricDefaultArgs<ExtArgs>
  }

  export type $PatternSuggestedFabricPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatternSuggestedFabric"
    objects: {
      pattern: Prisma.$PatternPayload<ExtArgs>
      suggestedFabric: Prisma.$SuggestedFabricPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      pattern_id: number
      suggestedfabric_id: number
    }, ExtArgs["result"]["patternSuggestedFabric"]>
    composites: {}
  }

  type PatternSuggestedFabricGetPayload<S extends boolean | null | undefined | PatternSuggestedFabricDefaultArgs> = $Result.GetResult<Prisma.$PatternSuggestedFabricPayload, S>

  type PatternSuggestedFabricCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PatternSuggestedFabricFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatternSuggestedFabricCountAggregateInputType | true
    }

  export interface PatternSuggestedFabricDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatternSuggestedFabric'], meta: { name: 'PatternSuggestedFabric' } }
    /**
     * Find zero or one PatternSuggestedFabric that matches the filter.
     * @param {PatternSuggestedFabricFindUniqueArgs} args - Arguments to find a PatternSuggestedFabric
     * @example
     * // Get one PatternSuggestedFabric
     * const patternSuggestedFabric = await prisma.patternSuggestedFabric.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatternSuggestedFabricFindUniqueArgs>(args: SelectSubset<T, PatternSuggestedFabricFindUniqueArgs<ExtArgs>>): Prisma__PatternSuggestedFabricClient<$Result.GetResult<Prisma.$PatternSuggestedFabricPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PatternSuggestedFabric that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PatternSuggestedFabricFindUniqueOrThrowArgs} args - Arguments to find a PatternSuggestedFabric
     * @example
     * // Get one PatternSuggestedFabric
     * const patternSuggestedFabric = await prisma.patternSuggestedFabric.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatternSuggestedFabricFindUniqueOrThrowArgs>(args: SelectSubset<T, PatternSuggestedFabricFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatternSuggestedFabricClient<$Result.GetResult<Prisma.$PatternSuggestedFabricPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PatternSuggestedFabric that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternSuggestedFabricFindFirstArgs} args - Arguments to find a PatternSuggestedFabric
     * @example
     * // Get one PatternSuggestedFabric
     * const patternSuggestedFabric = await prisma.patternSuggestedFabric.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatternSuggestedFabricFindFirstArgs>(args?: SelectSubset<T, PatternSuggestedFabricFindFirstArgs<ExtArgs>>): Prisma__PatternSuggestedFabricClient<$Result.GetResult<Prisma.$PatternSuggestedFabricPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PatternSuggestedFabric that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternSuggestedFabricFindFirstOrThrowArgs} args - Arguments to find a PatternSuggestedFabric
     * @example
     * // Get one PatternSuggestedFabric
     * const patternSuggestedFabric = await prisma.patternSuggestedFabric.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatternSuggestedFabricFindFirstOrThrowArgs>(args?: SelectSubset<T, PatternSuggestedFabricFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatternSuggestedFabricClient<$Result.GetResult<Prisma.$PatternSuggestedFabricPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PatternSuggestedFabrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternSuggestedFabricFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatternSuggestedFabrics
     * const patternSuggestedFabrics = await prisma.patternSuggestedFabric.findMany()
     * 
     * // Get first 10 PatternSuggestedFabrics
     * const patternSuggestedFabrics = await prisma.patternSuggestedFabric.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patternSuggestedFabricWithIdOnly = await prisma.patternSuggestedFabric.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatternSuggestedFabricFindManyArgs>(args?: SelectSubset<T, PatternSuggestedFabricFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternSuggestedFabricPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PatternSuggestedFabric.
     * @param {PatternSuggestedFabricCreateArgs} args - Arguments to create a PatternSuggestedFabric.
     * @example
     * // Create one PatternSuggestedFabric
     * const PatternSuggestedFabric = await prisma.patternSuggestedFabric.create({
     *   data: {
     *     // ... data to create a PatternSuggestedFabric
     *   }
     * })
     * 
     */
    create<T extends PatternSuggestedFabricCreateArgs>(args: SelectSubset<T, PatternSuggestedFabricCreateArgs<ExtArgs>>): Prisma__PatternSuggestedFabricClient<$Result.GetResult<Prisma.$PatternSuggestedFabricPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PatternSuggestedFabrics.
     * @param {PatternSuggestedFabricCreateManyArgs} args - Arguments to create many PatternSuggestedFabrics.
     * @example
     * // Create many PatternSuggestedFabrics
     * const patternSuggestedFabric = await prisma.patternSuggestedFabric.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatternSuggestedFabricCreateManyArgs>(args?: SelectSubset<T, PatternSuggestedFabricCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatternSuggestedFabrics and returns the data saved in the database.
     * @param {PatternSuggestedFabricCreateManyAndReturnArgs} args - Arguments to create many PatternSuggestedFabrics.
     * @example
     * // Create many PatternSuggestedFabrics
     * const patternSuggestedFabric = await prisma.patternSuggestedFabric.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatternSuggestedFabrics and only return the `id`
     * const patternSuggestedFabricWithIdOnly = await prisma.patternSuggestedFabric.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatternSuggestedFabricCreateManyAndReturnArgs>(args?: SelectSubset<T, PatternSuggestedFabricCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternSuggestedFabricPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PatternSuggestedFabric.
     * @param {PatternSuggestedFabricDeleteArgs} args - Arguments to delete one PatternSuggestedFabric.
     * @example
     * // Delete one PatternSuggestedFabric
     * const PatternSuggestedFabric = await prisma.patternSuggestedFabric.delete({
     *   where: {
     *     // ... filter to delete one PatternSuggestedFabric
     *   }
     * })
     * 
     */
    delete<T extends PatternSuggestedFabricDeleteArgs>(args: SelectSubset<T, PatternSuggestedFabricDeleteArgs<ExtArgs>>): Prisma__PatternSuggestedFabricClient<$Result.GetResult<Prisma.$PatternSuggestedFabricPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PatternSuggestedFabric.
     * @param {PatternSuggestedFabricUpdateArgs} args - Arguments to update one PatternSuggestedFabric.
     * @example
     * // Update one PatternSuggestedFabric
     * const patternSuggestedFabric = await prisma.patternSuggestedFabric.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatternSuggestedFabricUpdateArgs>(args: SelectSubset<T, PatternSuggestedFabricUpdateArgs<ExtArgs>>): Prisma__PatternSuggestedFabricClient<$Result.GetResult<Prisma.$PatternSuggestedFabricPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PatternSuggestedFabrics.
     * @param {PatternSuggestedFabricDeleteManyArgs} args - Arguments to filter PatternSuggestedFabrics to delete.
     * @example
     * // Delete a few PatternSuggestedFabrics
     * const { count } = await prisma.patternSuggestedFabric.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatternSuggestedFabricDeleteManyArgs>(args?: SelectSubset<T, PatternSuggestedFabricDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatternSuggestedFabrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternSuggestedFabricUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatternSuggestedFabrics
     * const patternSuggestedFabric = await prisma.patternSuggestedFabric.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatternSuggestedFabricUpdateManyArgs>(args: SelectSubset<T, PatternSuggestedFabricUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PatternSuggestedFabric.
     * @param {PatternSuggestedFabricUpsertArgs} args - Arguments to update or create a PatternSuggestedFabric.
     * @example
     * // Update or create a PatternSuggestedFabric
     * const patternSuggestedFabric = await prisma.patternSuggestedFabric.upsert({
     *   create: {
     *     // ... data to create a PatternSuggestedFabric
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatternSuggestedFabric we want to update
     *   }
     * })
     */
    upsert<T extends PatternSuggestedFabricUpsertArgs>(args: SelectSubset<T, PatternSuggestedFabricUpsertArgs<ExtArgs>>): Prisma__PatternSuggestedFabricClient<$Result.GetResult<Prisma.$PatternSuggestedFabricPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PatternSuggestedFabrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternSuggestedFabricCountArgs} args - Arguments to filter PatternSuggestedFabrics to count.
     * @example
     * // Count the number of PatternSuggestedFabrics
     * const count = await prisma.patternSuggestedFabric.count({
     *   where: {
     *     // ... the filter for the PatternSuggestedFabrics we want to count
     *   }
     * })
    **/
    count<T extends PatternSuggestedFabricCountArgs>(
      args?: Subset<T, PatternSuggestedFabricCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatternSuggestedFabricCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatternSuggestedFabric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternSuggestedFabricAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatternSuggestedFabricAggregateArgs>(args: Subset<T, PatternSuggestedFabricAggregateArgs>): Prisma.PrismaPromise<GetPatternSuggestedFabricAggregateType<T>>

    /**
     * Group by PatternSuggestedFabric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatternSuggestedFabricGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatternSuggestedFabricGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatternSuggestedFabricGroupByArgs['orderBy'] }
        : { orderBy?: PatternSuggestedFabricGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatternSuggestedFabricGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatternSuggestedFabricGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatternSuggestedFabric model
   */
  readonly fields: PatternSuggestedFabricFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatternSuggestedFabric.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatternSuggestedFabricClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pattern<T extends PatternDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatternDefaultArgs<ExtArgs>>): Prisma__PatternClient<$Result.GetResult<Prisma.$PatternPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    suggestedFabric<T extends SuggestedFabricDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SuggestedFabricDefaultArgs<ExtArgs>>): Prisma__SuggestedFabricClient<$Result.GetResult<Prisma.$SuggestedFabricPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatternSuggestedFabric model
   */ 
  interface PatternSuggestedFabricFieldRefs {
    readonly id: FieldRef<"PatternSuggestedFabric", 'Int'>
    readonly pattern_id: FieldRef<"PatternSuggestedFabric", 'Int'>
    readonly suggestedfabric_id: FieldRef<"PatternSuggestedFabric", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PatternSuggestedFabric findUnique
   */
  export type PatternSuggestedFabricFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternSuggestedFabric
     */
    select?: PatternSuggestedFabricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternSuggestedFabricInclude<ExtArgs> | null
    /**
     * Filter, which PatternSuggestedFabric to fetch.
     */
    where: PatternSuggestedFabricWhereUniqueInput
  }

  /**
   * PatternSuggestedFabric findUniqueOrThrow
   */
  export type PatternSuggestedFabricFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternSuggestedFabric
     */
    select?: PatternSuggestedFabricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternSuggestedFabricInclude<ExtArgs> | null
    /**
     * Filter, which PatternSuggestedFabric to fetch.
     */
    where: PatternSuggestedFabricWhereUniqueInput
  }

  /**
   * PatternSuggestedFabric findFirst
   */
  export type PatternSuggestedFabricFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternSuggestedFabric
     */
    select?: PatternSuggestedFabricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternSuggestedFabricInclude<ExtArgs> | null
    /**
     * Filter, which PatternSuggestedFabric to fetch.
     */
    where?: PatternSuggestedFabricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatternSuggestedFabrics to fetch.
     */
    orderBy?: PatternSuggestedFabricOrderByWithRelationInput | PatternSuggestedFabricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatternSuggestedFabrics.
     */
    cursor?: PatternSuggestedFabricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatternSuggestedFabrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatternSuggestedFabrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatternSuggestedFabrics.
     */
    distinct?: PatternSuggestedFabricScalarFieldEnum | PatternSuggestedFabricScalarFieldEnum[]
  }

  /**
   * PatternSuggestedFabric findFirstOrThrow
   */
  export type PatternSuggestedFabricFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternSuggestedFabric
     */
    select?: PatternSuggestedFabricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternSuggestedFabricInclude<ExtArgs> | null
    /**
     * Filter, which PatternSuggestedFabric to fetch.
     */
    where?: PatternSuggestedFabricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatternSuggestedFabrics to fetch.
     */
    orderBy?: PatternSuggestedFabricOrderByWithRelationInput | PatternSuggestedFabricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatternSuggestedFabrics.
     */
    cursor?: PatternSuggestedFabricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatternSuggestedFabrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatternSuggestedFabrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatternSuggestedFabrics.
     */
    distinct?: PatternSuggestedFabricScalarFieldEnum | PatternSuggestedFabricScalarFieldEnum[]
  }

  /**
   * PatternSuggestedFabric findMany
   */
  export type PatternSuggestedFabricFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternSuggestedFabric
     */
    select?: PatternSuggestedFabricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternSuggestedFabricInclude<ExtArgs> | null
    /**
     * Filter, which PatternSuggestedFabrics to fetch.
     */
    where?: PatternSuggestedFabricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatternSuggestedFabrics to fetch.
     */
    orderBy?: PatternSuggestedFabricOrderByWithRelationInput | PatternSuggestedFabricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatternSuggestedFabrics.
     */
    cursor?: PatternSuggestedFabricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatternSuggestedFabrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatternSuggestedFabrics.
     */
    skip?: number
    distinct?: PatternSuggestedFabricScalarFieldEnum | PatternSuggestedFabricScalarFieldEnum[]
  }

  /**
   * PatternSuggestedFabric create
   */
  export type PatternSuggestedFabricCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternSuggestedFabric
     */
    select?: PatternSuggestedFabricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternSuggestedFabricInclude<ExtArgs> | null
    /**
     * The data needed to create a PatternSuggestedFabric.
     */
    data: XOR<PatternSuggestedFabricCreateInput, PatternSuggestedFabricUncheckedCreateInput>
  }

  /**
   * PatternSuggestedFabric createMany
   */
  export type PatternSuggestedFabricCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatternSuggestedFabrics.
     */
    data: PatternSuggestedFabricCreateManyInput | PatternSuggestedFabricCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatternSuggestedFabric createManyAndReturn
   */
  export type PatternSuggestedFabricCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternSuggestedFabric
     */
    select?: PatternSuggestedFabricSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PatternSuggestedFabrics.
     */
    data: PatternSuggestedFabricCreateManyInput | PatternSuggestedFabricCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternSuggestedFabricIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatternSuggestedFabric update
   */
  export type PatternSuggestedFabricUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternSuggestedFabric
     */
    select?: PatternSuggestedFabricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternSuggestedFabricInclude<ExtArgs> | null
    /**
     * The data needed to update a PatternSuggestedFabric.
     */
    data: XOR<PatternSuggestedFabricUpdateInput, PatternSuggestedFabricUncheckedUpdateInput>
    /**
     * Choose, which PatternSuggestedFabric to update.
     */
    where: PatternSuggestedFabricWhereUniqueInput
  }

  /**
   * PatternSuggestedFabric updateMany
   */
  export type PatternSuggestedFabricUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatternSuggestedFabrics.
     */
    data: XOR<PatternSuggestedFabricUpdateManyMutationInput, PatternSuggestedFabricUncheckedUpdateManyInput>
    /**
     * Filter which PatternSuggestedFabrics to update
     */
    where?: PatternSuggestedFabricWhereInput
  }

  /**
   * PatternSuggestedFabric upsert
   */
  export type PatternSuggestedFabricUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternSuggestedFabric
     */
    select?: PatternSuggestedFabricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternSuggestedFabricInclude<ExtArgs> | null
    /**
     * The filter to search for the PatternSuggestedFabric to update in case it exists.
     */
    where: PatternSuggestedFabricWhereUniqueInput
    /**
     * In case the PatternSuggestedFabric found by the `where` argument doesn't exist, create a new PatternSuggestedFabric with this data.
     */
    create: XOR<PatternSuggestedFabricCreateInput, PatternSuggestedFabricUncheckedCreateInput>
    /**
     * In case the PatternSuggestedFabric was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatternSuggestedFabricUpdateInput, PatternSuggestedFabricUncheckedUpdateInput>
  }

  /**
   * PatternSuggestedFabric delete
   */
  export type PatternSuggestedFabricDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternSuggestedFabric
     */
    select?: PatternSuggestedFabricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternSuggestedFabricInclude<ExtArgs> | null
    /**
     * Filter which PatternSuggestedFabric to delete.
     */
    where: PatternSuggestedFabricWhereUniqueInput
  }

  /**
   * PatternSuggestedFabric deleteMany
   */
  export type PatternSuggestedFabricDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatternSuggestedFabrics to delete
     */
    where?: PatternSuggestedFabricWhereInput
  }

  /**
   * PatternSuggestedFabric without action
   */
  export type PatternSuggestedFabricDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternSuggestedFabric
     */
    select?: PatternSuggestedFabricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternSuggestedFabricInclude<ExtArgs> | null
  }


  /**
   * Model SuggestedFabric
   */

  export type AggregateSuggestedFabric = {
    _count: SuggestedFabricCountAggregateOutputType | null
    _avg: SuggestedFabricAvgAggregateOutputType | null
    _sum: SuggestedFabricSumAggregateOutputType | null
    _min: SuggestedFabricMinAggregateOutputType | null
    _max: SuggestedFabricMaxAggregateOutputType | null
  }

  export type SuggestedFabricAvgAggregateOutputType = {
    id: number | null
  }

  export type SuggestedFabricSumAggregateOutputType = {
    id: number | null
  }

  export type SuggestedFabricMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type SuggestedFabricMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type SuggestedFabricCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type SuggestedFabricAvgAggregateInputType = {
    id?: true
  }

  export type SuggestedFabricSumAggregateInputType = {
    id?: true
  }

  export type SuggestedFabricMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type SuggestedFabricMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type SuggestedFabricCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type SuggestedFabricAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SuggestedFabric to aggregate.
     */
    where?: SuggestedFabricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuggestedFabrics to fetch.
     */
    orderBy?: SuggestedFabricOrderByWithRelationInput | SuggestedFabricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SuggestedFabricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuggestedFabrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuggestedFabrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SuggestedFabrics
    **/
    _count?: true | SuggestedFabricCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SuggestedFabricAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SuggestedFabricSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SuggestedFabricMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SuggestedFabricMaxAggregateInputType
  }

  export type GetSuggestedFabricAggregateType<T extends SuggestedFabricAggregateArgs> = {
        [P in keyof T & keyof AggregateSuggestedFabric]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSuggestedFabric[P]>
      : GetScalarType<T[P], AggregateSuggestedFabric[P]>
  }




  export type SuggestedFabricGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SuggestedFabricWhereInput
    orderBy?: SuggestedFabricOrderByWithAggregationInput | SuggestedFabricOrderByWithAggregationInput[]
    by: SuggestedFabricScalarFieldEnum[] | SuggestedFabricScalarFieldEnum
    having?: SuggestedFabricScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SuggestedFabricCountAggregateInputType | true
    _avg?: SuggestedFabricAvgAggregateInputType
    _sum?: SuggestedFabricSumAggregateInputType
    _min?: SuggestedFabricMinAggregateInputType
    _max?: SuggestedFabricMaxAggregateInputType
  }

  export type SuggestedFabricGroupByOutputType = {
    id: number
    name: string
    _count: SuggestedFabricCountAggregateOutputType | null
    _avg: SuggestedFabricAvgAggregateOutputType | null
    _sum: SuggestedFabricSumAggregateOutputType | null
    _min: SuggestedFabricMinAggregateOutputType | null
    _max: SuggestedFabricMaxAggregateOutputType | null
  }

  type GetSuggestedFabricGroupByPayload<T extends SuggestedFabricGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SuggestedFabricGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SuggestedFabricGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SuggestedFabricGroupByOutputType[P]>
            : GetScalarType<T[P], SuggestedFabricGroupByOutputType[P]>
        }
      >
    >


  export type SuggestedFabricSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    PatternSuggestedFabric?: boolean | SuggestedFabric$PatternSuggestedFabricArgs<ExtArgs>
    _count?: boolean | SuggestedFabricCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["suggestedFabric"]>

  export type SuggestedFabricSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["suggestedFabric"]>

  export type SuggestedFabricSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type SuggestedFabricInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PatternSuggestedFabric?: boolean | SuggestedFabric$PatternSuggestedFabricArgs<ExtArgs>
    _count?: boolean | SuggestedFabricCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SuggestedFabricIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SuggestedFabricPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SuggestedFabric"
    objects: {
      PatternSuggestedFabric: Prisma.$PatternSuggestedFabricPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["suggestedFabric"]>
    composites: {}
  }

  type SuggestedFabricGetPayload<S extends boolean | null | undefined | SuggestedFabricDefaultArgs> = $Result.GetResult<Prisma.$SuggestedFabricPayload, S>

  type SuggestedFabricCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SuggestedFabricFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SuggestedFabricCountAggregateInputType | true
    }

  export interface SuggestedFabricDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SuggestedFabric'], meta: { name: 'SuggestedFabric' } }
    /**
     * Find zero or one SuggestedFabric that matches the filter.
     * @param {SuggestedFabricFindUniqueArgs} args - Arguments to find a SuggestedFabric
     * @example
     * // Get one SuggestedFabric
     * const suggestedFabric = await prisma.suggestedFabric.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SuggestedFabricFindUniqueArgs>(args: SelectSubset<T, SuggestedFabricFindUniqueArgs<ExtArgs>>): Prisma__SuggestedFabricClient<$Result.GetResult<Prisma.$SuggestedFabricPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SuggestedFabric that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SuggestedFabricFindUniqueOrThrowArgs} args - Arguments to find a SuggestedFabric
     * @example
     * // Get one SuggestedFabric
     * const suggestedFabric = await prisma.suggestedFabric.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SuggestedFabricFindUniqueOrThrowArgs>(args: SelectSubset<T, SuggestedFabricFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SuggestedFabricClient<$Result.GetResult<Prisma.$SuggestedFabricPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SuggestedFabric that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuggestedFabricFindFirstArgs} args - Arguments to find a SuggestedFabric
     * @example
     * // Get one SuggestedFabric
     * const suggestedFabric = await prisma.suggestedFabric.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SuggestedFabricFindFirstArgs>(args?: SelectSubset<T, SuggestedFabricFindFirstArgs<ExtArgs>>): Prisma__SuggestedFabricClient<$Result.GetResult<Prisma.$SuggestedFabricPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SuggestedFabric that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuggestedFabricFindFirstOrThrowArgs} args - Arguments to find a SuggestedFabric
     * @example
     * // Get one SuggestedFabric
     * const suggestedFabric = await prisma.suggestedFabric.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SuggestedFabricFindFirstOrThrowArgs>(args?: SelectSubset<T, SuggestedFabricFindFirstOrThrowArgs<ExtArgs>>): Prisma__SuggestedFabricClient<$Result.GetResult<Prisma.$SuggestedFabricPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SuggestedFabrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuggestedFabricFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SuggestedFabrics
     * const suggestedFabrics = await prisma.suggestedFabric.findMany()
     * 
     * // Get first 10 SuggestedFabrics
     * const suggestedFabrics = await prisma.suggestedFabric.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const suggestedFabricWithIdOnly = await prisma.suggestedFabric.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SuggestedFabricFindManyArgs>(args?: SelectSubset<T, SuggestedFabricFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuggestedFabricPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SuggestedFabric.
     * @param {SuggestedFabricCreateArgs} args - Arguments to create a SuggestedFabric.
     * @example
     * // Create one SuggestedFabric
     * const SuggestedFabric = await prisma.suggestedFabric.create({
     *   data: {
     *     // ... data to create a SuggestedFabric
     *   }
     * })
     * 
     */
    create<T extends SuggestedFabricCreateArgs>(args: SelectSubset<T, SuggestedFabricCreateArgs<ExtArgs>>): Prisma__SuggestedFabricClient<$Result.GetResult<Prisma.$SuggestedFabricPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SuggestedFabrics.
     * @param {SuggestedFabricCreateManyArgs} args - Arguments to create many SuggestedFabrics.
     * @example
     * // Create many SuggestedFabrics
     * const suggestedFabric = await prisma.suggestedFabric.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SuggestedFabricCreateManyArgs>(args?: SelectSubset<T, SuggestedFabricCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SuggestedFabrics and returns the data saved in the database.
     * @param {SuggestedFabricCreateManyAndReturnArgs} args - Arguments to create many SuggestedFabrics.
     * @example
     * // Create many SuggestedFabrics
     * const suggestedFabric = await prisma.suggestedFabric.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SuggestedFabrics and only return the `id`
     * const suggestedFabricWithIdOnly = await prisma.suggestedFabric.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SuggestedFabricCreateManyAndReturnArgs>(args?: SelectSubset<T, SuggestedFabricCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuggestedFabricPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SuggestedFabric.
     * @param {SuggestedFabricDeleteArgs} args - Arguments to delete one SuggestedFabric.
     * @example
     * // Delete one SuggestedFabric
     * const SuggestedFabric = await prisma.suggestedFabric.delete({
     *   where: {
     *     // ... filter to delete one SuggestedFabric
     *   }
     * })
     * 
     */
    delete<T extends SuggestedFabricDeleteArgs>(args: SelectSubset<T, SuggestedFabricDeleteArgs<ExtArgs>>): Prisma__SuggestedFabricClient<$Result.GetResult<Prisma.$SuggestedFabricPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SuggestedFabric.
     * @param {SuggestedFabricUpdateArgs} args - Arguments to update one SuggestedFabric.
     * @example
     * // Update one SuggestedFabric
     * const suggestedFabric = await prisma.suggestedFabric.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SuggestedFabricUpdateArgs>(args: SelectSubset<T, SuggestedFabricUpdateArgs<ExtArgs>>): Prisma__SuggestedFabricClient<$Result.GetResult<Prisma.$SuggestedFabricPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SuggestedFabrics.
     * @param {SuggestedFabricDeleteManyArgs} args - Arguments to filter SuggestedFabrics to delete.
     * @example
     * // Delete a few SuggestedFabrics
     * const { count } = await prisma.suggestedFabric.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SuggestedFabricDeleteManyArgs>(args?: SelectSubset<T, SuggestedFabricDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SuggestedFabrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuggestedFabricUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SuggestedFabrics
     * const suggestedFabric = await prisma.suggestedFabric.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SuggestedFabricUpdateManyArgs>(args: SelectSubset<T, SuggestedFabricUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SuggestedFabric.
     * @param {SuggestedFabricUpsertArgs} args - Arguments to update or create a SuggestedFabric.
     * @example
     * // Update or create a SuggestedFabric
     * const suggestedFabric = await prisma.suggestedFabric.upsert({
     *   create: {
     *     // ... data to create a SuggestedFabric
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SuggestedFabric we want to update
     *   }
     * })
     */
    upsert<T extends SuggestedFabricUpsertArgs>(args: SelectSubset<T, SuggestedFabricUpsertArgs<ExtArgs>>): Prisma__SuggestedFabricClient<$Result.GetResult<Prisma.$SuggestedFabricPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SuggestedFabrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuggestedFabricCountArgs} args - Arguments to filter SuggestedFabrics to count.
     * @example
     * // Count the number of SuggestedFabrics
     * const count = await prisma.suggestedFabric.count({
     *   where: {
     *     // ... the filter for the SuggestedFabrics we want to count
     *   }
     * })
    **/
    count<T extends SuggestedFabricCountArgs>(
      args?: Subset<T, SuggestedFabricCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SuggestedFabricCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SuggestedFabric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuggestedFabricAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SuggestedFabricAggregateArgs>(args: Subset<T, SuggestedFabricAggregateArgs>): Prisma.PrismaPromise<GetSuggestedFabricAggregateType<T>>

    /**
     * Group by SuggestedFabric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuggestedFabricGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SuggestedFabricGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SuggestedFabricGroupByArgs['orderBy'] }
        : { orderBy?: SuggestedFabricGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SuggestedFabricGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSuggestedFabricGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SuggestedFabric model
   */
  readonly fields: SuggestedFabricFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SuggestedFabric.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SuggestedFabricClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    PatternSuggestedFabric<T extends SuggestedFabric$PatternSuggestedFabricArgs<ExtArgs> = {}>(args?: Subset<T, SuggestedFabric$PatternSuggestedFabricArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatternSuggestedFabricPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SuggestedFabric model
   */ 
  interface SuggestedFabricFieldRefs {
    readonly id: FieldRef<"SuggestedFabric", 'Int'>
    readonly name: FieldRef<"SuggestedFabric", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SuggestedFabric findUnique
   */
  export type SuggestedFabricFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestedFabric
     */
    select?: SuggestedFabricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestedFabricInclude<ExtArgs> | null
    /**
     * Filter, which SuggestedFabric to fetch.
     */
    where: SuggestedFabricWhereUniqueInput
  }

  /**
   * SuggestedFabric findUniqueOrThrow
   */
  export type SuggestedFabricFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestedFabric
     */
    select?: SuggestedFabricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestedFabricInclude<ExtArgs> | null
    /**
     * Filter, which SuggestedFabric to fetch.
     */
    where: SuggestedFabricWhereUniqueInput
  }

  /**
   * SuggestedFabric findFirst
   */
  export type SuggestedFabricFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestedFabric
     */
    select?: SuggestedFabricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestedFabricInclude<ExtArgs> | null
    /**
     * Filter, which SuggestedFabric to fetch.
     */
    where?: SuggestedFabricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuggestedFabrics to fetch.
     */
    orderBy?: SuggestedFabricOrderByWithRelationInput | SuggestedFabricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SuggestedFabrics.
     */
    cursor?: SuggestedFabricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuggestedFabrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuggestedFabrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SuggestedFabrics.
     */
    distinct?: SuggestedFabricScalarFieldEnum | SuggestedFabricScalarFieldEnum[]
  }

  /**
   * SuggestedFabric findFirstOrThrow
   */
  export type SuggestedFabricFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestedFabric
     */
    select?: SuggestedFabricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestedFabricInclude<ExtArgs> | null
    /**
     * Filter, which SuggestedFabric to fetch.
     */
    where?: SuggestedFabricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuggestedFabrics to fetch.
     */
    orderBy?: SuggestedFabricOrderByWithRelationInput | SuggestedFabricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SuggestedFabrics.
     */
    cursor?: SuggestedFabricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuggestedFabrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuggestedFabrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SuggestedFabrics.
     */
    distinct?: SuggestedFabricScalarFieldEnum | SuggestedFabricScalarFieldEnum[]
  }

  /**
   * SuggestedFabric findMany
   */
  export type SuggestedFabricFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestedFabric
     */
    select?: SuggestedFabricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestedFabricInclude<ExtArgs> | null
    /**
     * Filter, which SuggestedFabrics to fetch.
     */
    where?: SuggestedFabricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuggestedFabrics to fetch.
     */
    orderBy?: SuggestedFabricOrderByWithRelationInput | SuggestedFabricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SuggestedFabrics.
     */
    cursor?: SuggestedFabricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuggestedFabrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuggestedFabrics.
     */
    skip?: number
    distinct?: SuggestedFabricScalarFieldEnum | SuggestedFabricScalarFieldEnum[]
  }

  /**
   * SuggestedFabric create
   */
  export type SuggestedFabricCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestedFabric
     */
    select?: SuggestedFabricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestedFabricInclude<ExtArgs> | null
    /**
     * The data needed to create a SuggestedFabric.
     */
    data: XOR<SuggestedFabricCreateInput, SuggestedFabricUncheckedCreateInput>
  }

  /**
   * SuggestedFabric createMany
   */
  export type SuggestedFabricCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SuggestedFabrics.
     */
    data: SuggestedFabricCreateManyInput | SuggestedFabricCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SuggestedFabric createManyAndReturn
   */
  export type SuggestedFabricCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestedFabric
     */
    select?: SuggestedFabricSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SuggestedFabrics.
     */
    data: SuggestedFabricCreateManyInput | SuggestedFabricCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SuggestedFabric update
   */
  export type SuggestedFabricUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestedFabric
     */
    select?: SuggestedFabricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestedFabricInclude<ExtArgs> | null
    /**
     * The data needed to update a SuggestedFabric.
     */
    data: XOR<SuggestedFabricUpdateInput, SuggestedFabricUncheckedUpdateInput>
    /**
     * Choose, which SuggestedFabric to update.
     */
    where: SuggestedFabricWhereUniqueInput
  }

  /**
   * SuggestedFabric updateMany
   */
  export type SuggestedFabricUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SuggestedFabrics.
     */
    data: XOR<SuggestedFabricUpdateManyMutationInput, SuggestedFabricUncheckedUpdateManyInput>
    /**
     * Filter which SuggestedFabrics to update
     */
    where?: SuggestedFabricWhereInput
  }

  /**
   * SuggestedFabric upsert
   */
  export type SuggestedFabricUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestedFabric
     */
    select?: SuggestedFabricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestedFabricInclude<ExtArgs> | null
    /**
     * The filter to search for the SuggestedFabric to update in case it exists.
     */
    where: SuggestedFabricWhereUniqueInput
    /**
     * In case the SuggestedFabric found by the `where` argument doesn't exist, create a new SuggestedFabric with this data.
     */
    create: XOR<SuggestedFabricCreateInput, SuggestedFabricUncheckedCreateInput>
    /**
     * In case the SuggestedFabric was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SuggestedFabricUpdateInput, SuggestedFabricUncheckedUpdateInput>
  }

  /**
   * SuggestedFabric delete
   */
  export type SuggestedFabricDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestedFabric
     */
    select?: SuggestedFabricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestedFabricInclude<ExtArgs> | null
    /**
     * Filter which SuggestedFabric to delete.
     */
    where: SuggestedFabricWhereUniqueInput
  }

  /**
   * SuggestedFabric deleteMany
   */
  export type SuggestedFabricDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SuggestedFabrics to delete
     */
    where?: SuggestedFabricWhereInput
  }

  /**
   * SuggestedFabric.PatternSuggestedFabric
   */
  export type SuggestedFabric$PatternSuggestedFabricArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatternSuggestedFabric
     */
    select?: PatternSuggestedFabricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatternSuggestedFabricInclude<ExtArgs> | null
    where?: PatternSuggestedFabricWhereInput
    orderBy?: PatternSuggestedFabricOrderByWithRelationInput | PatternSuggestedFabricOrderByWithRelationInput[]
    cursor?: PatternSuggestedFabricWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatternSuggestedFabricScalarFieldEnum | PatternSuggestedFabricScalarFieldEnum[]
  }

  /**
   * SuggestedFabric without action
   */
  export type SuggestedFabricDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestedFabric
     */
    select?: SuggestedFabricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestedFabricInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AttributeScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type AttributeScalarFieldEnum = (typeof AttributeScalarFieldEnum)[keyof typeof AttributeScalarFieldEnum]


  export const AudienceScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type AudienceScalarFieldEnum = (typeof AudienceScalarFieldEnum)[keyof typeof AudienceScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const DesignerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    url: 'url',
    logo_url: 'logo_url',
    email: 'email',
    address: 'address',
    facebook: 'facebook',
    instagram: 'instagram',
    pinterest: 'pinterest',
    youtube: 'youtube'
  };

  export type DesignerScalarFieldEnum = (typeof DesignerScalarFieldEnum)[keyof typeof DesignerScalarFieldEnum]


  export const FabricTypeScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type FabricTypeScalarFieldEnum = (typeof FabricTypeScalarFieldEnum)[keyof typeof FabricTypeScalarFieldEnum]


  export const FormatScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type FormatScalarFieldEnum = (typeof FormatScalarFieldEnum)[keyof typeof FormatScalarFieldEnum]


  export const PatternScalarFieldEnum: {
    id: 'id',
    name: 'name',
    designer_id: 'designer_id',
    url: 'url',
    thumbnail_url: 'thumbnail_url',
    yardage: 'yardage',
    sizes: 'sizes',
    language: 'language'
  };

  export type PatternScalarFieldEnum = (typeof PatternScalarFieldEnum)[keyof typeof PatternScalarFieldEnum]


  export const PatternAttributeScalarFieldEnum: {
    id: 'id',
    pattern_id: 'pattern_id',
    attribute_id: 'attribute_id'
  };

  export type PatternAttributeScalarFieldEnum = (typeof PatternAttributeScalarFieldEnum)[keyof typeof PatternAttributeScalarFieldEnum]


  export const PatternAudienceScalarFieldEnum: {
    id: 'id',
    pattern_id: 'pattern_id',
    audience_id: 'audience_id'
  };

  export type PatternAudienceScalarFieldEnum = (typeof PatternAudienceScalarFieldEnum)[keyof typeof PatternAudienceScalarFieldEnum]


  export const PatternCategoryScalarFieldEnum: {
    id: 'id',
    pattern_id: 'pattern_id',
    category_id: 'category_id'
  };

  export type PatternCategoryScalarFieldEnum = (typeof PatternCategoryScalarFieldEnum)[keyof typeof PatternCategoryScalarFieldEnum]


  export const PatternFabricTypeScalarFieldEnum: {
    id: 'id',
    pattern_id: 'pattern_id',
    fabrictype_id: 'fabrictype_id'
  };

  export type PatternFabricTypeScalarFieldEnum = (typeof PatternFabricTypeScalarFieldEnum)[keyof typeof PatternFabricTypeScalarFieldEnum]


  export const PatternSuggestedFabricScalarFieldEnum: {
    id: 'id',
    pattern_id: 'pattern_id',
    suggestedfabric_id: 'suggestedfabric_id'
  };

  export type PatternSuggestedFabricScalarFieldEnum = (typeof PatternSuggestedFabricScalarFieldEnum)[keyof typeof PatternSuggestedFabricScalarFieldEnum]


  export const SuggestedFabricScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type SuggestedFabricScalarFieldEnum = (typeof SuggestedFabricScalarFieldEnum)[keyof typeof SuggestedFabricScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AttributeWhereInput = {
    AND?: AttributeWhereInput | AttributeWhereInput[]
    OR?: AttributeWhereInput[]
    NOT?: AttributeWhereInput | AttributeWhereInput[]
    id?: IntFilter<"Attribute"> | number
    name?: StringFilter<"Attribute"> | string
    PatternAttribute?: PatternAttributeListRelationFilter
  }

  export type AttributeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    PatternAttribute?: PatternAttributeOrderByRelationAggregateInput
  }

  export type AttributeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AttributeWhereInput | AttributeWhereInput[]
    OR?: AttributeWhereInput[]
    NOT?: AttributeWhereInput | AttributeWhereInput[]
    name?: StringFilter<"Attribute"> | string
    PatternAttribute?: PatternAttributeListRelationFilter
  }, "id">

  export type AttributeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: AttributeCountOrderByAggregateInput
    _avg?: AttributeAvgOrderByAggregateInput
    _max?: AttributeMaxOrderByAggregateInput
    _min?: AttributeMinOrderByAggregateInput
    _sum?: AttributeSumOrderByAggregateInput
  }

  export type AttributeScalarWhereWithAggregatesInput = {
    AND?: AttributeScalarWhereWithAggregatesInput | AttributeScalarWhereWithAggregatesInput[]
    OR?: AttributeScalarWhereWithAggregatesInput[]
    NOT?: AttributeScalarWhereWithAggregatesInput | AttributeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Attribute"> | number
    name?: StringWithAggregatesFilter<"Attribute"> | string
  }

  export type AudienceWhereInput = {
    AND?: AudienceWhereInput | AudienceWhereInput[]
    OR?: AudienceWhereInput[]
    NOT?: AudienceWhereInput | AudienceWhereInput[]
    id?: IntFilter<"Audience"> | number
    name?: StringFilter<"Audience"> | string
    PatternAudience?: PatternAudienceListRelationFilter
  }

  export type AudienceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    PatternAudience?: PatternAudienceOrderByRelationAggregateInput
  }

  export type AudienceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AudienceWhereInput | AudienceWhereInput[]
    OR?: AudienceWhereInput[]
    NOT?: AudienceWhereInput | AudienceWhereInput[]
    name?: StringFilter<"Audience"> | string
    PatternAudience?: PatternAudienceListRelationFilter
  }, "id">

  export type AudienceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: AudienceCountOrderByAggregateInput
    _avg?: AudienceAvgOrderByAggregateInput
    _max?: AudienceMaxOrderByAggregateInput
    _min?: AudienceMinOrderByAggregateInput
    _sum?: AudienceSumOrderByAggregateInput
  }

  export type AudienceScalarWhereWithAggregatesInput = {
    AND?: AudienceScalarWhereWithAggregatesInput | AudienceScalarWhereWithAggregatesInput[]
    OR?: AudienceScalarWhereWithAggregatesInput[]
    NOT?: AudienceScalarWhereWithAggregatesInput | AudienceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Audience"> | number
    name?: StringWithAggregatesFilter<"Audience"> | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    PatternCategory?: PatternCategoryListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    PatternCategory?: PatternCategoryOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    name?: StringFilter<"Category"> | string
    PatternCategory?: PatternCategoryListRelationFilter
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    name?: StringWithAggregatesFilter<"Category"> | string
  }

  export type DesignerWhereInput = {
    AND?: DesignerWhereInput | DesignerWhereInput[]
    OR?: DesignerWhereInput[]
    NOT?: DesignerWhereInput | DesignerWhereInput[]
    id?: IntFilter<"Designer"> | number
    name?: StringFilter<"Designer"> | string
    url?: StringFilter<"Designer"> | string
    logo_url?: StringNullableFilter<"Designer"> | string | null
    email?: StringNullableFilter<"Designer"> | string | null
    address?: StringNullableFilter<"Designer"> | string | null
    facebook?: StringNullableFilter<"Designer"> | string | null
    instagram?: StringNullableFilter<"Designer"> | string | null
    pinterest?: StringNullableFilter<"Designer"> | string | null
    youtube?: StringNullableFilter<"Designer"> | string | null
    patterns?: PatternListRelationFilter
  }

  export type DesignerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    logo_url?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    facebook?: SortOrderInput | SortOrder
    instagram?: SortOrderInput | SortOrder
    pinterest?: SortOrderInput | SortOrder
    youtube?: SortOrderInput | SortOrder
    patterns?: PatternOrderByRelationAggregateInput
  }

  export type DesignerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DesignerWhereInput | DesignerWhereInput[]
    OR?: DesignerWhereInput[]
    NOT?: DesignerWhereInput | DesignerWhereInput[]
    name?: StringFilter<"Designer"> | string
    url?: StringFilter<"Designer"> | string
    logo_url?: StringNullableFilter<"Designer"> | string | null
    email?: StringNullableFilter<"Designer"> | string | null
    address?: StringNullableFilter<"Designer"> | string | null
    facebook?: StringNullableFilter<"Designer"> | string | null
    instagram?: StringNullableFilter<"Designer"> | string | null
    pinterest?: StringNullableFilter<"Designer"> | string | null
    youtube?: StringNullableFilter<"Designer"> | string | null
    patterns?: PatternListRelationFilter
  }, "id">

  export type DesignerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    logo_url?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    facebook?: SortOrderInput | SortOrder
    instagram?: SortOrderInput | SortOrder
    pinterest?: SortOrderInput | SortOrder
    youtube?: SortOrderInput | SortOrder
    _count?: DesignerCountOrderByAggregateInput
    _avg?: DesignerAvgOrderByAggregateInput
    _max?: DesignerMaxOrderByAggregateInput
    _min?: DesignerMinOrderByAggregateInput
    _sum?: DesignerSumOrderByAggregateInput
  }

  export type DesignerScalarWhereWithAggregatesInput = {
    AND?: DesignerScalarWhereWithAggregatesInput | DesignerScalarWhereWithAggregatesInput[]
    OR?: DesignerScalarWhereWithAggregatesInput[]
    NOT?: DesignerScalarWhereWithAggregatesInput | DesignerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Designer"> | number
    name?: StringWithAggregatesFilter<"Designer"> | string
    url?: StringWithAggregatesFilter<"Designer"> | string
    logo_url?: StringNullableWithAggregatesFilter<"Designer"> | string | null
    email?: StringNullableWithAggregatesFilter<"Designer"> | string | null
    address?: StringNullableWithAggregatesFilter<"Designer"> | string | null
    facebook?: StringNullableWithAggregatesFilter<"Designer"> | string | null
    instagram?: StringNullableWithAggregatesFilter<"Designer"> | string | null
    pinterest?: StringNullableWithAggregatesFilter<"Designer"> | string | null
    youtube?: StringNullableWithAggregatesFilter<"Designer"> | string | null
  }

  export type FabricTypeWhereInput = {
    AND?: FabricTypeWhereInput | FabricTypeWhereInput[]
    OR?: FabricTypeWhereInput[]
    NOT?: FabricTypeWhereInput | FabricTypeWhereInput[]
    id?: IntFilter<"FabricType"> | number
    name?: StringFilter<"FabricType"> | string
    PatternFabricType?: PatternFabricTypeListRelationFilter
  }

  export type FabricTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    PatternFabricType?: PatternFabricTypeOrderByRelationAggregateInput
  }

  export type FabricTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FabricTypeWhereInput | FabricTypeWhereInput[]
    OR?: FabricTypeWhereInput[]
    NOT?: FabricTypeWhereInput | FabricTypeWhereInput[]
    name?: StringFilter<"FabricType"> | string
    PatternFabricType?: PatternFabricTypeListRelationFilter
  }, "id">

  export type FabricTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: FabricTypeCountOrderByAggregateInput
    _avg?: FabricTypeAvgOrderByAggregateInput
    _max?: FabricTypeMaxOrderByAggregateInput
    _min?: FabricTypeMinOrderByAggregateInput
    _sum?: FabricTypeSumOrderByAggregateInput
  }

  export type FabricTypeScalarWhereWithAggregatesInput = {
    AND?: FabricTypeScalarWhereWithAggregatesInput | FabricTypeScalarWhereWithAggregatesInput[]
    OR?: FabricTypeScalarWhereWithAggregatesInput[]
    NOT?: FabricTypeScalarWhereWithAggregatesInput | FabricTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FabricType"> | number
    name?: StringWithAggregatesFilter<"FabricType"> | string
  }

  export type FormatWhereInput = {
    AND?: FormatWhereInput | FormatWhereInput[]
    OR?: FormatWhereInput[]
    NOT?: FormatWhereInput | FormatWhereInput[]
    id?: IntFilter<"Format"> | number
    name?: StringFilter<"Format"> | string
  }

  export type FormatOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type FormatWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FormatWhereInput | FormatWhereInput[]
    OR?: FormatWhereInput[]
    NOT?: FormatWhereInput | FormatWhereInput[]
    name?: StringFilter<"Format"> | string
  }, "id">

  export type FormatOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: FormatCountOrderByAggregateInput
    _avg?: FormatAvgOrderByAggregateInput
    _max?: FormatMaxOrderByAggregateInput
    _min?: FormatMinOrderByAggregateInput
    _sum?: FormatSumOrderByAggregateInput
  }

  export type FormatScalarWhereWithAggregatesInput = {
    AND?: FormatScalarWhereWithAggregatesInput | FormatScalarWhereWithAggregatesInput[]
    OR?: FormatScalarWhereWithAggregatesInput[]
    NOT?: FormatScalarWhereWithAggregatesInput | FormatScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Format"> | number
    name?: StringWithAggregatesFilter<"Format"> | string
  }

  export type PatternWhereInput = {
    AND?: PatternWhereInput | PatternWhereInput[]
    OR?: PatternWhereInput[]
    NOT?: PatternWhereInput | PatternWhereInput[]
    id?: IntFilter<"Pattern"> | number
    name?: StringFilter<"Pattern"> | string
    designer_id?: IntFilter<"Pattern"> | number
    url?: StringFilter<"Pattern"> | string
    thumbnail_url?: StringNullableFilter<"Pattern"> | string | null
    yardage?: StringNullableFilter<"Pattern"> | string | null
    sizes?: StringNullableFilter<"Pattern"> | string | null
    language?: StringNullableFilter<"Pattern"> | string | null
    designer?: XOR<DesignerRelationFilter, DesignerWhereInput>
    PatternAttribute?: PatternAttributeListRelationFilter
    PatternAudience?: PatternAudienceListRelationFilter
    PatternCategory?: PatternCategoryListRelationFilter
    PatternFabricType?: PatternFabricTypeListRelationFilter
    PatternSuggestedFabric?: PatternSuggestedFabricListRelationFilter
  }

  export type PatternOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    designer_id?: SortOrder
    url?: SortOrder
    thumbnail_url?: SortOrderInput | SortOrder
    yardage?: SortOrderInput | SortOrder
    sizes?: SortOrderInput | SortOrder
    language?: SortOrderInput | SortOrder
    designer?: DesignerOrderByWithRelationInput
    PatternAttribute?: PatternAttributeOrderByRelationAggregateInput
    PatternAudience?: PatternAudienceOrderByRelationAggregateInput
    PatternCategory?: PatternCategoryOrderByRelationAggregateInput
    PatternFabricType?: PatternFabricTypeOrderByRelationAggregateInput
    PatternSuggestedFabric?: PatternSuggestedFabricOrderByRelationAggregateInput
  }

  export type PatternWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PatternWhereInput | PatternWhereInput[]
    OR?: PatternWhereInput[]
    NOT?: PatternWhereInput | PatternWhereInput[]
    name?: StringFilter<"Pattern"> | string
    designer_id?: IntFilter<"Pattern"> | number
    url?: StringFilter<"Pattern"> | string
    thumbnail_url?: StringNullableFilter<"Pattern"> | string | null
    yardage?: StringNullableFilter<"Pattern"> | string | null
    sizes?: StringNullableFilter<"Pattern"> | string | null
    language?: StringNullableFilter<"Pattern"> | string | null
    designer?: XOR<DesignerRelationFilter, DesignerWhereInput>
    PatternAttribute?: PatternAttributeListRelationFilter
    PatternAudience?: PatternAudienceListRelationFilter
    PatternCategory?: PatternCategoryListRelationFilter
    PatternFabricType?: PatternFabricTypeListRelationFilter
    PatternSuggestedFabric?: PatternSuggestedFabricListRelationFilter
  }, "id">

  export type PatternOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    designer_id?: SortOrder
    url?: SortOrder
    thumbnail_url?: SortOrderInput | SortOrder
    yardage?: SortOrderInput | SortOrder
    sizes?: SortOrderInput | SortOrder
    language?: SortOrderInput | SortOrder
    _count?: PatternCountOrderByAggregateInput
    _avg?: PatternAvgOrderByAggregateInput
    _max?: PatternMaxOrderByAggregateInput
    _min?: PatternMinOrderByAggregateInput
    _sum?: PatternSumOrderByAggregateInput
  }

  export type PatternScalarWhereWithAggregatesInput = {
    AND?: PatternScalarWhereWithAggregatesInput | PatternScalarWhereWithAggregatesInput[]
    OR?: PatternScalarWhereWithAggregatesInput[]
    NOT?: PatternScalarWhereWithAggregatesInput | PatternScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Pattern"> | number
    name?: StringWithAggregatesFilter<"Pattern"> | string
    designer_id?: IntWithAggregatesFilter<"Pattern"> | number
    url?: StringWithAggregatesFilter<"Pattern"> | string
    thumbnail_url?: StringNullableWithAggregatesFilter<"Pattern"> | string | null
    yardage?: StringNullableWithAggregatesFilter<"Pattern"> | string | null
    sizes?: StringNullableWithAggregatesFilter<"Pattern"> | string | null
    language?: StringNullableWithAggregatesFilter<"Pattern"> | string | null
  }

  export type PatternAttributeWhereInput = {
    AND?: PatternAttributeWhereInput | PatternAttributeWhereInput[]
    OR?: PatternAttributeWhereInput[]
    NOT?: PatternAttributeWhereInput | PatternAttributeWhereInput[]
    id?: IntFilter<"PatternAttribute"> | number
    pattern_id?: IntFilter<"PatternAttribute"> | number
    attribute_id?: IntFilter<"PatternAttribute"> | number
    pattern?: XOR<PatternRelationFilter, PatternWhereInput>
    attribute?: XOR<AttributeRelationFilter, AttributeWhereInput>
  }

  export type PatternAttributeOrderByWithRelationInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    attribute_id?: SortOrder
    pattern?: PatternOrderByWithRelationInput
    attribute?: AttributeOrderByWithRelationInput
  }

  export type PatternAttributeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PatternAttributeWhereInput | PatternAttributeWhereInput[]
    OR?: PatternAttributeWhereInput[]
    NOT?: PatternAttributeWhereInput | PatternAttributeWhereInput[]
    pattern_id?: IntFilter<"PatternAttribute"> | number
    attribute_id?: IntFilter<"PatternAttribute"> | number
    pattern?: XOR<PatternRelationFilter, PatternWhereInput>
    attribute?: XOR<AttributeRelationFilter, AttributeWhereInput>
  }, "id">

  export type PatternAttributeOrderByWithAggregationInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    attribute_id?: SortOrder
    _count?: PatternAttributeCountOrderByAggregateInput
    _avg?: PatternAttributeAvgOrderByAggregateInput
    _max?: PatternAttributeMaxOrderByAggregateInput
    _min?: PatternAttributeMinOrderByAggregateInput
    _sum?: PatternAttributeSumOrderByAggregateInput
  }

  export type PatternAttributeScalarWhereWithAggregatesInput = {
    AND?: PatternAttributeScalarWhereWithAggregatesInput | PatternAttributeScalarWhereWithAggregatesInput[]
    OR?: PatternAttributeScalarWhereWithAggregatesInput[]
    NOT?: PatternAttributeScalarWhereWithAggregatesInput | PatternAttributeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PatternAttribute"> | number
    pattern_id?: IntWithAggregatesFilter<"PatternAttribute"> | number
    attribute_id?: IntWithAggregatesFilter<"PatternAttribute"> | number
  }

  export type PatternAudienceWhereInput = {
    AND?: PatternAudienceWhereInput | PatternAudienceWhereInput[]
    OR?: PatternAudienceWhereInput[]
    NOT?: PatternAudienceWhereInput | PatternAudienceWhereInput[]
    id?: IntFilter<"PatternAudience"> | number
    pattern_id?: IntFilter<"PatternAudience"> | number
    audience_id?: IntFilter<"PatternAudience"> | number
    pattern?: XOR<PatternRelationFilter, PatternWhereInput>
    audience?: XOR<AudienceRelationFilter, AudienceWhereInput>
  }

  export type PatternAudienceOrderByWithRelationInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    audience_id?: SortOrder
    pattern?: PatternOrderByWithRelationInput
    audience?: AudienceOrderByWithRelationInput
  }

  export type PatternAudienceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PatternAudienceWhereInput | PatternAudienceWhereInput[]
    OR?: PatternAudienceWhereInput[]
    NOT?: PatternAudienceWhereInput | PatternAudienceWhereInput[]
    pattern_id?: IntFilter<"PatternAudience"> | number
    audience_id?: IntFilter<"PatternAudience"> | number
    pattern?: XOR<PatternRelationFilter, PatternWhereInput>
    audience?: XOR<AudienceRelationFilter, AudienceWhereInput>
  }, "id">

  export type PatternAudienceOrderByWithAggregationInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    audience_id?: SortOrder
    _count?: PatternAudienceCountOrderByAggregateInput
    _avg?: PatternAudienceAvgOrderByAggregateInput
    _max?: PatternAudienceMaxOrderByAggregateInput
    _min?: PatternAudienceMinOrderByAggregateInput
    _sum?: PatternAudienceSumOrderByAggregateInput
  }

  export type PatternAudienceScalarWhereWithAggregatesInput = {
    AND?: PatternAudienceScalarWhereWithAggregatesInput | PatternAudienceScalarWhereWithAggregatesInput[]
    OR?: PatternAudienceScalarWhereWithAggregatesInput[]
    NOT?: PatternAudienceScalarWhereWithAggregatesInput | PatternAudienceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PatternAudience"> | number
    pattern_id?: IntWithAggregatesFilter<"PatternAudience"> | number
    audience_id?: IntWithAggregatesFilter<"PatternAudience"> | number
  }

  export type PatternCategoryWhereInput = {
    AND?: PatternCategoryWhereInput | PatternCategoryWhereInput[]
    OR?: PatternCategoryWhereInput[]
    NOT?: PatternCategoryWhereInput | PatternCategoryWhereInput[]
    id?: IntFilter<"PatternCategory"> | number
    pattern_id?: IntFilter<"PatternCategory"> | number
    category_id?: IntFilter<"PatternCategory"> | number
    pattern?: XOR<PatternRelationFilter, PatternWhereInput>
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
  }

  export type PatternCategoryOrderByWithRelationInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    category_id?: SortOrder
    pattern?: PatternOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
  }

  export type PatternCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PatternCategoryWhereInput | PatternCategoryWhereInput[]
    OR?: PatternCategoryWhereInput[]
    NOT?: PatternCategoryWhereInput | PatternCategoryWhereInput[]
    pattern_id?: IntFilter<"PatternCategory"> | number
    category_id?: IntFilter<"PatternCategory"> | number
    pattern?: XOR<PatternRelationFilter, PatternWhereInput>
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
  }, "id">

  export type PatternCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    category_id?: SortOrder
    _count?: PatternCategoryCountOrderByAggregateInput
    _avg?: PatternCategoryAvgOrderByAggregateInput
    _max?: PatternCategoryMaxOrderByAggregateInput
    _min?: PatternCategoryMinOrderByAggregateInput
    _sum?: PatternCategorySumOrderByAggregateInput
  }

  export type PatternCategoryScalarWhereWithAggregatesInput = {
    AND?: PatternCategoryScalarWhereWithAggregatesInput | PatternCategoryScalarWhereWithAggregatesInput[]
    OR?: PatternCategoryScalarWhereWithAggregatesInput[]
    NOT?: PatternCategoryScalarWhereWithAggregatesInput | PatternCategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PatternCategory"> | number
    pattern_id?: IntWithAggregatesFilter<"PatternCategory"> | number
    category_id?: IntWithAggregatesFilter<"PatternCategory"> | number
  }

  export type PatternFabricTypeWhereInput = {
    AND?: PatternFabricTypeWhereInput | PatternFabricTypeWhereInput[]
    OR?: PatternFabricTypeWhereInput[]
    NOT?: PatternFabricTypeWhereInput | PatternFabricTypeWhereInput[]
    id?: IntFilter<"PatternFabricType"> | number
    pattern_id?: IntFilter<"PatternFabricType"> | number
    fabrictype_id?: IntFilter<"PatternFabricType"> | number
    pattern?: XOR<PatternRelationFilter, PatternWhereInput>
    fabricType?: XOR<FabricTypeRelationFilter, FabricTypeWhereInput>
  }

  export type PatternFabricTypeOrderByWithRelationInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    fabrictype_id?: SortOrder
    pattern?: PatternOrderByWithRelationInput
    fabricType?: FabricTypeOrderByWithRelationInput
  }

  export type PatternFabricTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PatternFabricTypeWhereInput | PatternFabricTypeWhereInput[]
    OR?: PatternFabricTypeWhereInput[]
    NOT?: PatternFabricTypeWhereInput | PatternFabricTypeWhereInput[]
    pattern_id?: IntFilter<"PatternFabricType"> | number
    fabrictype_id?: IntFilter<"PatternFabricType"> | number
    pattern?: XOR<PatternRelationFilter, PatternWhereInput>
    fabricType?: XOR<FabricTypeRelationFilter, FabricTypeWhereInput>
  }, "id">

  export type PatternFabricTypeOrderByWithAggregationInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    fabrictype_id?: SortOrder
    _count?: PatternFabricTypeCountOrderByAggregateInput
    _avg?: PatternFabricTypeAvgOrderByAggregateInput
    _max?: PatternFabricTypeMaxOrderByAggregateInput
    _min?: PatternFabricTypeMinOrderByAggregateInput
    _sum?: PatternFabricTypeSumOrderByAggregateInput
  }

  export type PatternFabricTypeScalarWhereWithAggregatesInput = {
    AND?: PatternFabricTypeScalarWhereWithAggregatesInput | PatternFabricTypeScalarWhereWithAggregatesInput[]
    OR?: PatternFabricTypeScalarWhereWithAggregatesInput[]
    NOT?: PatternFabricTypeScalarWhereWithAggregatesInput | PatternFabricTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PatternFabricType"> | number
    pattern_id?: IntWithAggregatesFilter<"PatternFabricType"> | number
    fabrictype_id?: IntWithAggregatesFilter<"PatternFabricType"> | number
  }

  export type PatternSuggestedFabricWhereInput = {
    AND?: PatternSuggestedFabricWhereInput | PatternSuggestedFabricWhereInput[]
    OR?: PatternSuggestedFabricWhereInput[]
    NOT?: PatternSuggestedFabricWhereInput | PatternSuggestedFabricWhereInput[]
    id?: IntFilter<"PatternSuggestedFabric"> | number
    pattern_id?: IntFilter<"PatternSuggestedFabric"> | number
    suggestedfabric_id?: IntFilter<"PatternSuggestedFabric"> | number
    pattern?: XOR<PatternRelationFilter, PatternWhereInput>
    suggestedFabric?: XOR<SuggestedFabricRelationFilter, SuggestedFabricWhereInput>
  }

  export type PatternSuggestedFabricOrderByWithRelationInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    suggestedfabric_id?: SortOrder
    pattern?: PatternOrderByWithRelationInput
    suggestedFabric?: SuggestedFabricOrderByWithRelationInput
  }

  export type PatternSuggestedFabricWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PatternSuggestedFabricWhereInput | PatternSuggestedFabricWhereInput[]
    OR?: PatternSuggestedFabricWhereInput[]
    NOT?: PatternSuggestedFabricWhereInput | PatternSuggestedFabricWhereInput[]
    pattern_id?: IntFilter<"PatternSuggestedFabric"> | number
    suggestedfabric_id?: IntFilter<"PatternSuggestedFabric"> | number
    pattern?: XOR<PatternRelationFilter, PatternWhereInput>
    suggestedFabric?: XOR<SuggestedFabricRelationFilter, SuggestedFabricWhereInput>
  }, "id">

  export type PatternSuggestedFabricOrderByWithAggregationInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    suggestedfabric_id?: SortOrder
    _count?: PatternSuggestedFabricCountOrderByAggregateInput
    _avg?: PatternSuggestedFabricAvgOrderByAggregateInput
    _max?: PatternSuggestedFabricMaxOrderByAggregateInput
    _min?: PatternSuggestedFabricMinOrderByAggregateInput
    _sum?: PatternSuggestedFabricSumOrderByAggregateInput
  }

  export type PatternSuggestedFabricScalarWhereWithAggregatesInput = {
    AND?: PatternSuggestedFabricScalarWhereWithAggregatesInput | PatternSuggestedFabricScalarWhereWithAggregatesInput[]
    OR?: PatternSuggestedFabricScalarWhereWithAggregatesInput[]
    NOT?: PatternSuggestedFabricScalarWhereWithAggregatesInput | PatternSuggestedFabricScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PatternSuggestedFabric"> | number
    pattern_id?: IntWithAggregatesFilter<"PatternSuggestedFabric"> | number
    suggestedfabric_id?: IntWithAggregatesFilter<"PatternSuggestedFabric"> | number
  }

  export type SuggestedFabricWhereInput = {
    AND?: SuggestedFabricWhereInput | SuggestedFabricWhereInput[]
    OR?: SuggestedFabricWhereInput[]
    NOT?: SuggestedFabricWhereInput | SuggestedFabricWhereInput[]
    id?: IntFilter<"SuggestedFabric"> | number
    name?: StringFilter<"SuggestedFabric"> | string
    PatternSuggestedFabric?: PatternSuggestedFabricListRelationFilter
  }

  export type SuggestedFabricOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    PatternSuggestedFabric?: PatternSuggestedFabricOrderByRelationAggregateInput
  }

  export type SuggestedFabricWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SuggestedFabricWhereInput | SuggestedFabricWhereInput[]
    OR?: SuggestedFabricWhereInput[]
    NOT?: SuggestedFabricWhereInput | SuggestedFabricWhereInput[]
    name?: StringFilter<"SuggestedFabric"> | string
    PatternSuggestedFabric?: PatternSuggestedFabricListRelationFilter
  }, "id">

  export type SuggestedFabricOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: SuggestedFabricCountOrderByAggregateInput
    _avg?: SuggestedFabricAvgOrderByAggregateInput
    _max?: SuggestedFabricMaxOrderByAggregateInput
    _min?: SuggestedFabricMinOrderByAggregateInput
    _sum?: SuggestedFabricSumOrderByAggregateInput
  }

  export type SuggestedFabricScalarWhereWithAggregatesInput = {
    AND?: SuggestedFabricScalarWhereWithAggregatesInput | SuggestedFabricScalarWhereWithAggregatesInput[]
    OR?: SuggestedFabricScalarWhereWithAggregatesInput[]
    NOT?: SuggestedFabricScalarWhereWithAggregatesInput | SuggestedFabricScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SuggestedFabric"> | number
    name?: StringWithAggregatesFilter<"SuggestedFabric"> | string
  }

  export type AttributeCreateInput = {
    name: string
    PatternAttribute?: PatternAttributeCreateNestedManyWithoutAttributeInput
  }

  export type AttributeUncheckedCreateInput = {
    id?: number
    name: string
    PatternAttribute?: PatternAttributeUncheckedCreateNestedManyWithoutAttributeInput
  }

  export type AttributeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    PatternAttribute?: PatternAttributeUpdateManyWithoutAttributeNestedInput
  }

  export type AttributeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    PatternAttribute?: PatternAttributeUncheckedUpdateManyWithoutAttributeNestedInput
  }

  export type AttributeCreateManyInput = {
    id?: number
    name: string
  }

  export type AttributeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AttributeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AudienceCreateInput = {
    name: string
    PatternAudience?: PatternAudienceCreateNestedManyWithoutAudienceInput
  }

  export type AudienceUncheckedCreateInput = {
    id?: number
    name: string
    PatternAudience?: PatternAudienceUncheckedCreateNestedManyWithoutAudienceInput
  }

  export type AudienceUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    PatternAudience?: PatternAudienceUpdateManyWithoutAudienceNestedInput
  }

  export type AudienceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    PatternAudience?: PatternAudienceUncheckedUpdateManyWithoutAudienceNestedInput
  }

  export type AudienceCreateManyInput = {
    id?: number
    name: string
  }

  export type AudienceUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AudienceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCreateInput = {
    name: string
    PatternCategory?: PatternCategoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    PatternCategory?: PatternCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    PatternCategory?: PatternCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    PatternCategory?: PatternCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DesignerCreateInput = {
    name: string
    url: string
    logo_url?: string | null
    email?: string | null
    address?: string | null
    facebook?: string | null
    instagram?: string | null
    pinterest?: string | null
    youtube?: string | null
    patterns?: PatternCreateNestedManyWithoutDesignerInput
  }

  export type DesignerUncheckedCreateInput = {
    id?: number
    name: string
    url: string
    logo_url?: string | null
    email?: string | null
    address?: string | null
    facebook?: string | null
    instagram?: string | null
    pinterest?: string | null
    youtube?: string | null
    patterns?: PatternUncheckedCreateNestedManyWithoutDesignerInput
  }

  export type DesignerUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    pinterest?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
    patterns?: PatternUpdateManyWithoutDesignerNestedInput
  }

  export type DesignerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    pinterest?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
    patterns?: PatternUncheckedUpdateManyWithoutDesignerNestedInput
  }

  export type DesignerCreateManyInput = {
    id?: number
    name: string
    url: string
    logo_url?: string | null
    email?: string | null
    address?: string | null
    facebook?: string | null
    instagram?: string | null
    pinterest?: string | null
    youtube?: string | null
  }

  export type DesignerUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    pinterest?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DesignerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    pinterest?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FabricTypeCreateInput = {
    name: string
    PatternFabricType?: PatternFabricTypeCreateNestedManyWithoutFabricTypeInput
  }

  export type FabricTypeUncheckedCreateInput = {
    id?: number
    name: string
    PatternFabricType?: PatternFabricTypeUncheckedCreateNestedManyWithoutFabricTypeInput
  }

  export type FabricTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    PatternFabricType?: PatternFabricTypeUpdateManyWithoutFabricTypeNestedInput
  }

  export type FabricTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    PatternFabricType?: PatternFabricTypeUncheckedUpdateManyWithoutFabricTypeNestedInput
  }

  export type FabricTypeCreateManyInput = {
    id?: number
    name: string
  }

  export type FabricTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type FabricTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type FormatCreateInput = {
    name: string
  }

  export type FormatUncheckedCreateInput = {
    id?: number
    name: string
  }

  export type FormatUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type FormatUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type FormatCreateManyInput = {
    id?: number
    name: string
  }

  export type FormatUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type FormatUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PatternCreateInput = {
    name: string
    url: string
    thumbnail_url?: string | null
    yardage?: string | null
    sizes?: string | null
    language?: string | null
    designer: DesignerCreateNestedOneWithoutPatternsInput
    PatternAttribute?: PatternAttributeCreateNestedManyWithoutPatternInput
    PatternAudience?: PatternAudienceCreateNestedManyWithoutPatternInput
    PatternCategory?: PatternCategoryCreateNestedManyWithoutPatternInput
    PatternFabricType?: PatternFabricTypeCreateNestedManyWithoutPatternInput
    PatternSuggestedFabric?: PatternSuggestedFabricCreateNestedManyWithoutPatternInput
  }

  export type PatternUncheckedCreateInput = {
    id?: number
    name: string
    designer_id: number
    url: string
    thumbnail_url?: string | null
    yardage?: string | null
    sizes?: string | null
    language?: string | null
    PatternAttribute?: PatternAttributeUncheckedCreateNestedManyWithoutPatternInput
    PatternAudience?: PatternAudienceUncheckedCreateNestedManyWithoutPatternInput
    PatternCategory?: PatternCategoryUncheckedCreateNestedManyWithoutPatternInput
    PatternFabricType?: PatternFabricTypeUncheckedCreateNestedManyWithoutPatternInput
    PatternSuggestedFabric?: PatternSuggestedFabricUncheckedCreateNestedManyWithoutPatternInput
  }

  export type PatternUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    yardage?: NullableStringFieldUpdateOperationsInput | string | null
    sizes?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    designer?: DesignerUpdateOneRequiredWithoutPatternsNestedInput
    PatternAttribute?: PatternAttributeUpdateManyWithoutPatternNestedInput
    PatternAudience?: PatternAudienceUpdateManyWithoutPatternNestedInput
    PatternCategory?: PatternCategoryUpdateManyWithoutPatternNestedInput
    PatternFabricType?: PatternFabricTypeUpdateManyWithoutPatternNestedInput
    PatternSuggestedFabric?: PatternSuggestedFabricUpdateManyWithoutPatternNestedInput
  }

  export type PatternUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    designer_id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    yardage?: NullableStringFieldUpdateOperationsInput | string | null
    sizes?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    PatternAttribute?: PatternAttributeUncheckedUpdateManyWithoutPatternNestedInput
    PatternAudience?: PatternAudienceUncheckedUpdateManyWithoutPatternNestedInput
    PatternCategory?: PatternCategoryUncheckedUpdateManyWithoutPatternNestedInput
    PatternFabricType?: PatternFabricTypeUncheckedUpdateManyWithoutPatternNestedInput
    PatternSuggestedFabric?: PatternSuggestedFabricUncheckedUpdateManyWithoutPatternNestedInput
  }

  export type PatternCreateManyInput = {
    id?: number
    name: string
    designer_id: number
    url: string
    thumbnail_url?: string | null
    yardage?: string | null
    sizes?: string | null
    language?: string | null
  }

  export type PatternUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    yardage?: NullableStringFieldUpdateOperationsInput | string | null
    sizes?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PatternUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    designer_id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    yardage?: NullableStringFieldUpdateOperationsInput | string | null
    sizes?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PatternAttributeCreateInput = {
    pattern: PatternCreateNestedOneWithoutPatternAttributeInput
    attribute: AttributeCreateNestedOneWithoutPatternAttributeInput
  }

  export type PatternAttributeUncheckedCreateInput = {
    id?: number
    pattern_id: number
    attribute_id: number
  }

  export type PatternAttributeUpdateInput = {
    pattern?: PatternUpdateOneRequiredWithoutPatternAttributeNestedInput
    attribute?: AttributeUpdateOneRequiredWithoutPatternAttributeNestedInput
  }

  export type PatternAttributeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    pattern_id?: IntFieldUpdateOperationsInput | number
    attribute_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternAttributeCreateManyInput = {
    id?: number
    pattern_id: number
    attribute_id: number
  }

  export type PatternAttributeUpdateManyMutationInput = {

  }

  export type PatternAttributeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    pattern_id?: IntFieldUpdateOperationsInput | number
    attribute_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternAudienceCreateInput = {
    pattern: PatternCreateNestedOneWithoutPatternAudienceInput
    audience: AudienceCreateNestedOneWithoutPatternAudienceInput
  }

  export type PatternAudienceUncheckedCreateInput = {
    id?: number
    pattern_id: number
    audience_id: number
  }

  export type PatternAudienceUpdateInput = {
    pattern?: PatternUpdateOneRequiredWithoutPatternAudienceNestedInput
    audience?: AudienceUpdateOneRequiredWithoutPatternAudienceNestedInput
  }

  export type PatternAudienceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    pattern_id?: IntFieldUpdateOperationsInput | number
    audience_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternAudienceCreateManyInput = {
    id?: number
    pattern_id: number
    audience_id: number
  }

  export type PatternAudienceUpdateManyMutationInput = {

  }

  export type PatternAudienceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    pattern_id?: IntFieldUpdateOperationsInput | number
    audience_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternCategoryCreateInput = {
    pattern: PatternCreateNestedOneWithoutPatternCategoryInput
    category: CategoryCreateNestedOneWithoutPatternCategoryInput
  }

  export type PatternCategoryUncheckedCreateInput = {
    id?: number
    pattern_id: number
    category_id: number
  }

  export type PatternCategoryUpdateInput = {
    pattern?: PatternUpdateOneRequiredWithoutPatternCategoryNestedInput
    category?: CategoryUpdateOneRequiredWithoutPatternCategoryNestedInput
  }

  export type PatternCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    pattern_id?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternCategoryCreateManyInput = {
    id?: number
    pattern_id: number
    category_id: number
  }

  export type PatternCategoryUpdateManyMutationInput = {

  }

  export type PatternCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    pattern_id?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternFabricTypeCreateInput = {
    pattern: PatternCreateNestedOneWithoutPatternFabricTypeInput
    fabricType: FabricTypeCreateNestedOneWithoutPatternFabricTypeInput
  }

  export type PatternFabricTypeUncheckedCreateInput = {
    id?: number
    pattern_id: number
    fabrictype_id: number
  }

  export type PatternFabricTypeUpdateInput = {
    pattern?: PatternUpdateOneRequiredWithoutPatternFabricTypeNestedInput
    fabricType?: FabricTypeUpdateOneRequiredWithoutPatternFabricTypeNestedInput
  }

  export type PatternFabricTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    pattern_id?: IntFieldUpdateOperationsInput | number
    fabrictype_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternFabricTypeCreateManyInput = {
    id?: number
    pattern_id: number
    fabrictype_id: number
  }

  export type PatternFabricTypeUpdateManyMutationInput = {

  }

  export type PatternFabricTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    pattern_id?: IntFieldUpdateOperationsInput | number
    fabrictype_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternSuggestedFabricCreateInput = {
    pattern: PatternCreateNestedOneWithoutPatternSuggestedFabricInput
    suggestedFabric: SuggestedFabricCreateNestedOneWithoutPatternSuggestedFabricInput
  }

  export type PatternSuggestedFabricUncheckedCreateInput = {
    id?: number
    pattern_id: number
    suggestedfabric_id: number
  }

  export type PatternSuggestedFabricUpdateInput = {
    pattern?: PatternUpdateOneRequiredWithoutPatternSuggestedFabricNestedInput
    suggestedFabric?: SuggestedFabricUpdateOneRequiredWithoutPatternSuggestedFabricNestedInput
  }

  export type PatternSuggestedFabricUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    pattern_id?: IntFieldUpdateOperationsInput | number
    suggestedfabric_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternSuggestedFabricCreateManyInput = {
    id?: number
    pattern_id: number
    suggestedfabric_id: number
  }

  export type PatternSuggestedFabricUpdateManyMutationInput = {

  }

  export type PatternSuggestedFabricUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    pattern_id?: IntFieldUpdateOperationsInput | number
    suggestedfabric_id?: IntFieldUpdateOperationsInput | number
  }

  export type SuggestedFabricCreateInput = {
    name: string
    PatternSuggestedFabric?: PatternSuggestedFabricCreateNestedManyWithoutSuggestedFabricInput
  }

  export type SuggestedFabricUncheckedCreateInput = {
    id?: number
    name: string
    PatternSuggestedFabric?: PatternSuggestedFabricUncheckedCreateNestedManyWithoutSuggestedFabricInput
  }

  export type SuggestedFabricUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    PatternSuggestedFabric?: PatternSuggestedFabricUpdateManyWithoutSuggestedFabricNestedInput
  }

  export type SuggestedFabricUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    PatternSuggestedFabric?: PatternSuggestedFabricUncheckedUpdateManyWithoutSuggestedFabricNestedInput
  }

  export type SuggestedFabricCreateManyInput = {
    id?: number
    name: string
  }

  export type SuggestedFabricUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SuggestedFabricUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type PatternAttributeListRelationFilter = {
    every?: PatternAttributeWhereInput
    some?: PatternAttributeWhereInput
    none?: PatternAttributeWhereInput
  }

  export type PatternAttributeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttributeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type AttributeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AttributeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type AttributeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type AttributeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type PatternAudienceListRelationFilter = {
    every?: PatternAudienceWhereInput
    some?: PatternAudienceWhereInput
    none?: PatternAudienceWhereInput
  }

  export type PatternAudienceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AudienceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type AudienceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AudienceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type AudienceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type AudienceSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PatternCategoryListRelationFilter = {
    every?: PatternCategoryWhereInput
    some?: PatternCategoryWhereInput
    none?: PatternCategoryWhereInput
  }

  export type PatternCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type PatternListRelationFilter = {
    every?: PatternWhereInput
    some?: PatternWhereInput
    none?: PatternWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PatternOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DesignerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    logo_url?: SortOrder
    email?: SortOrder
    address?: SortOrder
    facebook?: SortOrder
    instagram?: SortOrder
    pinterest?: SortOrder
    youtube?: SortOrder
  }

  export type DesignerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DesignerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    logo_url?: SortOrder
    email?: SortOrder
    address?: SortOrder
    facebook?: SortOrder
    instagram?: SortOrder
    pinterest?: SortOrder
    youtube?: SortOrder
  }

  export type DesignerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    logo_url?: SortOrder
    email?: SortOrder
    address?: SortOrder
    facebook?: SortOrder
    instagram?: SortOrder
    pinterest?: SortOrder
    youtube?: SortOrder
  }

  export type DesignerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type PatternFabricTypeListRelationFilter = {
    every?: PatternFabricTypeWhereInput
    some?: PatternFabricTypeWhereInput
    none?: PatternFabricTypeWhereInput
  }

  export type PatternFabricTypeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FabricTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type FabricTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FabricTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type FabricTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type FabricTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FormatCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type FormatAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FormatMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type FormatMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type FormatSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DesignerRelationFilter = {
    is?: DesignerWhereInput
    isNot?: DesignerWhereInput
  }

  export type PatternSuggestedFabricListRelationFilter = {
    every?: PatternSuggestedFabricWhereInput
    some?: PatternSuggestedFabricWhereInput
    none?: PatternSuggestedFabricWhereInput
  }

  export type PatternSuggestedFabricOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatternCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    designer_id?: SortOrder
    url?: SortOrder
    thumbnail_url?: SortOrder
    yardage?: SortOrder
    sizes?: SortOrder
    language?: SortOrder
  }

  export type PatternAvgOrderByAggregateInput = {
    id?: SortOrder
    designer_id?: SortOrder
  }

  export type PatternMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    designer_id?: SortOrder
    url?: SortOrder
    thumbnail_url?: SortOrder
    yardage?: SortOrder
    sizes?: SortOrder
    language?: SortOrder
  }

  export type PatternMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    designer_id?: SortOrder
    url?: SortOrder
    thumbnail_url?: SortOrder
    yardage?: SortOrder
    sizes?: SortOrder
    language?: SortOrder
  }

  export type PatternSumOrderByAggregateInput = {
    id?: SortOrder
    designer_id?: SortOrder
  }

  export type PatternRelationFilter = {
    is?: PatternWhereInput
    isNot?: PatternWhereInput
  }

  export type AttributeRelationFilter = {
    is?: AttributeWhereInput
    isNot?: AttributeWhereInput
  }

  export type PatternAttributeCountOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    attribute_id?: SortOrder
  }

  export type PatternAttributeAvgOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    attribute_id?: SortOrder
  }

  export type PatternAttributeMaxOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    attribute_id?: SortOrder
  }

  export type PatternAttributeMinOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    attribute_id?: SortOrder
  }

  export type PatternAttributeSumOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    attribute_id?: SortOrder
  }

  export type AudienceRelationFilter = {
    is?: AudienceWhereInput
    isNot?: AudienceWhereInput
  }

  export type PatternAudienceCountOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    audience_id?: SortOrder
  }

  export type PatternAudienceAvgOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    audience_id?: SortOrder
  }

  export type PatternAudienceMaxOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    audience_id?: SortOrder
  }

  export type PatternAudienceMinOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    audience_id?: SortOrder
  }

  export type PatternAudienceSumOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    audience_id?: SortOrder
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type PatternCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    category_id?: SortOrder
  }

  export type PatternCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    category_id?: SortOrder
  }

  export type PatternCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    category_id?: SortOrder
  }

  export type PatternCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    category_id?: SortOrder
  }

  export type PatternCategorySumOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    category_id?: SortOrder
  }

  export type FabricTypeRelationFilter = {
    is?: FabricTypeWhereInput
    isNot?: FabricTypeWhereInput
  }

  export type PatternFabricTypeCountOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    fabrictype_id?: SortOrder
  }

  export type PatternFabricTypeAvgOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    fabrictype_id?: SortOrder
  }

  export type PatternFabricTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    fabrictype_id?: SortOrder
  }

  export type PatternFabricTypeMinOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    fabrictype_id?: SortOrder
  }

  export type PatternFabricTypeSumOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    fabrictype_id?: SortOrder
  }

  export type SuggestedFabricRelationFilter = {
    is?: SuggestedFabricWhereInput
    isNot?: SuggestedFabricWhereInput
  }

  export type PatternSuggestedFabricCountOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    suggestedfabric_id?: SortOrder
  }

  export type PatternSuggestedFabricAvgOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    suggestedfabric_id?: SortOrder
  }

  export type PatternSuggestedFabricMaxOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    suggestedfabric_id?: SortOrder
  }

  export type PatternSuggestedFabricMinOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    suggestedfabric_id?: SortOrder
  }

  export type PatternSuggestedFabricSumOrderByAggregateInput = {
    id?: SortOrder
    pattern_id?: SortOrder
    suggestedfabric_id?: SortOrder
  }

  export type SuggestedFabricCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SuggestedFabricAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SuggestedFabricMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SuggestedFabricMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type SuggestedFabricSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PatternAttributeCreateNestedManyWithoutAttributeInput = {
    create?: XOR<PatternAttributeCreateWithoutAttributeInput, PatternAttributeUncheckedCreateWithoutAttributeInput> | PatternAttributeCreateWithoutAttributeInput[] | PatternAttributeUncheckedCreateWithoutAttributeInput[]
    connectOrCreate?: PatternAttributeCreateOrConnectWithoutAttributeInput | PatternAttributeCreateOrConnectWithoutAttributeInput[]
    createMany?: PatternAttributeCreateManyAttributeInputEnvelope
    connect?: PatternAttributeWhereUniqueInput | PatternAttributeWhereUniqueInput[]
  }

  export type PatternAttributeUncheckedCreateNestedManyWithoutAttributeInput = {
    create?: XOR<PatternAttributeCreateWithoutAttributeInput, PatternAttributeUncheckedCreateWithoutAttributeInput> | PatternAttributeCreateWithoutAttributeInput[] | PatternAttributeUncheckedCreateWithoutAttributeInput[]
    connectOrCreate?: PatternAttributeCreateOrConnectWithoutAttributeInput | PatternAttributeCreateOrConnectWithoutAttributeInput[]
    createMany?: PatternAttributeCreateManyAttributeInputEnvelope
    connect?: PatternAttributeWhereUniqueInput | PatternAttributeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type PatternAttributeUpdateManyWithoutAttributeNestedInput = {
    create?: XOR<PatternAttributeCreateWithoutAttributeInput, PatternAttributeUncheckedCreateWithoutAttributeInput> | PatternAttributeCreateWithoutAttributeInput[] | PatternAttributeUncheckedCreateWithoutAttributeInput[]
    connectOrCreate?: PatternAttributeCreateOrConnectWithoutAttributeInput | PatternAttributeCreateOrConnectWithoutAttributeInput[]
    upsert?: PatternAttributeUpsertWithWhereUniqueWithoutAttributeInput | PatternAttributeUpsertWithWhereUniqueWithoutAttributeInput[]
    createMany?: PatternAttributeCreateManyAttributeInputEnvelope
    set?: PatternAttributeWhereUniqueInput | PatternAttributeWhereUniqueInput[]
    disconnect?: PatternAttributeWhereUniqueInput | PatternAttributeWhereUniqueInput[]
    delete?: PatternAttributeWhereUniqueInput | PatternAttributeWhereUniqueInput[]
    connect?: PatternAttributeWhereUniqueInput | PatternAttributeWhereUniqueInput[]
    update?: PatternAttributeUpdateWithWhereUniqueWithoutAttributeInput | PatternAttributeUpdateWithWhereUniqueWithoutAttributeInput[]
    updateMany?: PatternAttributeUpdateManyWithWhereWithoutAttributeInput | PatternAttributeUpdateManyWithWhereWithoutAttributeInput[]
    deleteMany?: PatternAttributeScalarWhereInput | PatternAttributeScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PatternAttributeUncheckedUpdateManyWithoutAttributeNestedInput = {
    create?: XOR<PatternAttributeCreateWithoutAttributeInput, PatternAttributeUncheckedCreateWithoutAttributeInput> | PatternAttributeCreateWithoutAttributeInput[] | PatternAttributeUncheckedCreateWithoutAttributeInput[]
    connectOrCreate?: PatternAttributeCreateOrConnectWithoutAttributeInput | PatternAttributeCreateOrConnectWithoutAttributeInput[]
    upsert?: PatternAttributeUpsertWithWhereUniqueWithoutAttributeInput | PatternAttributeUpsertWithWhereUniqueWithoutAttributeInput[]
    createMany?: PatternAttributeCreateManyAttributeInputEnvelope
    set?: PatternAttributeWhereUniqueInput | PatternAttributeWhereUniqueInput[]
    disconnect?: PatternAttributeWhereUniqueInput | PatternAttributeWhereUniqueInput[]
    delete?: PatternAttributeWhereUniqueInput | PatternAttributeWhereUniqueInput[]
    connect?: PatternAttributeWhereUniqueInput | PatternAttributeWhereUniqueInput[]
    update?: PatternAttributeUpdateWithWhereUniqueWithoutAttributeInput | PatternAttributeUpdateWithWhereUniqueWithoutAttributeInput[]
    updateMany?: PatternAttributeUpdateManyWithWhereWithoutAttributeInput | PatternAttributeUpdateManyWithWhereWithoutAttributeInput[]
    deleteMany?: PatternAttributeScalarWhereInput | PatternAttributeScalarWhereInput[]
  }

  export type PatternAudienceCreateNestedManyWithoutAudienceInput = {
    create?: XOR<PatternAudienceCreateWithoutAudienceInput, PatternAudienceUncheckedCreateWithoutAudienceInput> | PatternAudienceCreateWithoutAudienceInput[] | PatternAudienceUncheckedCreateWithoutAudienceInput[]
    connectOrCreate?: PatternAudienceCreateOrConnectWithoutAudienceInput | PatternAudienceCreateOrConnectWithoutAudienceInput[]
    createMany?: PatternAudienceCreateManyAudienceInputEnvelope
    connect?: PatternAudienceWhereUniqueInput | PatternAudienceWhereUniqueInput[]
  }

  export type PatternAudienceUncheckedCreateNestedManyWithoutAudienceInput = {
    create?: XOR<PatternAudienceCreateWithoutAudienceInput, PatternAudienceUncheckedCreateWithoutAudienceInput> | PatternAudienceCreateWithoutAudienceInput[] | PatternAudienceUncheckedCreateWithoutAudienceInput[]
    connectOrCreate?: PatternAudienceCreateOrConnectWithoutAudienceInput | PatternAudienceCreateOrConnectWithoutAudienceInput[]
    createMany?: PatternAudienceCreateManyAudienceInputEnvelope
    connect?: PatternAudienceWhereUniqueInput | PatternAudienceWhereUniqueInput[]
  }

  export type PatternAudienceUpdateManyWithoutAudienceNestedInput = {
    create?: XOR<PatternAudienceCreateWithoutAudienceInput, PatternAudienceUncheckedCreateWithoutAudienceInput> | PatternAudienceCreateWithoutAudienceInput[] | PatternAudienceUncheckedCreateWithoutAudienceInput[]
    connectOrCreate?: PatternAudienceCreateOrConnectWithoutAudienceInput | PatternAudienceCreateOrConnectWithoutAudienceInput[]
    upsert?: PatternAudienceUpsertWithWhereUniqueWithoutAudienceInput | PatternAudienceUpsertWithWhereUniqueWithoutAudienceInput[]
    createMany?: PatternAudienceCreateManyAudienceInputEnvelope
    set?: PatternAudienceWhereUniqueInput | PatternAudienceWhereUniqueInput[]
    disconnect?: PatternAudienceWhereUniqueInput | PatternAudienceWhereUniqueInput[]
    delete?: PatternAudienceWhereUniqueInput | PatternAudienceWhereUniqueInput[]
    connect?: PatternAudienceWhereUniqueInput | PatternAudienceWhereUniqueInput[]
    update?: PatternAudienceUpdateWithWhereUniqueWithoutAudienceInput | PatternAudienceUpdateWithWhereUniqueWithoutAudienceInput[]
    updateMany?: PatternAudienceUpdateManyWithWhereWithoutAudienceInput | PatternAudienceUpdateManyWithWhereWithoutAudienceInput[]
    deleteMany?: PatternAudienceScalarWhereInput | PatternAudienceScalarWhereInput[]
  }

  export type PatternAudienceUncheckedUpdateManyWithoutAudienceNestedInput = {
    create?: XOR<PatternAudienceCreateWithoutAudienceInput, PatternAudienceUncheckedCreateWithoutAudienceInput> | PatternAudienceCreateWithoutAudienceInput[] | PatternAudienceUncheckedCreateWithoutAudienceInput[]
    connectOrCreate?: PatternAudienceCreateOrConnectWithoutAudienceInput | PatternAudienceCreateOrConnectWithoutAudienceInput[]
    upsert?: PatternAudienceUpsertWithWhereUniqueWithoutAudienceInput | PatternAudienceUpsertWithWhereUniqueWithoutAudienceInput[]
    createMany?: PatternAudienceCreateManyAudienceInputEnvelope
    set?: PatternAudienceWhereUniqueInput | PatternAudienceWhereUniqueInput[]
    disconnect?: PatternAudienceWhereUniqueInput | PatternAudienceWhereUniqueInput[]
    delete?: PatternAudienceWhereUniqueInput | PatternAudienceWhereUniqueInput[]
    connect?: PatternAudienceWhereUniqueInput | PatternAudienceWhereUniqueInput[]
    update?: PatternAudienceUpdateWithWhereUniqueWithoutAudienceInput | PatternAudienceUpdateWithWhereUniqueWithoutAudienceInput[]
    updateMany?: PatternAudienceUpdateManyWithWhereWithoutAudienceInput | PatternAudienceUpdateManyWithWhereWithoutAudienceInput[]
    deleteMany?: PatternAudienceScalarWhereInput | PatternAudienceScalarWhereInput[]
  }

  export type PatternCategoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<PatternCategoryCreateWithoutCategoryInput, PatternCategoryUncheckedCreateWithoutCategoryInput> | PatternCategoryCreateWithoutCategoryInput[] | PatternCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PatternCategoryCreateOrConnectWithoutCategoryInput | PatternCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: PatternCategoryCreateManyCategoryInputEnvelope
    connect?: PatternCategoryWhereUniqueInput | PatternCategoryWhereUniqueInput[]
  }

  export type PatternCategoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<PatternCategoryCreateWithoutCategoryInput, PatternCategoryUncheckedCreateWithoutCategoryInput> | PatternCategoryCreateWithoutCategoryInput[] | PatternCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PatternCategoryCreateOrConnectWithoutCategoryInput | PatternCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: PatternCategoryCreateManyCategoryInputEnvelope
    connect?: PatternCategoryWhereUniqueInput | PatternCategoryWhereUniqueInput[]
  }

  export type PatternCategoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<PatternCategoryCreateWithoutCategoryInput, PatternCategoryUncheckedCreateWithoutCategoryInput> | PatternCategoryCreateWithoutCategoryInput[] | PatternCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PatternCategoryCreateOrConnectWithoutCategoryInput | PatternCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: PatternCategoryUpsertWithWhereUniqueWithoutCategoryInput | PatternCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: PatternCategoryCreateManyCategoryInputEnvelope
    set?: PatternCategoryWhereUniqueInput | PatternCategoryWhereUniqueInput[]
    disconnect?: PatternCategoryWhereUniqueInput | PatternCategoryWhereUniqueInput[]
    delete?: PatternCategoryWhereUniqueInput | PatternCategoryWhereUniqueInput[]
    connect?: PatternCategoryWhereUniqueInput | PatternCategoryWhereUniqueInput[]
    update?: PatternCategoryUpdateWithWhereUniqueWithoutCategoryInput | PatternCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: PatternCategoryUpdateManyWithWhereWithoutCategoryInput | PatternCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: PatternCategoryScalarWhereInput | PatternCategoryScalarWhereInput[]
  }

  export type PatternCategoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<PatternCategoryCreateWithoutCategoryInput, PatternCategoryUncheckedCreateWithoutCategoryInput> | PatternCategoryCreateWithoutCategoryInput[] | PatternCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PatternCategoryCreateOrConnectWithoutCategoryInput | PatternCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: PatternCategoryUpsertWithWhereUniqueWithoutCategoryInput | PatternCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: PatternCategoryCreateManyCategoryInputEnvelope
    set?: PatternCategoryWhereUniqueInput | PatternCategoryWhereUniqueInput[]
    disconnect?: PatternCategoryWhereUniqueInput | PatternCategoryWhereUniqueInput[]
    delete?: PatternCategoryWhereUniqueInput | PatternCategoryWhereUniqueInput[]
    connect?: PatternCategoryWhereUniqueInput | PatternCategoryWhereUniqueInput[]
    update?: PatternCategoryUpdateWithWhereUniqueWithoutCategoryInput | PatternCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: PatternCategoryUpdateManyWithWhereWithoutCategoryInput | PatternCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: PatternCategoryScalarWhereInput | PatternCategoryScalarWhereInput[]
  }

  export type PatternCreateNestedManyWithoutDesignerInput = {
    create?: XOR<PatternCreateWithoutDesignerInput, PatternUncheckedCreateWithoutDesignerInput> | PatternCreateWithoutDesignerInput[] | PatternUncheckedCreateWithoutDesignerInput[]
    connectOrCreate?: PatternCreateOrConnectWithoutDesignerInput | PatternCreateOrConnectWithoutDesignerInput[]
    createMany?: PatternCreateManyDesignerInputEnvelope
    connect?: PatternWhereUniqueInput | PatternWhereUniqueInput[]
  }

  export type PatternUncheckedCreateNestedManyWithoutDesignerInput = {
    create?: XOR<PatternCreateWithoutDesignerInput, PatternUncheckedCreateWithoutDesignerInput> | PatternCreateWithoutDesignerInput[] | PatternUncheckedCreateWithoutDesignerInput[]
    connectOrCreate?: PatternCreateOrConnectWithoutDesignerInput | PatternCreateOrConnectWithoutDesignerInput[]
    createMany?: PatternCreateManyDesignerInputEnvelope
    connect?: PatternWhereUniqueInput | PatternWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PatternUpdateManyWithoutDesignerNestedInput = {
    create?: XOR<PatternCreateWithoutDesignerInput, PatternUncheckedCreateWithoutDesignerInput> | PatternCreateWithoutDesignerInput[] | PatternUncheckedCreateWithoutDesignerInput[]
    connectOrCreate?: PatternCreateOrConnectWithoutDesignerInput | PatternCreateOrConnectWithoutDesignerInput[]
    upsert?: PatternUpsertWithWhereUniqueWithoutDesignerInput | PatternUpsertWithWhereUniqueWithoutDesignerInput[]
    createMany?: PatternCreateManyDesignerInputEnvelope
    set?: PatternWhereUniqueInput | PatternWhereUniqueInput[]
    disconnect?: PatternWhereUniqueInput | PatternWhereUniqueInput[]
    delete?: PatternWhereUniqueInput | PatternWhereUniqueInput[]
    connect?: PatternWhereUniqueInput | PatternWhereUniqueInput[]
    update?: PatternUpdateWithWhereUniqueWithoutDesignerInput | PatternUpdateWithWhereUniqueWithoutDesignerInput[]
    updateMany?: PatternUpdateManyWithWhereWithoutDesignerInput | PatternUpdateManyWithWhereWithoutDesignerInput[]
    deleteMany?: PatternScalarWhereInput | PatternScalarWhereInput[]
  }

  export type PatternUncheckedUpdateManyWithoutDesignerNestedInput = {
    create?: XOR<PatternCreateWithoutDesignerInput, PatternUncheckedCreateWithoutDesignerInput> | PatternCreateWithoutDesignerInput[] | PatternUncheckedCreateWithoutDesignerInput[]
    connectOrCreate?: PatternCreateOrConnectWithoutDesignerInput | PatternCreateOrConnectWithoutDesignerInput[]
    upsert?: PatternUpsertWithWhereUniqueWithoutDesignerInput | PatternUpsertWithWhereUniqueWithoutDesignerInput[]
    createMany?: PatternCreateManyDesignerInputEnvelope
    set?: PatternWhereUniqueInput | PatternWhereUniqueInput[]
    disconnect?: PatternWhereUniqueInput | PatternWhereUniqueInput[]
    delete?: PatternWhereUniqueInput | PatternWhereUniqueInput[]
    connect?: PatternWhereUniqueInput | PatternWhereUniqueInput[]
    update?: PatternUpdateWithWhereUniqueWithoutDesignerInput | PatternUpdateWithWhereUniqueWithoutDesignerInput[]
    updateMany?: PatternUpdateManyWithWhereWithoutDesignerInput | PatternUpdateManyWithWhereWithoutDesignerInput[]
    deleteMany?: PatternScalarWhereInput | PatternScalarWhereInput[]
  }

  export type PatternFabricTypeCreateNestedManyWithoutFabricTypeInput = {
    create?: XOR<PatternFabricTypeCreateWithoutFabricTypeInput, PatternFabricTypeUncheckedCreateWithoutFabricTypeInput> | PatternFabricTypeCreateWithoutFabricTypeInput[] | PatternFabricTypeUncheckedCreateWithoutFabricTypeInput[]
    connectOrCreate?: PatternFabricTypeCreateOrConnectWithoutFabricTypeInput | PatternFabricTypeCreateOrConnectWithoutFabricTypeInput[]
    createMany?: PatternFabricTypeCreateManyFabricTypeInputEnvelope
    connect?: PatternFabricTypeWhereUniqueInput | PatternFabricTypeWhereUniqueInput[]
  }

  export type PatternFabricTypeUncheckedCreateNestedManyWithoutFabricTypeInput = {
    create?: XOR<PatternFabricTypeCreateWithoutFabricTypeInput, PatternFabricTypeUncheckedCreateWithoutFabricTypeInput> | PatternFabricTypeCreateWithoutFabricTypeInput[] | PatternFabricTypeUncheckedCreateWithoutFabricTypeInput[]
    connectOrCreate?: PatternFabricTypeCreateOrConnectWithoutFabricTypeInput | PatternFabricTypeCreateOrConnectWithoutFabricTypeInput[]
    createMany?: PatternFabricTypeCreateManyFabricTypeInputEnvelope
    connect?: PatternFabricTypeWhereUniqueInput | PatternFabricTypeWhereUniqueInput[]
  }

  export type PatternFabricTypeUpdateManyWithoutFabricTypeNestedInput = {
    create?: XOR<PatternFabricTypeCreateWithoutFabricTypeInput, PatternFabricTypeUncheckedCreateWithoutFabricTypeInput> | PatternFabricTypeCreateWithoutFabricTypeInput[] | PatternFabricTypeUncheckedCreateWithoutFabricTypeInput[]
    connectOrCreate?: PatternFabricTypeCreateOrConnectWithoutFabricTypeInput | PatternFabricTypeCreateOrConnectWithoutFabricTypeInput[]
    upsert?: PatternFabricTypeUpsertWithWhereUniqueWithoutFabricTypeInput | PatternFabricTypeUpsertWithWhereUniqueWithoutFabricTypeInput[]
    createMany?: PatternFabricTypeCreateManyFabricTypeInputEnvelope
    set?: PatternFabricTypeWhereUniqueInput | PatternFabricTypeWhereUniqueInput[]
    disconnect?: PatternFabricTypeWhereUniqueInput | PatternFabricTypeWhereUniqueInput[]
    delete?: PatternFabricTypeWhereUniqueInput | PatternFabricTypeWhereUniqueInput[]
    connect?: PatternFabricTypeWhereUniqueInput | PatternFabricTypeWhereUniqueInput[]
    update?: PatternFabricTypeUpdateWithWhereUniqueWithoutFabricTypeInput | PatternFabricTypeUpdateWithWhereUniqueWithoutFabricTypeInput[]
    updateMany?: PatternFabricTypeUpdateManyWithWhereWithoutFabricTypeInput | PatternFabricTypeUpdateManyWithWhereWithoutFabricTypeInput[]
    deleteMany?: PatternFabricTypeScalarWhereInput | PatternFabricTypeScalarWhereInput[]
  }

  export type PatternFabricTypeUncheckedUpdateManyWithoutFabricTypeNestedInput = {
    create?: XOR<PatternFabricTypeCreateWithoutFabricTypeInput, PatternFabricTypeUncheckedCreateWithoutFabricTypeInput> | PatternFabricTypeCreateWithoutFabricTypeInput[] | PatternFabricTypeUncheckedCreateWithoutFabricTypeInput[]
    connectOrCreate?: PatternFabricTypeCreateOrConnectWithoutFabricTypeInput | PatternFabricTypeCreateOrConnectWithoutFabricTypeInput[]
    upsert?: PatternFabricTypeUpsertWithWhereUniqueWithoutFabricTypeInput | PatternFabricTypeUpsertWithWhereUniqueWithoutFabricTypeInput[]
    createMany?: PatternFabricTypeCreateManyFabricTypeInputEnvelope
    set?: PatternFabricTypeWhereUniqueInput | PatternFabricTypeWhereUniqueInput[]
    disconnect?: PatternFabricTypeWhereUniqueInput | PatternFabricTypeWhereUniqueInput[]
    delete?: PatternFabricTypeWhereUniqueInput | PatternFabricTypeWhereUniqueInput[]
    connect?: PatternFabricTypeWhereUniqueInput | PatternFabricTypeWhereUniqueInput[]
    update?: PatternFabricTypeUpdateWithWhereUniqueWithoutFabricTypeInput | PatternFabricTypeUpdateWithWhereUniqueWithoutFabricTypeInput[]
    updateMany?: PatternFabricTypeUpdateManyWithWhereWithoutFabricTypeInput | PatternFabricTypeUpdateManyWithWhereWithoutFabricTypeInput[]
    deleteMany?: PatternFabricTypeScalarWhereInput | PatternFabricTypeScalarWhereInput[]
  }

  export type DesignerCreateNestedOneWithoutPatternsInput = {
    create?: XOR<DesignerCreateWithoutPatternsInput, DesignerUncheckedCreateWithoutPatternsInput>
    connectOrCreate?: DesignerCreateOrConnectWithoutPatternsInput
    connect?: DesignerWhereUniqueInput
  }

  export type PatternAttributeCreateNestedManyWithoutPatternInput = {
    create?: XOR<PatternAttributeCreateWithoutPatternInput, PatternAttributeUncheckedCreateWithoutPatternInput> | PatternAttributeCreateWithoutPatternInput[] | PatternAttributeUncheckedCreateWithoutPatternInput[]
    connectOrCreate?: PatternAttributeCreateOrConnectWithoutPatternInput | PatternAttributeCreateOrConnectWithoutPatternInput[]
    createMany?: PatternAttributeCreateManyPatternInputEnvelope
    connect?: PatternAttributeWhereUniqueInput | PatternAttributeWhereUniqueInput[]
  }

  export type PatternAudienceCreateNestedManyWithoutPatternInput = {
    create?: XOR<PatternAudienceCreateWithoutPatternInput, PatternAudienceUncheckedCreateWithoutPatternInput> | PatternAudienceCreateWithoutPatternInput[] | PatternAudienceUncheckedCreateWithoutPatternInput[]
    connectOrCreate?: PatternAudienceCreateOrConnectWithoutPatternInput | PatternAudienceCreateOrConnectWithoutPatternInput[]
    createMany?: PatternAudienceCreateManyPatternInputEnvelope
    connect?: PatternAudienceWhereUniqueInput | PatternAudienceWhereUniqueInput[]
  }

  export type PatternCategoryCreateNestedManyWithoutPatternInput = {
    create?: XOR<PatternCategoryCreateWithoutPatternInput, PatternCategoryUncheckedCreateWithoutPatternInput> | PatternCategoryCreateWithoutPatternInput[] | PatternCategoryUncheckedCreateWithoutPatternInput[]
    connectOrCreate?: PatternCategoryCreateOrConnectWithoutPatternInput | PatternCategoryCreateOrConnectWithoutPatternInput[]
    createMany?: PatternCategoryCreateManyPatternInputEnvelope
    connect?: PatternCategoryWhereUniqueInput | PatternCategoryWhereUniqueInput[]
  }

  export type PatternFabricTypeCreateNestedManyWithoutPatternInput = {
    create?: XOR<PatternFabricTypeCreateWithoutPatternInput, PatternFabricTypeUncheckedCreateWithoutPatternInput> | PatternFabricTypeCreateWithoutPatternInput[] | PatternFabricTypeUncheckedCreateWithoutPatternInput[]
    connectOrCreate?: PatternFabricTypeCreateOrConnectWithoutPatternInput | PatternFabricTypeCreateOrConnectWithoutPatternInput[]
    createMany?: PatternFabricTypeCreateManyPatternInputEnvelope
    connect?: PatternFabricTypeWhereUniqueInput | PatternFabricTypeWhereUniqueInput[]
  }

  export type PatternSuggestedFabricCreateNestedManyWithoutPatternInput = {
    create?: XOR<PatternSuggestedFabricCreateWithoutPatternInput, PatternSuggestedFabricUncheckedCreateWithoutPatternInput> | PatternSuggestedFabricCreateWithoutPatternInput[] | PatternSuggestedFabricUncheckedCreateWithoutPatternInput[]
    connectOrCreate?: PatternSuggestedFabricCreateOrConnectWithoutPatternInput | PatternSuggestedFabricCreateOrConnectWithoutPatternInput[]
    createMany?: PatternSuggestedFabricCreateManyPatternInputEnvelope
    connect?: PatternSuggestedFabricWhereUniqueInput | PatternSuggestedFabricWhereUniqueInput[]
  }

  export type PatternAttributeUncheckedCreateNestedManyWithoutPatternInput = {
    create?: XOR<PatternAttributeCreateWithoutPatternInput, PatternAttributeUncheckedCreateWithoutPatternInput> | PatternAttributeCreateWithoutPatternInput[] | PatternAttributeUncheckedCreateWithoutPatternInput[]
    connectOrCreate?: PatternAttributeCreateOrConnectWithoutPatternInput | PatternAttributeCreateOrConnectWithoutPatternInput[]
    createMany?: PatternAttributeCreateManyPatternInputEnvelope
    connect?: PatternAttributeWhereUniqueInput | PatternAttributeWhereUniqueInput[]
  }

  export type PatternAudienceUncheckedCreateNestedManyWithoutPatternInput = {
    create?: XOR<PatternAudienceCreateWithoutPatternInput, PatternAudienceUncheckedCreateWithoutPatternInput> | PatternAudienceCreateWithoutPatternInput[] | PatternAudienceUncheckedCreateWithoutPatternInput[]
    connectOrCreate?: PatternAudienceCreateOrConnectWithoutPatternInput | PatternAudienceCreateOrConnectWithoutPatternInput[]
    createMany?: PatternAudienceCreateManyPatternInputEnvelope
    connect?: PatternAudienceWhereUniqueInput | PatternAudienceWhereUniqueInput[]
  }

  export type PatternCategoryUncheckedCreateNestedManyWithoutPatternInput = {
    create?: XOR<PatternCategoryCreateWithoutPatternInput, PatternCategoryUncheckedCreateWithoutPatternInput> | PatternCategoryCreateWithoutPatternInput[] | PatternCategoryUncheckedCreateWithoutPatternInput[]
    connectOrCreate?: PatternCategoryCreateOrConnectWithoutPatternInput | PatternCategoryCreateOrConnectWithoutPatternInput[]
    createMany?: PatternCategoryCreateManyPatternInputEnvelope
    connect?: PatternCategoryWhereUniqueInput | PatternCategoryWhereUniqueInput[]
  }

  export type PatternFabricTypeUncheckedCreateNestedManyWithoutPatternInput = {
    create?: XOR<PatternFabricTypeCreateWithoutPatternInput, PatternFabricTypeUncheckedCreateWithoutPatternInput> | PatternFabricTypeCreateWithoutPatternInput[] | PatternFabricTypeUncheckedCreateWithoutPatternInput[]
    connectOrCreate?: PatternFabricTypeCreateOrConnectWithoutPatternInput | PatternFabricTypeCreateOrConnectWithoutPatternInput[]
    createMany?: PatternFabricTypeCreateManyPatternInputEnvelope
    connect?: PatternFabricTypeWhereUniqueInput | PatternFabricTypeWhereUniqueInput[]
  }

  export type PatternSuggestedFabricUncheckedCreateNestedManyWithoutPatternInput = {
    create?: XOR<PatternSuggestedFabricCreateWithoutPatternInput, PatternSuggestedFabricUncheckedCreateWithoutPatternInput> | PatternSuggestedFabricCreateWithoutPatternInput[] | PatternSuggestedFabricUncheckedCreateWithoutPatternInput[]
    connectOrCreate?: PatternSuggestedFabricCreateOrConnectWithoutPatternInput | PatternSuggestedFabricCreateOrConnectWithoutPatternInput[]
    createMany?: PatternSuggestedFabricCreateManyPatternInputEnvelope
    connect?: PatternSuggestedFabricWhereUniqueInput | PatternSuggestedFabricWhereUniqueInput[]
  }

  export type DesignerUpdateOneRequiredWithoutPatternsNestedInput = {
    create?: XOR<DesignerCreateWithoutPatternsInput, DesignerUncheckedCreateWithoutPatternsInput>
    connectOrCreate?: DesignerCreateOrConnectWithoutPatternsInput
    upsert?: DesignerUpsertWithoutPatternsInput
    connect?: DesignerWhereUniqueInput
    update?: XOR<XOR<DesignerUpdateToOneWithWhereWithoutPatternsInput, DesignerUpdateWithoutPatternsInput>, DesignerUncheckedUpdateWithoutPatternsInput>
  }

  export type PatternAttributeUpdateManyWithoutPatternNestedInput = {
    create?: XOR<PatternAttributeCreateWithoutPatternInput, PatternAttributeUncheckedCreateWithoutPatternInput> | PatternAttributeCreateWithoutPatternInput[] | PatternAttributeUncheckedCreateWithoutPatternInput[]
    connectOrCreate?: PatternAttributeCreateOrConnectWithoutPatternInput | PatternAttributeCreateOrConnectWithoutPatternInput[]
    upsert?: PatternAttributeUpsertWithWhereUniqueWithoutPatternInput | PatternAttributeUpsertWithWhereUniqueWithoutPatternInput[]
    createMany?: PatternAttributeCreateManyPatternInputEnvelope
    set?: PatternAttributeWhereUniqueInput | PatternAttributeWhereUniqueInput[]
    disconnect?: PatternAttributeWhereUniqueInput | PatternAttributeWhereUniqueInput[]
    delete?: PatternAttributeWhereUniqueInput | PatternAttributeWhereUniqueInput[]
    connect?: PatternAttributeWhereUniqueInput | PatternAttributeWhereUniqueInput[]
    update?: PatternAttributeUpdateWithWhereUniqueWithoutPatternInput | PatternAttributeUpdateWithWhereUniqueWithoutPatternInput[]
    updateMany?: PatternAttributeUpdateManyWithWhereWithoutPatternInput | PatternAttributeUpdateManyWithWhereWithoutPatternInput[]
    deleteMany?: PatternAttributeScalarWhereInput | PatternAttributeScalarWhereInput[]
  }

  export type PatternAudienceUpdateManyWithoutPatternNestedInput = {
    create?: XOR<PatternAudienceCreateWithoutPatternInput, PatternAudienceUncheckedCreateWithoutPatternInput> | PatternAudienceCreateWithoutPatternInput[] | PatternAudienceUncheckedCreateWithoutPatternInput[]
    connectOrCreate?: PatternAudienceCreateOrConnectWithoutPatternInput | PatternAudienceCreateOrConnectWithoutPatternInput[]
    upsert?: PatternAudienceUpsertWithWhereUniqueWithoutPatternInput | PatternAudienceUpsertWithWhereUniqueWithoutPatternInput[]
    createMany?: PatternAudienceCreateManyPatternInputEnvelope
    set?: PatternAudienceWhereUniqueInput | PatternAudienceWhereUniqueInput[]
    disconnect?: PatternAudienceWhereUniqueInput | PatternAudienceWhereUniqueInput[]
    delete?: PatternAudienceWhereUniqueInput | PatternAudienceWhereUniqueInput[]
    connect?: PatternAudienceWhereUniqueInput | PatternAudienceWhereUniqueInput[]
    update?: PatternAudienceUpdateWithWhereUniqueWithoutPatternInput | PatternAudienceUpdateWithWhereUniqueWithoutPatternInput[]
    updateMany?: PatternAudienceUpdateManyWithWhereWithoutPatternInput | PatternAudienceUpdateManyWithWhereWithoutPatternInput[]
    deleteMany?: PatternAudienceScalarWhereInput | PatternAudienceScalarWhereInput[]
  }

  export type PatternCategoryUpdateManyWithoutPatternNestedInput = {
    create?: XOR<PatternCategoryCreateWithoutPatternInput, PatternCategoryUncheckedCreateWithoutPatternInput> | PatternCategoryCreateWithoutPatternInput[] | PatternCategoryUncheckedCreateWithoutPatternInput[]
    connectOrCreate?: PatternCategoryCreateOrConnectWithoutPatternInput | PatternCategoryCreateOrConnectWithoutPatternInput[]
    upsert?: PatternCategoryUpsertWithWhereUniqueWithoutPatternInput | PatternCategoryUpsertWithWhereUniqueWithoutPatternInput[]
    createMany?: PatternCategoryCreateManyPatternInputEnvelope
    set?: PatternCategoryWhereUniqueInput | PatternCategoryWhereUniqueInput[]
    disconnect?: PatternCategoryWhereUniqueInput | PatternCategoryWhereUniqueInput[]
    delete?: PatternCategoryWhereUniqueInput | PatternCategoryWhereUniqueInput[]
    connect?: PatternCategoryWhereUniqueInput | PatternCategoryWhereUniqueInput[]
    update?: PatternCategoryUpdateWithWhereUniqueWithoutPatternInput | PatternCategoryUpdateWithWhereUniqueWithoutPatternInput[]
    updateMany?: PatternCategoryUpdateManyWithWhereWithoutPatternInput | PatternCategoryUpdateManyWithWhereWithoutPatternInput[]
    deleteMany?: PatternCategoryScalarWhereInput | PatternCategoryScalarWhereInput[]
  }

  export type PatternFabricTypeUpdateManyWithoutPatternNestedInput = {
    create?: XOR<PatternFabricTypeCreateWithoutPatternInput, PatternFabricTypeUncheckedCreateWithoutPatternInput> | PatternFabricTypeCreateWithoutPatternInput[] | PatternFabricTypeUncheckedCreateWithoutPatternInput[]
    connectOrCreate?: PatternFabricTypeCreateOrConnectWithoutPatternInput | PatternFabricTypeCreateOrConnectWithoutPatternInput[]
    upsert?: PatternFabricTypeUpsertWithWhereUniqueWithoutPatternInput | PatternFabricTypeUpsertWithWhereUniqueWithoutPatternInput[]
    createMany?: PatternFabricTypeCreateManyPatternInputEnvelope
    set?: PatternFabricTypeWhereUniqueInput | PatternFabricTypeWhereUniqueInput[]
    disconnect?: PatternFabricTypeWhereUniqueInput | PatternFabricTypeWhereUniqueInput[]
    delete?: PatternFabricTypeWhereUniqueInput | PatternFabricTypeWhereUniqueInput[]
    connect?: PatternFabricTypeWhereUniqueInput | PatternFabricTypeWhereUniqueInput[]
    update?: PatternFabricTypeUpdateWithWhereUniqueWithoutPatternInput | PatternFabricTypeUpdateWithWhereUniqueWithoutPatternInput[]
    updateMany?: PatternFabricTypeUpdateManyWithWhereWithoutPatternInput | PatternFabricTypeUpdateManyWithWhereWithoutPatternInput[]
    deleteMany?: PatternFabricTypeScalarWhereInput | PatternFabricTypeScalarWhereInput[]
  }

  export type PatternSuggestedFabricUpdateManyWithoutPatternNestedInput = {
    create?: XOR<PatternSuggestedFabricCreateWithoutPatternInput, PatternSuggestedFabricUncheckedCreateWithoutPatternInput> | PatternSuggestedFabricCreateWithoutPatternInput[] | PatternSuggestedFabricUncheckedCreateWithoutPatternInput[]
    connectOrCreate?: PatternSuggestedFabricCreateOrConnectWithoutPatternInput | PatternSuggestedFabricCreateOrConnectWithoutPatternInput[]
    upsert?: PatternSuggestedFabricUpsertWithWhereUniqueWithoutPatternInput | PatternSuggestedFabricUpsertWithWhereUniqueWithoutPatternInput[]
    createMany?: PatternSuggestedFabricCreateManyPatternInputEnvelope
    set?: PatternSuggestedFabricWhereUniqueInput | PatternSuggestedFabricWhereUniqueInput[]
    disconnect?: PatternSuggestedFabricWhereUniqueInput | PatternSuggestedFabricWhereUniqueInput[]
    delete?: PatternSuggestedFabricWhereUniqueInput | PatternSuggestedFabricWhereUniqueInput[]
    connect?: PatternSuggestedFabricWhereUniqueInput | PatternSuggestedFabricWhereUniqueInput[]
    update?: PatternSuggestedFabricUpdateWithWhereUniqueWithoutPatternInput | PatternSuggestedFabricUpdateWithWhereUniqueWithoutPatternInput[]
    updateMany?: PatternSuggestedFabricUpdateManyWithWhereWithoutPatternInput | PatternSuggestedFabricUpdateManyWithWhereWithoutPatternInput[]
    deleteMany?: PatternSuggestedFabricScalarWhereInput | PatternSuggestedFabricScalarWhereInput[]
  }

  export type PatternAttributeUncheckedUpdateManyWithoutPatternNestedInput = {
    create?: XOR<PatternAttributeCreateWithoutPatternInput, PatternAttributeUncheckedCreateWithoutPatternInput> | PatternAttributeCreateWithoutPatternInput[] | PatternAttributeUncheckedCreateWithoutPatternInput[]
    connectOrCreate?: PatternAttributeCreateOrConnectWithoutPatternInput | PatternAttributeCreateOrConnectWithoutPatternInput[]
    upsert?: PatternAttributeUpsertWithWhereUniqueWithoutPatternInput | PatternAttributeUpsertWithWhereUniqueWithoutPatternInput[]
    createMany?: PatternAttributeCreateManyPatternInputEnvelope
    set?: PatternAttributeWhereUniqueInput | PatternAttributeWhereUniqueInput[]
    disconnect?: PatternAttributeWhereUniqueInput | PatternAttributeWhereUniqueInput[]
    delete?: PatternAttributeWhereUniqueInput | PatternAttributeWhereUniqueInput[]
    connect?: PatternAttributeWhereUniqueInput | PatternAttributeWhereUniqueInput[]
    update?: PatternAttributeUpdateWithWhereUniqueWithoutPatternInput | PatternAttributeUpdateWithWhereUniqueWithoutPatternInput[]
    updateMany?: PatternAttributeUpdateManyWithWhereWithoutPatternInput | PatternAttributeUpdateManyWithWhereWithoutPatternInput[]
    deleteMany?: PatternAttributeScalarWhereInput | PatternAttributeScalarWhereInput[]
  }

  export type PatternAudienceUncheckedUpdateManyWithoutPatternNestedInput = {
    create?: XOR<PatternAudienceCreateWithoutPatternInput, PatternAudienceUncheckedCreateWithoutPatternInput> | PatternAudienceCreateWithoutPatternInput[] | PatternAudienceUncheckedCreateWithoutPatternInput[]
    connectOrCreate?: PatternAudienceCreateOrConnectWithoutPatternInput | PatternAudienceCreateOrConnectWithoutPatternInput[]
    upsert?: PatternAudienceUpsertWithWhereUniqueWithoutPatternInput | PatternAudienceUpsertWithWhereUniqueWithoutPatternInput[]
    createMany?: PatternAudienceCreateManyPatternInputEnvelope
    set?: PatternAudienceWhereUniqueInput | PatternAudienceWhereUniqueInput[]
    disconnect?: PatternAudienceWhereUniqueInput | PatternAudienceWhereUniqueInput[]
    delete?: PatternAudienceWhereUniqueInput | PatternAudienceWhereUniqueInput[]
    connect?: PatternAudienceWhereUniqueInput | PatternAudienceWhereUniqueInput[]
    update?: PatternAudienceUpdateWithWhereUniqueWithoutPatternInput | PatternAudienceUpdateWithWhereUniqueWithoutPatternInput[]
    updateMany?: PatternAudienceUpdateManyWithWhereWithoutPatternInput | PatternAudienceUpdateManyWithWhereWithoutPatternInput[]
    deleteMany?: PatternAudienceScalarWhereInput | PatternAudienceScalarWhereInput[]
  }

  export type PatternCategoryUncheckedUpdateManyWithoutPatternNestedInput = {
    create?: XOR<PatternCategoryCreateWithoutPatternInput, PatternCategoryUncheckedCreateWithoutPatternInput> | PatternCategoryCreateWithoutPatternInput[] | PatternCategoryUncheckedCreateWithoutPatternInput[]
    connectOrCreate?: PatternCategoryCreateOrConnectWithoutPatternInput | PatternCategoryCreateOrConnectWithoutPatternInput[]
    upsert?: PatternCategoryUpsertWithWhereUniqueWithoutPatternInput | PatternCategoryUpsertWithWhereUniqueWithoutPatternInput[]
    createMany?: PatternCategoryCreateManyPatternInputEnvelope
    set?: PatternCategoryWhereUniqueInput | PatternCategoryWhereUniqueInput[]
    disconnect?: PatternCategoryWhereUniqueInput | PatternCategoryWhereUniqueInput[]
    delete?: PatternCategoryWhereUniqueInput | PatternCategoryWhereUniqueInput[]
    connect?: PatternCategoryWhereUniqueInput | PatternCategoryWhereUniqueInput[]
    update?: PatternCategoryUpdateWithWhereUniqueWithoutPatternInput | PatternCategoryUpdateWithWhereUniqueWithoutPatternInput[]
    updateMany?: PatternCategoryUpdateManyWithWhereWithoutPatternInput | PatternCategoryUpdateManyWithWhereWithoutPatternInput[]
    deleteMany?: PatternCategoryScalarWhereInput | PatternCategoryScalarWhereInput[]
  }

  export type PatternFabricTypeUncheckedUpdateManyWithoutPatternNestedInput = {
    create?: XOR<PatternFabricTypeCreateWithoutPatternInput, PatternFabricTypeUncheckedCreateWithoutPatternInput> | PatternFabricTypeCreateWithoutPatternInput[] | PatternFabricTypeUncheckedCreateWithoutPatternInput[]
    connectOrCreate?: PatternFabricTypeCreateOrConnectWithoutPatternInput | PatternFabricTypeCreateOrConnectWithoutPatternInput[]
    upsert?: PatternFabricTypeUpsertWithWhereUniqueWithoutPatternInput | PatternFabricTypeUpsertWithWhereUniqueWithoutPatternInput[]
    createMany?: PatternFabricTypeCreateManyPatternInputEnvelope
    set?: PatternFabricTypeWhereUniqueInput | PatternFabricTypeWhereUniqueInput[]
    disconnect?: PatternFabricTypeWhereUniqueInput | PatternFabricTypeWhereUniqueInput[]
    delete?: PatternFabricTypeWhereUniqueInput | PatternFabricTypeWhereUniqueInput[]
    connect?: PatternFabricTypeWhereUniqueInput | PatternFabricTypeWhereUniqueInput[]
    update?: PatternFabricTypeUpdateWithWhereUniqueWithoutPatternInput | PatternFabricTypeUpdateWithWhereUniqueWithoutPatternInput[]
    updateMany?: PatternFabricTypeUpdateManyWithWhereWithoutPatternInput | PatternFabricTypeUpdateManyWithWhereWithoutPatternInput[]
    deleteMany?: PatternFabricTypeScalarWhereInput | PatternFabricTypeScalarWhereInput[]
  }

  export type PatternSuggestedFabricUncheckedUpdateManyWithoutPatternNestedInput = {
    create?: XOR<PatternSuggestedFabricCreateWithoutPatternInput, PatternSuggestedFabricUncheckedCreateWithoutPatternInput> | PatternSuggestedFabricCreateWithoutPatternInput[] | PatternSuggestedFabricUncheckedCreateWithoutPatternInput[]
    connectOrCreate?: PatternSuggestedFabricCreateOrConnectWithoutPatternInput | PatternSuggestedFabricCreateOrConnectWithoutPatternInput[]
    upsert?: PatternSuggestedFabricUpsertWithWhereUniqueWithoutPatternInput | PatternSuggestedFabricUpsertWithWhereUniqueWithoutPatternInput[]
    createMany?: PatternSuggestedFabricCreateManyPatternInputEnvelope
    set?: PatternSuggestedFabricWhereUniqueInput | PatternSuggestedFabricWhereUniqueInput[]
    disconnect?: PatternSuggestedFabricWhereUniqueInput | PatternSuggestedFabricWhereUniqueInput[]
    delete?: PatternSuggestedFabricWhereUniqueInput | PatternSuggestedFabricWhereUniqueInput[]
    connect?: PatternSuggestedFabricWhereUniqueInput | PatternSuggestedFabricWhereUniqueInput[]
    update?: PatternSuggestedFabricUpdateWithWhereUniqueWithoutPatternInput | PatternSuggestedFabricUpdateWithWhereUniqueWithoutPatternInput[]
    updateMany?: PatternSuggestedFabricUpdateManyWithWhereWithoutPatternInput | PatternSuggestedFabricUpdateManyWithWhereWithoutPatternInput[]
    deleteMany?: PatternSuggestedFabricScalarWhereInput | PatternSuggestedFabricScalarWhereInput[]
  }

  export type PatternCreateNestedOneWithoutPatternAttributeInput = {
    create?: XOR<PatternCreateWithoutPatternAttributeInput, PatternUncheckedCreateWithoutPatternAttributeInput>
    connectOrCreate?: PatternCreateOrConnectWithoutPatternAttributeInput
    connect?: PatternWhereUniqueInput
  }

  export type AttributeCreateNestedOneWithoutPatternAttributeInput = {
    create?: XOR<AttributeCreateWithoutPatternAttributeInput, AttributeUncheckedCreateWithoutPatternAttributeInput>
    connectOrCreate?: AttributeCreateOrConnectWithoutPatternAttributeInput
    connect?: AttributeWhereUniqueInput
  }

  export type PatternUpdateOneRequiredWithoutPatternAttributeNestedInput = {
    create?: XOR<PatternCreateWithoutPatternAttributeInput, PatternUncheckedCreateWithoutPatternAttributeInput>
    connectOrCreate?: PatternCreateOrConnectWithoutPatternAttributeInput
    upsert?: PatternUpsertWithoutPatternAttributeInput
    connect?: PatternWhereUniqueInput
    update?: XOR<XOR<PatternUpdateToOneWithWhereWithoutPatternAttributeInput, PatternUpdateWithoutPatternAttributeInput>, PatternUncheckedUpdateWithoutPatternAttributeInput>
  }

  export type AttributeUpdateOneRequiredWithoutPatternAttributeNestedInput = {
    create?: XOR<AttributeCreateWithoutPatternAttributeInput, AttributeUncheckedCreateWithoutPatternAttributeInput>
    connectOrCreate?: AttributeCreateOrConnectWithoutPatternAttributeInput
    upsert?: AttributeUpsertWithoutPatternAttributeInput
    connect?: AttributeWhereUniqueInput
    update?: XOR<XOR<AttributeUpdateToOneWithWhereWithoutPatternAttributeInput, AttributeUpdateWithoutPatternAttributeInput>, AttributeUncheckedUpdateWithoutPatternAttributeInput>
  }

  export type PatternCreateNestedOneWithoutPatternAudienceInput = {
    create?: XOR<PatternCreateWithoutPatternAudienceInput, PatternUncheckedCreateWithoutPatternAudienceInput>
    connectOrCreate?: PatternCreateOrConnectWithoutPatternAudienceInput
    connect?: PatternWhereUniqueInput
  }

  export type AudienceCreateNestedOneWithoutPatternAudienceInput = {
    create?: XOR<AudienceCreateWithoutPatternAudienceInput, AudienceUncheckedCreateWithoutPatternAudienceInput>
    connectOrCreate?: AudienceCreateOrConnectWithoutPatternAudienceInput
    connect?: AudienceWhereUniqueInput
  }

  export type PatternUpdateOneRequiredWithoutPatternAudienceNestedInput = {
    create?: XOR<PatternCreateWithoutPatternAudienceInput, PatternUncheckedCreateWithoutPatternAudienceInput>
    connectOrCreate?: PatternCreateOrConnectWithoutPatternAudienceInput
    upsert?: PatternUpsertWithoutPatternAudienceInput
    connect?: PatternWhereUniqueInput
    update?: XOR<XOR<PatternUpdateToOneWithWhereWithoutPatternAudienceInput, PatternUpdateWithoutPatternAudienceInput>, PatternUncheckedUpdateWithoutPatternAudienceInput>
  }

  export type AudienceUpdateOneRequiredWithoutPatternAudienceNestedInput = {
    create?: XOR<AudienceCreateWithoutPatternAudienceInput, AudienceUncheckedCreateWithoutPatternAudienceInput>
    connectOrCreate?: AudienceCreateOrConnectWithoutPatternAudienceInput
    upsert?: AudienceUpsertWithoutPatternAudienceInput
    connect?: AudienceWhereUniqueInput
    update?: XOR<XOR<AudienceUpdateToOneWithWhereWithoutPatternAudienceInput, AudienceUpdateWithoutPatternAudienceInput>, AudienceUncheckedUpdateWithoutPatternAudienceInput>
  }

  export type PatternCreateNestedOneWithoutPatternCategoryInput = {
    create?: XOR<PatternCreateWithoutPatternCategoryInput, PatternUncheckedCreateWithoutPatternCategoryInput>
    connectOrCreate?: PatternCreateOrConnectWithoutPatternCategoryInput
    connect?: PatternWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutPatternCategoryInput = {
    create?: XOR<CategoryCreateWithoutPatternCategoryInput, CategoryUncheckedCreateWithoutPatternCategoryInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutPatternCategoryInput
    connect?: CategoryWhereUniqueInput
  }

  export type PatternUpdateOneRequiredWithoutPatternCategoryNestedInput = {
    create?: XOR<PatternCreateWithoutPatternCategoryInput, PatternUncheckedCreateWithoutPatternCategoryInput>
    connectOrCreate?: PatternCreateOrConnectWithoutPatternCategoryInput
    upsert?: PatternUpsertWithoutPatternCategoryInput
    connect?: PatternWhereUniqueInput
    update?: XOR<XOR<PatternUpdateToOneWithWhereWithoutPatternCategoryInput, PatternUpdateWithoutPatternCategoryInput>, PatternUncheckedUpdateWithoutPatternCategoryInput>
  }

  export type CategoryUpdateOneRequiredWithoutPatternCategoryNestedInput = {
    create?: XOR<CategoryCreateWithoutPatternCategoryInput, CategoryUncheckedCreateWithoutPatternCategoryInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutPatternCategoryInput
    upsert?: CategoryUpsertWithoutPatternCategoryInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutPatternCategoryInput, CategoryUpdateWithoutPatternCategoryInput>, CategoryUncheckedUpdateWithoutPatternCategoryInput>
  }

  export type PatternCreateNestedOneWithoutPatternFabricTypeInput = {
    create?: XOR<PatternCreateWithoutPatternFabricTypeInput, PatternUncheckedCreateWithoutPatternFabricTypeInput>
    connectOrCreate?: PatternCreateOrConnectWithoutPatternFabricTypeInput
    connect?: PatternWhereUniqueInput
  }

  export type FabricTypeCreateNestedOneWithoutPatternFabricTypeInput = {
    create?: XOR<FabricTypeCreateWithoutPatternFabricTypeInput, FabricTypeUncheckedCreateWithoutPatternFabricTypeInput>
    connectOrCreate?: FabricTypeCreateOrConnectWithoutPatternFabricTypeInput
    connect?: FabricTypeWhereUniqueInput
  }

  export type PatternUpdateOneRequiredWithoutPatternFabricTypeNestedInput = {
    create?: XOR<PatternCreateWithoutPatternFabricTypeInput, PatternUncheckedCreateWithoutPatternFabricTypeInput>
    connectOrCreate?: PatternCreateOrConnectWithoutPatternFabricTypeInput
    upsert?: PatternUpsertWithoutPatternFabricTypeInput
    connect?: PatternWhereUniqueInput
    update?: XOR<XOR<PatternUpdateToOneWithWhereWithoutPatternFabricTypeInput, PatternUpdateWithoutPatternFabricTypeInput>, PatternUncheckedUpdateWithoutPatternFabricTypeInput>
  }

  export type FabricTypeUpdateOneRequiredWithoutPatternFabricTypeNestedInput = {
    create?: XOR<FabricTypeCreateWithoutPatternFabricTypeInput, FabricTypeUncheckedCreateWithoutPatternFabricTypeInput>
    connectOrCreate?: FabricTypeCreateOrConnectWithoutPatternFabricTypeInput
    upsert?: FabricTypeUpsertWithoutPatternFabricTypeInput
    connect?: FabricTypeWhereUniqueInput
    update?: XOR<XOR<FabricTypeUpdateToOneWithWhereWithoutPatternFabricTypeInput, FabricTypeUpdateWithoutPatternFabricTypeInput>, FabricTypeUncheckedUpdateWithoutPatternFabricTypeInput>
  }

  export type PatternCreateNestedOneWithoutPatternSuggestedFabricInput = {
    create?: XOR<PatternCreateWithoutPatternSuggestedFabricInput, PatternUncheckedCreateWithoutPatternSuggestedFabricInput>
    connectOrCreate?: PatternCreateOrConnectWithoutPatternSuggestedFabricInput
    connect?: PatternWhereUniqueInput
  }

  export type SuggestedFabricCreateNestedOneWithoutPatternSuggestedFabricInput = {
    create?: XOR<SuggestedFabricCreateWithoutPatternSuggestedFabricInput, SuggestedFabricUncheckedCreateWithoutPatternSuggestedFabricInput>
    connectOrCreate?: SuggestedFabricCreateOrConnectWithoutPatternSuggestedFabricInput
    connect?: SuggestedFabricWhereUniqueInput
  }

  export type PatternUpdateOneRequiredWithoutPatternSuggestedFabricNestedInput = {
    create?: XOR<PatternCreateWithoutPatternSuggestedFabricInput, PatternUncheckedCreateWithoutPatternSuggestedFabricInput>
    connectOrCreate?: PatternCreateOrConnectWithoutPatternSuggestedFabricInput
    upsert?: PatternUpsertWithoutPatternSuggestedFabricInput
    connect?: PatternWhereUniqueInput
    update?: XOR<XOR<PatternUpdateToOneWithWhereWithoutPatternSuggestedFabricInput, PatternUpdateWithoutPatternSuggestedFabricInput>, PatternUncheckedUpdateWithoutPatternSuggestedFabricInput>
  }

  export type SuggestedFabricUpdateOneRequiredWithoutPatternSuggestedFabricNestedInput = {
    create?: XOR<SuggestedFabricCreateWithoutPatternSuggestedFabricInput, SuggestedFabricUncheckedCreateWithoutPatternSuggestedFabricInput>
    connectOrCreate?: SuggestedFabricCreateOrConnectWithoutPatternSuggestedFabricInput
    upsert?: SuggestedFabricUpsertWithoutPatternSuggestedFabricInput
    connect?: SuggestedFabricWhereUniqueInput
    update?: XOR<XOR<SuggestedFabricUpdateToOneWithWhereWithoutPatternSuggestedFabricInput, SuggestedFabricUpdateWithoutPatternSuggestedFabricInput>, SuggestedFabricUncheckedUpdateWithoutPatternSuggestedFabricInput>
  }

  export type PatternSuggestedFabricCreateNestedManyWithoutSuggestedFabricInput = {
    create?: XOR<PatternSuggestedFabricCreateWithoutSuggestedFabricInput, PatternSuggestedFabricUncheckedCreateWithoutSuggestedFabricInput> | PatternSuggestedFabricCreateWithoutSuggestedFabricInput[] | PatternSuggestedFabricUncheckedCreateWithoutSuggestedFabricInput[]
    connectOrCreate?: PatternSuggestedFabricCreateOrConnectWithoutSuggestedFabricInput | PatternSuggestedFabricCreateOrConnectWithoutSuggestedFabricInput[]
    createMany?: PatternSuggestedFabricCreateManySuggestedFabricInputEnvelope
    connect?: PatternSuggestedFabricWhereUniqueInput | PatternSuggestedFabricWhereUniqueInput[]
  }

  export type PatternSuggestedFabricUncheckedCreateNestedManyWithoutSuggestedFabricInput = {
    create?: XOR<PatternSuggestedFabricCreateWithoutSuggestedFabricInput, PatternSuggestedFabricUncheckedCreateWithoutSuggestedFabricInput> | PatternSuggestedFabricCreateWithoutSuggestedFabricInput[] | PatternSuggestedFabricUncheckedCreateWithoutSuggestedFabricInput[]
    connectOrCreate?: PatternSuggestedFabricCreateOrConnectWithoutSuggestedFabricInput | PatternSuggestedFabricCreateOrConnectWithoutSuggestedFabricInput[]
    createMany?: PatternSuggestedFabricCreateManySuggestedFabricInputEnvelope
    connect?: PatternSuggestedFabricWhereUniqueInput | PatternSuggestedFabricWhereUniqueInput[]
  }

  export type PatternSuggestedFabricUpdateManyWithoutSuggestedFabricNestedInput = {
    create?: XOR<PatternSuggestedFabricCreateWithoutSuggestedFabricInput, PatternSuggestedFabricUncheckedCreateWithoutSuggestedFabricInput> | PatternSuggestedFabricCreateWithoutSuggestedFabricInput[] | PatternSuggestedFabricUncheckedCreateWithoutSuggestedFabricInput[]
    connectOrCreate?: PatternSuggestedFabricCreateOrConnectWithoutSuggestedFabricInput | PatternSuggestedFabricCreateOrConnectWithoutSuggestedFabricInput[]
    upsert?: PatternSuggestedFabricUpsertWithWhereUniqueWithoutSuggestedFabricInput | PatternSuggestedFabricUpsertWithWhereUniqueWithoutSuggestedFabricInput[]
    createMany?: PatternSuggestedFabricCreateManySuggestedFabricInputEnvelope
    set?: PatternSuggestedFabricWhereUniqueInput | PatternSuggestedFabricWhereUniqueInput[]
    disconnect?: PatternSuggestedFabricWhereUniqueInput | PatternSuggestedFabricWhereUniqueInput[]
    delete?: PatternSuggestedFabricWhereUniqueInput | PatternSuggestedFabricWhereUniqueInput[]
    connect?: PatternSuggestedFabricWhereUniqueInput | PatternSuggestedFabricWhereUniqueInput[]
    update?: PatternSuggestedFabricUpdateWithWhereUniqueWithoutSuggestedFabricInput | PatternSuggestedFabricUpdateWithWhereUniqueWithoutSuggestedFabricInput[]
    updateMany?: PatternSuggestedFabricUpdateManyWithWhereWithoutSuggestedFabricInput | PatternSuggestedFabricUpdateManyWithWhereWithoutSuggestedFabricInput[]
    deleteMany?: PatternSuggestedFabricScalarWhereInput | PatternSuggestedFabricScalarWhereInput[]
  }

  export type PatternSuggestedFabricUncheckedUpdateManyWithoutSuggestedFabricNestedInput = {
    create?: XOR<PatternSuggestedFabricCreateWithoutSuggestedFabricInput, PatternSuggestedFabricUncheckedCreateWithoutSuggestedFabricInput> | PatternSuggestedFabricCreateWithoutSuggestedFabricInput[] | PatternSuggestedFabricUncheckedCreateWithoutSuggestedFabricInput[]
    connectOrCreate?: PatternSuggestedFabricCreateOrConnectWithoutSuggestedFabricInput | PatternSuggestedFabricCreateOrConnectWithoutSuggestedFabricInput[]
    upsert?: PatternSuggestedFabricUpsertWithWhereUniqueWithoutSuggestedFabricInput | PatternSuggestedFabricUpsertWithWhereUniqueWithoutSuggestedFabricInput[]
    createMany?: PatternSuggestedFabricCreateManySuggestedFabricInputEnvelope
    set?: PatternSuggestedFabricWhereUniqueInput | PatternSuggestedFabricWhereUniqueInput[]
    disconnect?: PatternSuggestedFabricWhereUniqueInput | PatternSuggestedFabricWhereUniqueInput[]
    delete?: PatternSuggestedFabricWhereUniqueInput | PatternSuggestedFabricWhereUniqueInput[]
    connect?: PatternSuggestedFabricWhereUniqueInput | PatternSuggestedFabricWhereUniqueInput[]
    update?: PatternSuggestedFabricUpdateWithWhereUniqueWithoutSuggestedFabricInput | PatternSuggestedFabricUpdateWithWhereUniqueWithoutSuggestedFabricInput[]
    updateMany?: PatternSuggestedFabricUpdateManyWithWhereWithoutSuggestedFabricInput | PatternSuggestedFabricUpdateManyWithWhereWithoutSuggestedFabricInput[]
    deleteMany?: PatternSuggestedFabricScalarWhereInput | PatternSuggestedFabricScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type PatternAttributeCreateWithoutAttributeInput = {
    pattern: PatternCreateNestedOneWithoutPatternAttributeInput
  }

  export type PatternAttributeUncheckedCreateWithoutAttributeInput = {
    id?: number
    pattern_id: number
  }

  export type PatternAttributeCreateOrConnectWithoutAttributeInput = {
    where: PatternAttributeWhereUniqueInput
    create: XOR<PatternAttributeCreateWithoutAttributeInput, PatternAttributeUncheckedCreateWithoutAttributeInput>
  }

  export type PatternAttributeCreateManyAttributeInputEnvelope = {
    data: PatternAttributeCreateManyAttributeInput | PatternAttributeCreateManyAttributeInput[]
    skipDuplicates?: boolean
  }

  export type PatternAttributeUpsertWithWhereUniqueWithoutAttributeInput = {
    where: PatternAttributeWhereUniqueInput
    update: XOR<PatternAttributeUpdateWithoutAttributeInput, PatternAttributeUncheckedUpdateWithoutAttributeInput>
    create: XOR<PatternAttributeCreateWithoutAttributeInput, PatternAttributeUncheckedCreateWithoutAttributeInput>
  }

  export type PatternAttributeUpdateWithWhereUniqueWithoutAttributeInput = {
    where: PatternAttributeWhereUniqueInput
    data: XOR<PatternAttributeUpdateWithoutAttributeInput, PatternAttributeUncheckedUpdateWithoutAttributeInput>
  }

  export type PatternAttributeUpdateManyWithWhereWithoutAttributeInput = {
    where: PatternAttributeScalarWhereInput
    data: XOR<PatternAttributeUpdateManyMutationInput, PatternAttributeUncheckedUpdateManyWithoutAttributeInput>
  }

  export type PatternAttributeScalarWhereInput = {
    AND?: PatternAttributeScalarWhereInput | PatternAttributeScalarWhereInput[]
    OR?: PatternAttributeScalarWhereInput[]
    NOT?: PatternAttributeScalarWhereInput | PatternAttributeScalarWhereInput[]
    id?: IntFilter<"PatternAttribute"> | number
    pattern_id?: IntFilter<"PatternAttribute"> | number
    attribute_id?: IntFilter<"PatternAttribute"> | number
  }

  export type PatternAudienceCreateWithoutAudienceInput = {
    pattern: PatternCreateNestedOneWithoutPatternAudienceInput
  }

  export type PatternAudienceUncheckedCreateWithoutAudienceInput = {
    id?: number
    pattern_id: number
  }

  export type PatternAudienceCreateOrConnectWithoutAudienceInput = {
    where: PatternAudienceWhereUniqueInput
    create: XOR<PatternAudienceCreateWithoutAudienceInput, PatternAudienceUncheckedCreateWithoutAudienceInput>
  }

  export type PatternAudienceCreateManyAudienceInputEnvelope = {
    data: PatternAudienceCreateManyAudienceInput | PatternAudienceCreateManyAudienceInput[]
    skipDuplicates?: boolean
  }

  export type PatternAudienceUpsertWithWhereUniqueWithoutAudienceInput = {
    where: PatternAudienceWhereUniqueInput
    update: XOR<PatternAudienceUpdateWithoutAudienceInput, PatternAudienceUncheckedUpdateWithoutAudienceInput>
    create: XOR<PatternAudienceCreateWithoutAudienceInput, PatternAudienceUncheckedCreateWithoutAudienceInput>
  }

  export type PatternAudienceUpdateWithWhereUniqueWithoutAudienceInput = {
    where: PatternAudienceWhereUniqueInput
    data: XOR<PatternAudienceUpdateWithoutAudienceInput, PatternAudienceUncheckedUpdateWithoutAudienceInput>
  }

  export type PatternAudienceUpdateManyWithWhereWithoutAudienceInput = {
    where: PatternAudienceScalarWhereInput
    data: XOR<PatternAudienceUpdateManyMutationInput, PatternAudienceUncheckedUpdateManyWithoutAudienceInput>
  }

  export type PatternAudienceScalarWhereInput = {
    AND?: PatternAudienceScalarWhereInput | PatternAudienceScalarWhereInput[]
    OR?: PatternAudienceScalarWhereInput[]
    NOT?: PatternAudienceScalarWhereInput | PatternAudienceScalarWhereInput[]
    id?: IntFilter<"PatternAudience"> | number
    pattern_id?: IntFilter<"PatternAudience"> | number
    audience_id?: IntFilter<"PatternAudience"> | number
  }

  export type PatternCategoryCreateWithoutCategoryInput = {
    pattern: PatternCreateNestedOneWithoutPatternCategoryInput
  }

  export type PatternCategoryUncheckedCreateWithoutCategoryInput = {
    id?: number
    pattern_id: number
  }

  export type PatternCategoryCreateOrConnectWithoutCategoryInput = {
    where: PatternCategoryWhereUniqueInput
    create: XOR<PatternCategoryCreateWithoutCategoryInput, PatternCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type PatternCategoryCreateManyCategoryInputEnvelope = {
    data: PatternCategoryCreateManyCategoryInput | PatternCategoryCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type PatternCategoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: PatternCategoryWhereUniqueInput
    update: XOR<PatternCategoryUpdateWithoutCategoryInput, PatternCategoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<PatternCategoryCreateWithoutCategoryInput, PatternCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type PatternCategoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: PatternCategoryWhereUniqueInput
    data: XOR<PatternCategoryUpdateWithoutCategoryInput, PatternCategoryUncheckedUpdateWithoutCategoryInput>
  }

  export type PatternCategoryUpdateManyWithWhereWithoutCategoryInput = {
    where: PatternCategoryScalarWhereInput
    data: XOR<PatternCategoryUpdateManyMutationInput, PatternCategoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type PatternCategoryScalarWhereInput = {
    AND?: PatternCategoryScalarWhereInput | PatternCategoryScalarWhereInput[]
    OR?: PatternCategoryScalarWhereInput[]
    NOT?: PatternCategoryScalarWhereInput | PatternCategoryScalarWhereInput[]
    id?: IntFilter<"PatternCategory"> | number
    pattern_id?: IntFilter<"PatternCategory"> | number
    category_id?: IntFilter<"PatternCategory"> | number
  }

  export type PatternCreateWithoutDesignerInput = {
    name: string
    url: string
    thumbnail_url?: string | null
    yardage?: string | null
    sizes?: string | null
    language?: string | null
    PatternAttribute?: PatternAttributeCreateNestedManyWithoutPatternInput
    PatternAudience?: PatternAudienceCreateNestedManyWithoutPatternInput
    PatternCategory?: PatternCategoryCreateNestedManyWithoutPatternInput
    PatternFabricType?: PatternFabricTypeCreateNestedManyWithoutPatternInput
    PatternSuggestedFabric?: PatternSuggestedFabricCreateNestedManyWithoutPatternInput
  }

  export type PatternUncheckedCreateWithoutDesignerInput = {
    id?: number
    name: string
    url: string
    thumbnail_url?: string | null
    yardage?: string | null
    sizes?: string | null
    language?: string | null
    PatternAttribute?: PatternAttributeUncheckedCreateNestedManyWithoutPatternInput
    PatternAudience?: PatternAudienceUncheckedCreateNestedManyWithoutPatternInput
    PatternCategory?: PatternCategoryUncheckedCreateNestedManyWithoutPatternInput
    PatternFabricType?: PatternFabricTypeUncheckedCreateNestedManyWithoutPatternInput
    PatternSuggestedFabric?: PatternSuggestedFabricUncheckedCreateNestedManyWithoutPatternInput
  }

  export type PatternCreateOrConnectWithoutDesignerInput = {
    where: PatternWhereUniqueInput
    create: XOR<PatternCreateWithoutDesignerInput, PatternUncheckedCreateWithoutDesignerInput>
  }

  export type PatternCreateManyDesignerInputEnvelope = {
    data: PatternCreateManyDesignerInput | PatternCreateManyDesignerInput[]
    skipDuplicates?: boolean
  }

  export type PatternUpsertWithWhereUniqueWithoutDesignerInput = {
    where: PatternWhereUniqueInput
    update: XOR<PatternUpdateWithoutDesignerInput, PatternUncheckedUpdateWithoutDesignerInput>
    create: XOR<PatternCreateWithoutDesignerInput, PatternUncheckedCreateWithoutDesignerInput>
  }

  export type PatternUpdateWithWhereUniqueWithoutDesignerInput = {
    where: PatternWhereUniqueInput
    data: XOR<PatternUpdateWithoutDesignerInput, PatternUncheckedUpdateWithoutDesignerInput>
  }

  export type PatternUpdateManyWithWhereWithoutDesignerInput = {
    where: PatternScalarWhereInput
    data: XOR<PatternUpdateManyMutationInput, PatternUncheckedUpdateManyWithoutDesignerInput>
  }

  export type PatternScalarWhereInput = {
    AND?: PatternScalarWhereInput | PatternScalarWhereInput[]
    OR?: PatternScalarWhereInput[]
    NOT?: PatternScalarWhereInput | PatternScalarWhereInput[]
    id?: IntFilter<"Pattern"> | number
    name?: StringFilter<"Pattern"> | string
    designer_id?: IntFilter<"Pattern"> | number
    url?: StringFilter<"Pattern"> | string
    thumbnail_url?: StringNullableFilter<"Pattern"> | string | null
    yardage?: StringNullableFilter<"Pattern"> | string | null
    sizes?: StringNullableFilter<"Pattern"> | string | null
    language?: StringNullableFilter<"Pattern"> | string | null
  }

  export type PatternFabricTypeCreateWithoutFabricTypeInput = {
    pattern: PatternCreateNestedOneWithoutPatternFabricTypeInput
  }

  export type PatternFabricTypeUncheckedCreateWithoutFabricTypeInput = {
    id?: number
    pattern_id: number
  }

  export type PatternFabricTypeCreateOrConnectWithoutFabricTypeInput = {
    where: PatternFabricTypeWhereUniqueInput
    create: XOR<PatternFabricTypeCreateWithoutFabricTypeInput, PatternFabricTypeUncheckedCreateWithoutFabricTypeInput>
  }

  export type PatternFabricTypeCreateManyFabricTypeInputEnvelope = {
    data: PatternFabricTypeCreateManyFabricTypeInput | PatternFabricTypeCreateManyFabricTypeInput[]
    skipDuplicates?: boolean
  }

  export type PatternFabricTypeUpsertWithWhereUniqueWithoutFabricTypeInput = {
    where: PatternFabricTypeWhereUniqueInput
    update: XOR<PatternFabricTypeUpdateWithoutFabricTypeInput, PatternFabricTypeUncheckedUpdateWithoutFabricTypeInput>
    create: XOR<PatternFabricTypeCreateWithoutFabricTypeInput, PatternFabricTypeUncheckedCreateWithoutFabricTypeInput>
  }

  export type PatternFabricTypeUpdateWithWhereUniqueWithoutFabricTypeInput = {
    where: PatternFabricTypeWhereUniqueInput
    data: XOR<PatternFabricTypeUpdateWithoutFabricTypeInput, PatternFabricTypeUncheckedUpdateWithoutFabricTypeInput>
  }

  export type PatternFabricTypeUpdateManyWithWhereWithoutFabricTypeInput = {
    where: PatternFabricTypeScalarWhereInput
    data: XOR<PatternFabricTypeUpdateManyMutationInput, PatternFabricTypeUncheckedUpdateManyWithoutFabricTypeInput>
  }

  export type PatternFabricTypeScalarWhereInput = {
    AND?: PatternFabricTypeScalarWhereInput | PatternFabricTypeScalarWhereInput[]
    OR?: PatternFabricTypeScalarWhereInput[]
    NOT?: PatternFabricTypeScalarWhereInput | PatternFabricTypeScalarWhereInput[]
    id?: IntFilter<"PatternFabricType"> | number
    pattern_id?: IntFilter<"PatternFabricType"> | number
    fabrictype_id?: IntFilter<"PatternFabricType"> | number
  }

  export type DesignerCreateWithoutPatternsInput = {
    name: string
    url: string
    logo_url?: string | null
    email?: string | null
    address?: string | null
    facebook?: string | null
    instagram?: string | null
    pinterest?: string | null
    youtube?: string | null
  }

  export type DesignerUncheckedCreateWithoutPatternsInput = {
    id?: number
    name: string
    url: string
    logo_url?: string | null
    email?: string | null
    address?: string | null
    facebook?: string | null
    instagram?: string | null
    pinterest?: string | null
    youtube?: string | null
  }

  export type DesignerCreateOrConnectWithoutPatternsInput = {
    where: DesignerWhereUniqueInput
    create: XOR<DesignerCreateWithoutPatternsInput, DesignerUncheckedCreateWithoutPatternsInput>
  }

  export type PatternAttributeCreateWithoutPatternInput = {
    attribute: AttributeCreateNestedOneWithoutPatternAttributeInput
  }

  export type PatternAttributeUncheckedCreateWithoutPatternInput = {
    id?: number
    attribute_id: number
  }

  export type PatternAttributeCreateOrConnectWithoutPatternInput = {
    where: PatternAttributeWhereUniqueInput
    create: XOR<PatternAttributeCreateWithoutPatternInput, PatternAttributeUncheckedCreateWithoutPatternInput>
  }

  export type PatternAttributeCreateManyPatternInputEnvelope = {
    data: PatternAttributeCreateManyPatternInput | PatternAttributeCreateManyPatternInput[]
    skipDuplicates?: boolean
  }

  export type PatternAudienceCreateWithoutPatternInput = {
    audience: AudienceCreateNestedOneWithoutPatternAudienceInput
  }

  export type PatternAudienceUncheckedCreateWithoutPatternInput = {
    id?: number
    audience_id: number
  }

  export type PatternAudienceCreateOrConnectWithoutPatternInput = {
    where: PatternAudienceWhereUniqueInput
    create: XOR<PatternAudienceCreateWithoutPatternInput, PatternAudienceUncheckedCreateWithoutPatternInput>
  }

  export type PatternAudienceCreateManyPatternInputEnvelope = {
    data: PatternAudienceCreateManyPatternInput | PatternAudienceCreateManyPatternInput[]
    skipDuplicates?: boolean
  }

  export type PatternCategoryCreateWithoutPatternInput = {
    category: CategoryCreateNestedOneWithoutPatternCategoryInput
  }

  export type PatternCategoryUncheckedCreateWithoutPatternInput = {
    id?: number
    category_id: number
  }

  export type PatternCategoryCreateOrConnectWithoutPatternInput = {
    where: PatternCategoryWhereUniqueInput
    create: XOR<PatternCategoryCreateWithoutPatternInput, PatternCategoryUncheckedCreateWithoutPatternInput>
  }

  export type PatternCategoryCreateManyPatternInputEnvelope = {
    data: PatternCategoryCreateManyPatternInput | PatternCategoryCreateManyPatternInput[]
    skipDuplicates?: boolean
  }

  export type PatternFabricTypeCreateWithoutPatternInput = {
    fabricType: FabricTypeCreateNestedOneWithoutPatternFabricTypeInput
  }

  export type PatternFabricTypeUncheckedCreateWithoutPatternInput = {
    id?: number
    fabrictype_id: number
  }

  export type PatternFabricTypeCreateOrConnectWithoutPatternInput = {
    where: PatternFabricTypeWhereUniqueInput
    create: XOR<PatternFabricTypeCreateWithoutPatternInput, PatternFabricTypeUncheckedCreateWithoutPatternInput>
  }

  export type PatternFabricTypeCreateManyPatternInputEnvelope = {
    data: PatternFabricTypeCreateManyPatternInput | PatternFabricTypeCreateManyPatternInput[]
    skipDuplicates?: boolean
  }

  export type PatternSuggestedFabricCreateWithoutPatternInput = {
    suggestedFabric: SuggestedFabricCreateNestedOneWithoutPatternSuggestedFabricInput
  }

  export type PatternSuggestedFabricUncheckedCreateWithoutPatternInput = {
    id?: number
    suggestedfabric_id: number
  }

  export type PatternSuggestedFabricCreateOrConnectWithoutPatternInput = {
    where: PatternSuggestedFabricWhereUniqueInput
    create: XOR<PatternSuggestedFabricCreateWithoutPatternInput, PatternSuggestedFabricUncheckedCreateWithoutPatternInput>
  }

  export type PatternSuggestedFabricCreateManyPatternInputEnvelope = {
    data: PatternSuggestedFabricCreateManyPatternInput | PatternSuggestedFabricCreateManyPatternInput[]
    skipDuplicates?: boolean
  }

  export type DesignerUpsertWithoutPatternsInput = {
    update: XOR<DesignerUpdateWithoutPatternsInput, DesignerUncheckedUpdateWithoutPatternsInput>
    create: XOR<DesignerCreateWithoutPatternsInput, DesignerUncheckedCreateWithoutPatternsInput>
    where?: DesignerWhereInput
  }

  export type DesignerUpdateToOneWithWhereWithoutPatternsInput = {
    where?: DesignerWhereInput
    data: XOR<DesignerUpdateWithoutPatternsInput, DesignerUncheckedUpdateWithoutPatternsInput>
  }

  export type DesignerUpdateWithoutPatternsInput = {
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    pinterest?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DesignerUncheckedUpdateWithoutPatternsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    pinterest?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PatternAttributeUpsertWithWhereUniqueWithoutPatternInput = {
    where: PatternAttributeWhereUniqueInput
    update: XOR<PatternAttributeUpdateWithoutPatternInput, PatternAttributeUncheckedUpdateWithoutPatternInput>
    create: XOR<PatternAttributeCreateWithoutPatternInput, PatternAttributeUncheckedCreateWithoutPatternInput>
  }

  export type PatternAttributeUpdateWithWhereUniqueWithoutPatternInput = {
    where: PatternAttributeWhereUniqueInput
    data: XOR<PatternAttributeUpdateWithoutPatternInput, PatternAttributeUncheckedUpdateWithoutPatternInput>
  }

  export type PatternAttributeUpdateManyWithWhereWithoutPatternInput = {
    where: PatternAttributeScalarWhereInput
    data: XOR<PatternAttributeUpdateManyMutationInput, PatternAttributeUncheckedUpdateManyWithoutPatternInput>
  }

  export type PatternAudienceUpsertWithWhereUniqueWithoutPatternInput = {
    where: PatternAudienceWhereUniqueInput
    update: XOR<PatternAudienceUpdateWithoutPatternInput, PatternAudienceUncheckedUpdateWithoutPatternInput>
    create: XOR<PatternAudienceCreateWithoutPatternInput, PatternAudienceUncheckedCreateWithoutPatternInput>
  }

  export type PatternAudienceUpdateWithWhereUniqueWithoutPatternInput = {
    where: PatternAudienceWhereUniqueInput
    data: XOR<PatternAudienceUpdateWithoutPatternInput, PatternAudienceUncheckedUpdateWithoutPatternInput>
  }

  export type PatternAudienceUpdateManyWithWhereWithoutPatternInput = {
    where: PatternAudienceScalarWhereInput
    data: XOR<PatternAudienceUpdateManyMutationInput, PatternAudienceUncheckedUpdateManyWithoutPatternInput>
  }

  export type PatternCategoryUpsertWithWhereUniqueWithoutPatternInput = {
    where: PatternCategoryWhereUniqueInput
    update: XOR<PatternCategoryUpdateWithoutPatternInput, PatternCategoryUncheckedUpdateWithoutPatternInput>
    create: XOR<PatternCategoryCreateWithoutPatternInput, PatternCategoryUncheckedCreateWithoutPatternInput>
  }

  export type PatternCategoryUpdateWithWhereUniqueWithoutPatternInput = {
    where: PatternCategoryWhereUniqueInput
    data: XOR<PatternCategoryUpdateWithoutPatternInput, PatternCategoryUncheckedUpdateWithoutPatternInput>
  }

  export type PatternCategoryUpdateManyWithWhereWithoutPatternInput = {
    where: PatternCategoryScalarWhereInput
    data: XOR<PatternCategoryUpdateManyMutationInput, PatternCategoryUncheckedUpdateManyWithoutPatternInput>
  }

  export type PatternFabricTypeUpsertWithWhereUniqueWithoutPatternInput = {
    where: PatternFabricTypeWhereUniqueInput
    update: XOR<PatternFabricTypeUpdateWithoutPatternInput, PatternFabricTypeUncheckedUpdateWithoutPatternInput>
    create: XOR<PatternFabricTypeCreateWithoutPatternInput, PatternFabricTypeUncheckedCreateWithoutPatternInput>
  }

  export type PatternFabricTypeUpdateWithWhereUniqueWithoutPatternInput = {
    where: PatternFabricTypeWhereUniqueInput
    data: XOR<PatternFabricTypeUpdateWithoutPatternInput, PatternFabricTypeUncheckedUpdateWithoutPatternInput>
  }

  export type PatternFabricTypeUpdateManyWithWhereWithoutPatternInput = {
    where: PatternFabricTypeScalarWhereInput
    data: XOR<PatternFabricTypeUpdateManyMutationInput, PatternFabricTypeUncheckedUpdateManyWithoutPatternInput>
  }

  export type PatternSuggestedFabricUpsertWithWhereUniqueWithoutPatternInput = {
    where: PatternSuggestedFabricWhereUniqueInput
    update: XOR<PatternSuggestedFabricUpdateWithoutPatternInput, PatternSuggestedFabricUncheckedUpdateWithoutPatternInput>
    create: XOR<PatternSuggestedFabricCreateWithoutPatternInput, PatternSuggestedFabricUncheckedCreateWithoutPatternInput>
  }

  export type PatternSuggestedFabricUpdateWithWhereUniqueWithoutPatternInput = {
    where: PatternSuggestedFabricWhereUniqueInput
    data: XOR<PatternSuggestedFabricUpdateWithoutPatternInput, PatternSuggestedFabricUncheckedUpdateWithoutPatternInput>
  }

  export type PatternSuggestedFabricUpdateManyWithWhereWithoutPatternInput = {
    where: PatternSuggestedFabricScalarWhereInput
    data: XOR<PatternSuggestedFabricUpdateManyMutationInput, PatternSuggestedFabricUncheckedUpdateManyWithoutPatternInput>
  }

  export type PatternSuggestedFabricScalarWhereInput = {
    AND?: PatternSuggestedFabricScalarWhereInput | PatternSuggestedFabricScalarWhereInput[]
    OR?: PatternSuggestedFabricScalarWhereInput[]
    NOT?: PatternSuggestedFabricScalarWhereInput | PatternSuggestedFabricScalarWhereInput[]
    id?: IntFilter<"PatternSuggestedFabric"> | number
    pattern_id?: IntFilter<"PatternSuggestedFabric"> | number
    suggestedfabric_id?: IntFilter<"PatternSuggestedFabric"> | number
  }

  export type PatternCreateWithoutPatternAttributeInput = {
    name: string
    url: string
    thumbnail_url?: string | null
    yardage?: string | null
    sizes?: string | null
    language?: string | null
    designer: DesignerCreateNestedOneWithoutPatternsInput
    PatternAudience?: PatternAudienceCreateNestedManyWithoutPatternInput
    PatternCategory?: PatternCategoryCreateNestedManyWithoutPatternInput
    PatternFabricType?: PatternFabricTypeCreateNestedManyWithoutPatternInput
    PatternSuggestedFabric?: PatternSuggestedFabricCreateNestedManyWithoutPatternInput
  }

  export type PatternUncheckedCreateWithoutPatternAttributeInput = {
    id?: number
    name: string
    designer_id: number
    url: string
    thumbnail_url?: string | null
    yardage?: string | null
    sizes?: string | null
    language?: string | null
    PatternAudience?: PatternAudienceUncheckedCreateNestedManyWithoutPatternInput
    PatternCategory?: PatternCategoryUncheckedCreateNestedManyWithoutPatternInput
    PatternFabricType?: PatternFabricTypeUncheckedCreateNestedManyWithoutPatternInput
    PatternSuggestedFabric?: PatternSuggestedFabricUncheckedCreateNestedManyWithoutPatternInput
  }

  export type PatternCreateOrConnectWithoutPatternAttributeInput = {
    where: PatternWhereUniqueInput
    create: XOR<PatternCreateWithoutPatternAttributeInput, PatternUncheckedCreateWithoutPatternAttributeInput>
  }

  export type AttributeCreateWithoutPatternAttributeInput = {
    name: string
  }

  export type AttributeUncheckedCreateWithoutPatternAttributeInput = {
    id?: number
    name: string
  }

  export type AttributeCreateOrConnectWithoutPatternAttributeInput = {
    where: AttributeWhereUniqueInput
    create: XOR<AttributeCreateWithoutPatternAttributeInput, AttributeUncheckedCreateWithoutPatternAttributeInput>
  }

  export type PatternUpsertWithoutPatternAttributeInput = {
    update: XOR<PatternUpdateWithoutPatternAttributeInput, PatternUncheckedUpdateWithoutPatternAttributeInput>
    create: XOR<PatternCreateWithoutPatternAttributeInput, PatternUncheckedCreateWithoutPatternAttributeInput>
    where?: PatternWhereInput
  }

  export type PatternUpdateToOneWithWhereWithoutPatternAttributeInput = {
    where?: PatternWhereInput
    data: XOR<PatternUpdateWithoutPatternAttributeInput, PatternUncheckedUpdateWithoutPatternAttributeInput>
  }

  export type PatternUpdateWithoutPatternAttributeInput = {
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    yardage?: NullableStringFieldUpdateOperationsInput | string | null
    sizes?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    designer?: DesignerUpdateOneRequiredWithoutPatternsNestedInput
    PatternAudience?: PatternAudienceUpdateManyWithoutPatternNestedInput
    PatternCategory?: PatternCategoryUpdateManyWithoutPatternNestedInput
    PatternFabricType?: PatternFabricTypeUpdateManyWithoutPatternNestedInput
    PatternSuggestedFabric?: PatternSuggestedFabricUpdateManyWithoutPatternNestedInput
  }

  export type PatternUncheckedUpdateWithoutPatternAttributeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    designer_id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    yardage?: NullableStringFieldUpdateOperationsInput | string | null
    sizes?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    PatternAudience?: PatternAudienceUncheckedUpdateManyWithoutPatternNestedInput
    PatternCategory?: PatternCategoryUncheckedUpdateManyWithoutPatternNestedInput
    PatternFabricType?: PatternFabricTypeUncheckedUpdateManyWithoutPatternNestedInput
    PatternSuggestedFabric?: PatternSuggestedFabricUncheckedUpdateManyWithoutPatternNestedInput
  }

  export type AttributeUpsertWithoutPatternAttributeInput = {
    update: XOR<AttributeUpdateWithoutPatternAttributeInput, AttributeUncheckedUpdateWithoutPatternAttributeInput>
    create: XOR<AttributeCreateWithoutPatternAttributeInput, AttributeUncheckedCreateWithoutPatternAttributeInput>
    where?: AttributeWhereInput
  }

  export type AttributeUpdateToOneWithWhereWithoutPatternAttributeInput = {
    where?: AttributeWhereInput
    data: XOR<AttributeUpdateWithoutPatternAttributeInput, AttributeUncheckedUpdateWithoutPatternAttributeInput>
  }

  export type AttributeUpdateWithoutPatternAttributeInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AttributeUncheckedUpdateWithoutPatternAttributeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PatternCreateWithoutPatternAudienceInput = {
    name: string
    url: string
    thumbnail_url?: string | null
    yardage?: string | null
    sizes?: string | null
    language?: string | null
    designer: DesignerCreateNestedOneWithoutPatternsInput
    PatternAttribute?: PatternAttributeCreateNestedManyWithoutPatternInput
    PatternCategory?: PatternCategoryCreateNestedManyWithoutPatternInput
    PatternFabricType?: PatternFabricTypeCreateNestedManyWithoutPatternInput
    PatternSuggestedFabric?: PatternSuggestedFabricCreateNestedManyWithoutPatternInput
  }

  export type PatternUncheckedCreateWithoutPatternAudienceInput = {
    id?: number
    name: string
    designer_id: number
    url: string
    thumbnail_url?: string | null
    yardage?: string | null
    sizes?: string | null
    language?: string | null
    PatternAttribute?: PatternAttributeUncheckedCreateNestedManyWithoutPatternInput
    PatternCategory?: PatternCategoryUncheckedCreateNestedManyWithoutPatternInput
    PatternFabricType?: PatternFabricTypeUncheckedCreateNestedManyWithoutPatternInput
    PatternSuggestedFabric?: PatternSuggestedFabricUncheckedCreateNestedManyWithoutPatternInput
  }

  export type PatternCreateOrConnectWithoutPatternAudienceInput = {
    where: PatternWhereUniqueInput
    create: XOR<PatternCreateWithoutPatternAudienceInput, PatternUncheckedCreateWithoutPatternAudienceInput>
  }

  export type AudienceCreateWithoutPatternAudienceInput = {
    name: string
  }

  export type AudienceUncheckedCreateWithoutPatternAudienceInput = {
    id?: number
    name: string
  }

  export type AudienceCreateOrConnectWithoutPatternAudienceInput = {
    where: AudienceWhereUniqueInput
    create: XOR<AudienceCreateWithoutPatternAudienceInput, AudienceUncheckedCreateWithoutPatternAudienceInput>
  }

  export type PatternUpsertWithoutPatternAudienceInput = {
    update: XOR<PatternUpdateWithoutPatternAudienceInput, PatternUncheckedUpdateWithoutPatternAudienceInput>
    create: XOR<PatternCreateWithoutPatternAudienceInput, PatternUncheckedCreateWithoutPatternAudienceInput>
    where?: PatternWhereInput
  }

  export type PatternUpdateToOneWithWhereWithoutPatternAudienceInput = {
    where?: PatternWhereInput
    data: XOR<PatternUpdateWithoutPatternAudienceInput, PatternUncheckedUpdateWithoutPatternAudienceInput>
  }

  export type PatternUpdateWithoutPatternAudienceInput = {
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    yardage?: NullableStringFieldUpdateOperationsInput | string | null
    sizes?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    designer?: DesignerUpdateOneRequiredWithoutPatternsNestedInput
    PatternAttribute?: PatternAttributeUpdateManyWithoutPatternNestedInput
    PatternCategory?: PatternCategoryUpdateManyWithoutPatternNestedInput
    PatternFabricType?: PatternFabricTypeUpdateManyWithoutPatternNestedInput
    PatternSuggestedFabric?: PatternSuggestedFabricUpdateManyWithoutPatternNestedInput
  }

  export type PatternUncheckedUpdateWithoutPatternAudienceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    designer_id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    yardage?: NullableStringFieldUpdateOperationsInput | string | null
    sizes?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    PatternAttribute?: PatternAttributeUncheckedUpdateManyWithoutPatternNestedInput
    PatternCategory?: PatternCategoryUncheckedUpdateManyWithoutPatternNestedInput
    PatternFabricType?: PatternFabricTypeUncheckedUpdateManyWithoutPatternNestedInput
    PatternSuggestedFabric?: PatternSuggestedFabricUncheckedUpdateManyWithoutPatternNestedInput
  }

  export type AudienceUpsertWithoutPatternAudienceInput = {
    update: XOR<AudienceUpdateWithoutPatternAudienceInput, AudienceUncheckedUpdateWithoutPatternAudienceInput>
    create: XOR<AudienceCreateWithoutPatternAudienceInput, AudienceUncheckedCreateWithoutPatternAudienceInput>
    where?: AudienceWhereInput
  }

  export type AudienceUpdateToOneWithWhereWithoutPatternAudienceInput = {
    where?: AudienceWhereInput
    data: XOR<AudienceUpdateWithoutPatternAudienceInput, AudienceUncheckedUpdateWithoutPatternAudienceInput>
  }

  export type AudienceUpdateWithoutPatternAudienceInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AudienceUncheckedUpdateWithoutPatternAudienceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PatternCreateWithoutPatternCategoryInput = {
    name: string
    url: string
    thumbnail_url?: string | null
    yardage?: string | null
    sizes?: string | null
    language?: string | null
    designer: DesignerCreateNestedOneWithoutPatternsInput
    PatternAttribute?: PatternAttributeCreateNestedManyWithoutPatternInput
    PatternAudience?: PatternAudienceCreateNestedManyWithoutPatternInput
    PatternFabricType?: PatternFabricTypeCreateNestedManyWithoutPatternInput
    PatternSuggestedFabric?: PatternSuggestedFabricCreateNestedManyWithoutPatternInput
  }

  export type PatternUncheckedCreateWithoutPatternCategoryInput = {
    id?: number
    name: string
    designer_id: number
    url: string
    thumbnail_url?: string | null
    yardage?: string | null
    sizes?: string | null
    language?: string | null
    PatternAttribute?: PatternAttributeUncheckedCreateNestedManyWithoutPatternInput
    PatternAudience?: PatternAudienceUncheckedCreateNestedManyWithoutPatternInput
    PatternFabricType?: PatternFabricTypeUncheckedCreateNestedManyWithoutPatternInput
    PatternSuggestedFabric?: PatternSuggestedFabricUncheckedCreateNestedManyWithoutPatternInput
  }

  export type PatternCreateOrConnectWithoutPatternCategoryInput = {
    where: PatternWhereUniqueInput
    create: XOR<PatternCreateWithoutPatternCategoryInput, PatternUncheckedCreateWithoutPatternCategoryInput>
  }

  export type CategoryCreateWithoutPatternCategoryInput = {
    name: string
  }

  export type CategoryUncheckedCreateWithoutPatternCategoryInput = {
    id?: number
    name: string
  }

  export type CategoryCreateOrConnectWithoutPatternCategoryInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutPatternCategoryInput, CategoryUncheckedCreateWithoutPatternCategoryInput>
  }

  export type PatternUpsertWithoutPatternCategoryInput = {
    update: XOR<PatternUpdateWithoutPatternCategoryInput, PatternUncheckedUpdateWithoutPatternCategoryInput>
    create: XOR<PatternCreateWithoutPatternCategoryInput, PatternUncheckedCreateWithoutPatternCategoryInput>
    where?: PatternWhereInput
  }

  export type PatternUpdateToOneWithWhereWithoutPatternCategoryInput = {
    where?: PatternWhereInput
    data: XOR<PatternUpdateWithoutPatternCategoryInput, PatternUncheckedUpdateWithoutPatternCategoryInput>
  }

  export type PatternUpdateWithoutPatternCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    yardage?: NullableStringFieldUpdateOperationsInput | string | null
    sizes?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    designer?: DesignerUpdateOneRequiredWithoutPatternsNestedInput
    PatternAttribute?: PatternAttributeUpdateManyWithoutPatternNestedInput
    PatternAudience?: PatternAudienceUpdateManyWithoutPatternNestedInput
    PatternFabricType?: PatternFabricTypeUpdateManyWithoutPatternNestedInput
    PatternSuggestedFabric?: PatternSuggestedFabricUpdateManyWithoutPatternNestedInput
  }

  export type PatternUncheckedUpdateWithoutPatternCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    designer_id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    yardage?: NullableStringFieldUpdateOperationsInput | string | null
    sizes?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    PatternAttribute?: PatternAttributeUncheckedUpdateManyWithoutPatternNestedInput
    PatternAudience?: PatternAudienceUncheckedUpdateManyWithoutPatternNestedInput
    PatternFabricType?: PatternFabricTypeUncheckedUpdateManyWithoutPatternNestedInput
    PatternSuggestedFabric?: PatternSuggestedFabricUncheckedUpdateManyWithoutPatternNestedInput
  }

  export type CategoryUpsertWithoutPatternCategoryInput = {
    update: XOR<CategoryUpdateWithoutPatternCategoryInput, CategoryUncheckedUpdateWithoutPatternCategoryInput>
    create: XOR<CategoryCreateWithoutPatternCategoryInput, CategoryUncheckedCreateWithoutPatternCategoryInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutPatternCategoryInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutPatternCategoryInput, CategoryUncheckedUpdateWithoutPatternCategoryInput>
  }

  export type CategoryUpdateWithoutPatternCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateWithoutPatternCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PatternCreateWithoutPatternFabricTypeInput = {
    name: string
    url: string
    thumbnail_url?: string | null
    yardage?: string | null
    sizes?: string | null
    language?: string | null
    designer: DesignerCreateNestedOneWithoutPatternsInput
    PatternAttribute?: PatternAttributeCreateNestedManyWithoutPatternInput
    PatternAudience?: PatternAudienceCreateNestedManyWithoutPatternInput
    PatternCategory?: PatternCategoryCreateNestedManyWithoutPatternInput
    PatternSuggestedFabric?: PatternSuggestedFabricCreateNestedManyWithoutPatternInput
  }

  export type PatternUncheckedCreateWithoutPatternFabricTypeInput = {
    id?: number
    name: string
    designer_id: number
    url: string
    thumbnail_url?: string | null
    yardage?: string | null
    sizes?: string | null
    language?: string | null
    PatternAttribute?: PatternAttributeUncheckedCreateNestedManyWithoutPatternInput
    PatternAudience?: PatternAudienceUncheckedCreateNestedManyWithoutPatternInput
    PatternCategory?: PatternCategoryUncheckedCreateNestedManyWithoutPatternInput
    PatternSuggestedFabric?: PatternSuggestedFabricUncheckedCreateNestedManyWithoutPatternInput
  }

  export type PatternCreateOrConnectWithoutPatternFabricTypeInput = {
    where: PatternWhereUniqueInput
    create: XOR<PatternCreateWithoutPatternFabricTypeInput, PatternUncheckedCreateWithoutPatternFabricTypeInput>
  }

  export type FabricTypeCreateWithoutPatternFabricTypeInput = {
    name: string
  }

  export type FabricTypeUncheckedCreateWithoutPatternFabricTypeInput = {
    id?: number
    name: string
  }

  export type FabricTypeCreateOrConnectWithoutPatternFabricTypeInput = {
    where: FabricTypeWhereUniqueInput
    create: XOR<FabricTypeCreateWithoutPatternFabricTypeInput, FabricTypeUncheckedCreateWithoutPatternFabricTypeInput>
  }

  export type PatternUpsertWithoutPatternFabricTypeInput = {
    update: XOR<PatternUpdateWithoutPatternFabricTypeInput, PatternUncheckedUpdateWithoutPatternFabricTypeInput>
    create: XOR<PatternCreateWithoutPatternFabricTypeInput, PatternUncheckedCreateWithoutPatternFabricTypeInput>
    where?: PatternWhereInput
  }

  export type PatternUpdateToOneWithWhereWithoutPatternFabricTypeInput = {
    where?: PatternWhereInput
    data: XOR<PatternUpdateWithoutPatternFabricTypeInput, PatternUncheckedUpdateWithoutPatternFabricTypeInput>
  }

  export type PatternUpdateWithoutPatternFabricTypeInput = {
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    yardage?: NullableStringFieldUpdateOperationsInput | string | null
    sizes?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    designer?: DesignerUpdateOneRequiredWithoutPatternsNestedInput
    PatternAttribute?: PatternAttributeUpdateManyWithoutPatternNestedInput
    PatternAudience?: PatternAudienceUpdateManyWithoutPatternNestedInput
    PatternCategory?: PatternCategoryUpdateManyWithoutPatternNestedInput
    PatternSuggestedFabric?: PatternSuggestedFabricUpdateManyWithoutPatternNestedInput
  }

  export type PatternUncheckedUpdateWithoutPatternFabricTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    designer_id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    yardage?: NullableStringFieldUpdateOperationsInput | string | null
    sizes?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    PatternAttribute?: PatternAttributeUncheckedUpdateManyWithoutPatternNestedInput
    PatternAudience?: PatternAudienceUncheckedUpdateManyWithoutPatternNestedInput
    PatternCategory?: PatternCategoryUncheckedUpdateManyWithoutPatternNestedInput
    PatternSuggestedFabric?: PatternSuggestedFabricUncheckedUpdateManyWithoutPatternNestedInput
  }

  export type FabricTypeUpsertWithoutPatternFabricTypeInput = {
    update: XOR<FabricTypeUpdateWithoutPatternFabricTypeInput, FabricTypeUncheckedUpdateWithoutPatternFabricTypeInput>
    create: XOR<FabricTypeCreateWithoutPatternFabricTypeInput, FabricTypeUncheckedCreateWithoutPatternFabricTypeInput>
    where?: FabricTypeWhereInput
  }

  export type FabricTypeUpdateToOneWithWhereWithoutPatternFabricTypeInput = {
    where?: FabricTypeWhereInput
    data: XOR<FabricTypeUpdateWithoutPatternFabricTypeInput, FabricTypeUncheckedUpdateWithoutPatternFabricTypeInput>
  }

  export type FabricTypeUpdateWithoutPatternFabricTypeInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type FabricTypeUncheckedUpdateWithoutPatternFabricTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PatternCreateWithoutPatternSuggestedFabricInput = {
    name: string
    url: string
    thumbnail_url?: string | null
    yardage?: string | null
    sizes?: string | null
    language?: string | null
    designer: DesignerCreateNestedOneWithoutPatternsInput
    PatternAttribute?: PatternAttributeCreateNestedManyWithoutPatternInput
    PatternAudience?: PatternAudienceCreateNestedManyWithoutPatternInput
    PatternCategory?: PatternCategoryCreateNestedManyWithoutPatternInput
    PatternFabricType?: PatternFabricTypeCreateNestedManyWithoutPatternInput
  }

  export type PatternUncheckedCreateWithoutPatternSuggestedFabricInput = {
    id?: number
    name: string
    designer_id: number
    url: string
    thumbnail_url?: string | null
    yardage?: string | null
    sizes?: string | null
    language?: string | null
    PatternAttribute?: PatternAttributeUncheckedCreateNestedManyWithoutPatternInput
    PatternAudience?: PatternAudienceUncheckedCreateNestedManyWithoutPatternInput
    PatternCategory?: PatternCategoryUncheckedCreateNestedManyWithoutPatternInput
    PatternFabricType?: PatternFabricTypeUncheckedCreateNestedManyWithoutPatternInput
  }

  export type PatternCreateOrConnectWithoutPatternSuggestedFabricInput = {
    where: PatternWhereUniqueInput
    create: XOR<PatternCreateWithoutPatternSuggestedFabricInput, PatternUncheckedCreateWithoutPatternSuggestedFabricInput>
  }

  export type SuggestedFabricCreateWithoutPatternSuggestedFabricInput = {
    name: string
  }

  export type SuggestedFabricUncheckedCreateWithoutPatternSuggestedFabricInput = {
    id?: number
    name: string
  }

  export type SuggestedFabricCreateOrConnectWithoutPatternSuggestedFabricInput = {
    where: SuggestedFabricWhereUniqueInput
    create: XOR<SuggestedFabricCreateWithoutPatternSuggestedFabricInput, SuggestedFabricUncheckedCreateWithoutPatternSuggestedFabricInput>
  }

  export type PatternUpsertWithoutPatternSuggestedFabricInput = {
    update: XOR<PatternUpdateWithoutPatternSuggestedFabricInput, PatternUncheckedUpdateWithoutPatternSuggestedFabricInput>
    create: XOR<PatternCreateWithoutPatternSuggestedFabricInput, PatternUncheckedCreateWithoutPatternSuggestedFabricInput>
    where?: PatternWhereInput
  }

  export type PatternUpdateToOneWithWhereWithoutPatternSuggestedFabricInput = {
    where?: PatternWhereInput
    data: XOR<PatternUpdateWithoutPatternSuggestedFabricInput, PatternUncheckedUpdateWithoutPatternSuggestedFabricInput>
  }

  export type PatternUpdateWithoutPatternSuggestedFabricInput = {
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    yardage?: NullableStringFieldUpdateOperationsInput | string | null
    sizes?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    designer?: DesignerUpdateOneRequiredWithoutPatternsNestedInput
    PatternAttribute?: PatternAttributeUpdateManyWithoutPatternNestedInput
    PatternAudience?: PatternAudienceUpdateManyWithoutPatternNestedInput
    PatternCategory?: PatternCategoryUpdateManyWithoutPatternNestedInput
    PatternFabricType?: PatternFabricTypeUpdateManyWithoutPatternNestedInput
  }

  export type PatternUncheckedUpdateWithoutPatternSuggestedFabricInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    designer_id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    yardage?: NullableStringFieldUpdateOperationsInput | string | null
    sizes?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    PatternAttribute?: PatternAttributeUncheckedUpdateManyWithoutPatternNestedInput
    PatternAudience?: PatternAudienceUncheckedUpdateManyWithoutPatternNestedInput
    PatternCategory?: PatternCategoryUncheckedUpdateManyWithoutPatternNestedInput
    PatternFabricType?: PatternFabricTypeUncheckedUpdateManyWithoutPatternNestedInput
  }

  export type SuggestedFabricUpsertWithoutPatternSuggestedFabricInput = {
    update: XOR<SuggestedFabricUpdateWithoutPatternSuggestedFabricInput, SuggestedFabricUncheckedUpdateWithoutPatternSuggestedFabricInput>
    create: XOR<SuggestedFabricCreateWithoutPatternSuggestedFabricInput, SuggestedFabricUncheckedCreateWithoutPatternSuggestedFabricInput>
    where?: SuggestedFabricWhereInput
  }

  export type SuggestedFabricUpdateToOneWithWhereWithoutPatternSuggestedFabricInput = {
    where?: SuggestedFabricWhereInput
    data: XOR<SuggestedFabricUpdateWithoutPatternSuggestedFabricInput, SuggestedFabricUncheckedUpdateWithoutPatternSuggestedFabricInput>
  }

  export type SuggestedFabricUpdateWithoutPatternSuggestedFabricInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SuggestedFabricUncheckedUpdateWithoutPatternSuggestedFabricInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PatternSuggestedFabricCreateWithoutSuggestedFabricInput = {
    pattern: PatternCreateNestedOneWithoutPatternSuggestedFabricInput
  }

  export type PatternSuggestedFabricUncheckedCreateWithoutSuggestedFabricInput = {
    id?: number
    pattern_id: number
  }

  export type PatternSuggestedFabricCreateOrConnectWithoutSuggestedFabricInput = {
    where: PatternSuggestedFabricWhereUniqueInput
    create: XOR<PatternSuggestedFabricCreateWithoutSuggestedFabricInput, PatternSuggestedFabricUncheckedCreateWithoutSuggestedFabricInput>
  }

  export type PatternSuggestedFabricCreateManySuggestedFabricInputEnvelope = {
    data: PatternSuggestedFabricCreateManySuggestedFabricInput | PatternSuggestedFabricCreateManySuggestedFabricInput[]
    skipDuplicates?: boolean
  }

  export type PatternSuggestedFabricUpsertWithWhereUniqueWithoutSuggestedFabricInput = {
    where: PatternSuggestedFabricWhereUniqueInput
    update: XOR<PatternSuggestedFabricUpdateWithoutSuggestedFabricInput, PatternSuggestedFabricUncheckedUpdateWithoutSuggestedFabricInput>
    create: XOR<PatternSuggestedFabricCreateWithoutSuggestedFabricInput, PatternSuggestedFabricUncheckedCreateWithoutSuggestedFabricInput>
  }

  export type PatternSuggestedFabricUpdateWithWhereUniqueWithoutSuggestedFabricInput = {
    where: PatternSuggestedFabricWhereUniqueInput
    data: XOR<PatternSuggestedFabricUpdateWithoutSuggestedFabricInput, PatternSuggestedFabricUncheckedUpdateWithoutSuggestedFabricInput>
  }

  export type PatternSuggestedFabricUpdateManyWithWhereWithoutSuggestedFabricInput = {
    where: PatternSuggestedFabricScalarWhereInput
    data: XOR<PatternSuggestedFabricUpdateManyMutationInput, PatternSuggestedFabricUncheckedUpdateManyWithoutSuggestedFabricInput>
  }

  export type PatternAttributeCreateManyAttributeInput = {
    id?: number
    pattern_id: number
  }

  export type PatternAttributeUpdateWithoutAttributeInput = {
    pattern?: PatternUpdateOneRequiredWithoutPatternAttributeNestedInput
  }

  export type PatternAttributeUncheckedUpdateWithoutAttributeInput = {
    id?: IntFieldUpdateOperationsInput | number
    pattern_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternAttributeUncheckedUpdateManyWithoutAttributeInput = {
    id?: IntFieldUpdateOperationsInput | number
    pattern_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternAudienceCreateManyAudienceInput = {
    id?: number
    pattern_id: number
  }

  export type PatternAudienceUpdateWithoutAudienceInput = {
    pattern?: PatternUpdateOneRequiredWithoutPatternAudienceNestedInput
  }

  export type PatternAudienceUncheckedUpdateWithoutAudienceInput = {
    id?: IntFieldUpdateOperationsInput | number
    pattern_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternAudienceUncheckedUpdateManyWithoutAudienceInput = {
    id?: IntFieldUpdateOperationsInput | number
    pattern_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternCategoryCreateManyCategoryInput = {
    id?: number
    pattern_id: number
  }

  export type PatternCategoryUpdateWithoutCategoryInput = {
    pattern?: PatternUpdateOneRequiredWithoutPatternCategoryNestedInput
  }

  export type PatternCategoryUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    pattern_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternCategoryUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    pattern_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternCreateManyDesignerInput = {
    id?: number
    name: string
    url: string
    thumbnail_url?: string | null
    yardage?: string | null
    sizes?: string | null
    language?: string | null
  }

  export type PatternUpdateWithoutDesignerInput = {
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    yardage?: NullableStringFieldUpdateOperationsInput | string | null
    sizes?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    PatternAttribute?: PatternAttributeUpdateManyWithoutPatternNestedInput
    PatternAudience?: PatternAudienceUpdateManyWithoutPatternNestedInput
    PatternCategory?: PatternCategoryUpdateManyWithoutPatternNestedInput
    PatternFabricType?: PatternFabricTypeUpdateManyWithoutPatternNestedInput
    PatternSuggestedFabric?: PatternSuggestedFabricUpdateManyWithoutPatternNestedInput
  }

  export type PatternUncheckedUpdateWithoutDesignerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    yardage?: NullableStringFieldUpdateOperationsInput | string | null
    sizes?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    PatternAttribute?: PatternAttributeUncheckedUpdateManyWithoutPatternNestedInput
    PatternAudience?: PatternAudienceUncheckedUpdateManyWithoutPatternNestedInput
    PatternCategory?: PatternCategoryUncheckedUpdateManyWithoutPatternNestedInput
    PatternFabricType?: PatternFabricTypeUncheckedUpdateManyWithoutPatternNestedInput
    PatternSuggestedFabric?: PatternSuggestedFabricUncheckedUpdateManyWithoutPatternNestedInput
  }

  export type PatternUncheckedUpdateManyWithoutDesignerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    thumbnail_url?: NullableStringFieldUpdateOperationsInput | string | null
    yardage?: NullableStringFieldUpdateOperationsInput | string | null
    sizes?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PatternFabricTypeCreateManyFabricTypeInput = {
    id?: number
    pattern_id: number
  }

  export type PatternFabricTypeUpdateWithoutFabricTypeInput = {
    pattern?: PatternUpdateOneRequiredWithoutPatternFabricTypeNestedInput
  }

  export type PatternFabricTypeUncheckedUpdateWithoutFabricTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    pattern_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternFabricTypeUncheckedUpdateManyWithoutFabricTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    pattern_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternAttributeCreateManyPatternInput = {
    id?: number
    attribute_id: number
  }

  export type PatternAudienceCreateManyPatternInput = {
    id?: number
    audience_id: number
  }

  export type PatternCategoryCreateManyPatternInput = {
    id?: number
    category_id: number
  }

  export type PatternFabricTypeCreateManyPatternInput = {
    id?: number
    fabrictype_id: number
  }

  export type PatternSuggestedFabricCreateManyPatternInput = {
    id?: number
    suggestedfabric_id: number
  }

  export type PatternAttributeUpdateWithoutPatternInput = {
    attribute?: AttributeUpdateOneRequiredWithoutPatternAttributeNestedInput
  }

  export type PatternAttributeUncheckedUpdateWithoutPatternInput = {
    id?: IntFieldUpdateOperationsInput | number
    attribute_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternAttributeUncheckedUpdateManyWithoutPatternInput = {
    id?: IntFieldUpdateOperationsInput | number
    attribute_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternAudienceUpdateWithoutPatternInput = {
    audience?: AudienceUpdateOneRequiredWithoutPatternAudienceNestedInput
  }

  export type PatternAudienceUncheckedUpdateWithoutPatternInput = {
    id?: IntFieldUpdateOperationsInput | number
    audience_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternAudienceUncheckedUpdateManyWithoutPatternInput = {
    id?: IntFieldUpdateOperationsInput | number
    audience_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternCategoryUpdateWithoutPatternInput = {
    category?: CategoryUpdateOneRequiredWithoutPatternCategoryNestedInput
  }

  export type PatternCategoryUncheckedUpdateWithoutPatternInput = {
    id?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternCategoryUncheckedUpdateManyWithoutPatternInput = {
    id?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternFabricTypeUpdateWithoutPatternInput = {
    fabricType?: FabricTypeUpdateOneRequiredWithoutPatternFabricTypeNestedInput
  }

  export type PatternFabricTypeUncheckedUpdateWithoutPatternInput = {
    id?: IntFieldUpdateOperationsInput | number
    fabrictype_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternFabricTypeUncheckedUpdateManyWithoutPatternInput = {
    id?: IntFieldUpdateOperationsInput | number
    fabrictype_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternSuggestedFabricUpdateWithoutPatternInput = {
    suggestedFabric?: SuggestedFabricUpdateOneRequiredWithoutPatternSuggestedFabricNestedInput
  }

  export type PatternSuggestedFabricUncheckedUpdateWithoutPatternInput = {
    id?: IntFieldUpdateOperationsInput | number
    suggestedfabric_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternSuggestedFabricUncheckedUpdateManyWithoutPatternInput = {
    id?: IntFieldUpdateOperationsInput | number
    suggestedfabric_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternSuggestedFabricCreateManySuggestedFabricInput = {
    id?: number
    pattern_id: number
  }

  export type PatternSuggestedFabricUpdateWithoutSuggestedFabricInput = {
    pattern?: PatternUpdateOneRequiredWithoutPatternSuggestedFabricNestedInput
  }

  export type PatternSuggestedFabricUncheckedUpdateWithoutSuggestedFabricInput = {
    id?: IntFieldUpdateOperationsInput | number
    pattern_id?: IntFieldUpdateOperationsInput | number
  }

  export type PatternSuggestedFabricUncheckedUpdateManyWithoutSuggestedFabricInput = {
    id?: IntFieldUpdateOperationsInput | number
    pattern_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AttributeCountOutputTypeDefaultArgs instead
     */
    export type AttributeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AttributeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AudienceCountOutputTypeDefaultArgs instead
     */
    export type AudienceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AudienceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DesignerCountOutputTypeDefaultArgs instead
     */
    export type DesignerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DesignerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FabricTypeCountOutputTypeDefaultArgs instead
     */
    export type FabricTypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FabricTypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatternCountOutputTypeDefaultArgs instead
     */
    export type PatternCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatternCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SuggestedFabricCountOutputTypeDefaultArgs instead
     */
    export type SuggestedFabricCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SuggestedFabricCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AttributeDefaultArgs instead
     */
    export type AttributeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AttributeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AudienceDefaultArgs instead
     */
    export type AudienceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AudienceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DesignerDefaultArgs instead
     */
    export type DesignerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DesignerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FabricTypeDefaultArgs instead
     */
    export type FabricTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FabricTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FormatDefaultArgs instead
     */
    export type FormatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FormatDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatternDefaultArgs instead
     */
    export type PatternArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatternDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatternAttributeDefaultArgs instead
     */
    export type PatternAttributeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatternAttributeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatternAudienceDefaultArgs instead
     */
    export type PatternAudienceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatternAudienceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatternCategoryDefaultArgs instead
     */
    export type PatternCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatternCategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatternFabricTypeDefaultArgs instead
     */
    export type PatternFabricTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatternFabricTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatternSuggestedFabricDefaultArgs instead
     */
    export type PatternSuggestedFabricArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatternSuggestedFabricDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SuggestedFabricDefaultArgs instead
     */
    export type SuggestedFabricArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SuggestedFabricDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}