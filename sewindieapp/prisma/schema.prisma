// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Attribute {
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar(255)
  PatternAttribute PatternAttribute[]
}

model Audience {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  PatternAudience PatternAudience[]
}

model Category {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  PatternCategory PatternCategory[]
}

model Designer {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  url       String   @db.Text
  logo_url  String?  @db.Text
  email     String?  @db.VarChar(255)
  address   String?  @db.VarChar(255)
  facebook  String?  @db.Text
  instagram String?  @db.Text
  pinterest String?  @db.Text
  youtube   String?  @db.Text
  patterns  Pattern[]
}

model FabricType {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  PatternFabricType PatternFabricType[]
}

model Format {
  id     Int     @id @default(autoincrement())
  name   String  @db.VarChar(255)
}

model Pattern {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(255)
  designer_id           Int
  url                   String                  @db.Text
  thumbnail_url         String?                 @db.Text
  yardage               String?                 @db.VarChar(255)
  sizes                 String?                 @db.VarChar(255)
  language              String?                 @db.VarChar(255)
  designer              Designer                @relation(fields: [designer_id], references: [id])
  PatternAttribute      PatternAttribute[]
  PatternAudience       PatternAudience[]
  PatternCategory       PatternCategory[]
  PatternFabricType     PatternFabricType[]
  PatternSuggestedFabric PatternSuggestedFabric[]
}

model PatternAttribute {
  id           Int       @id @default(autoincrement())
  pattern_id   Int
  attribute_id Int
  pattern      Pattern   @relation(fields: [pattern_id], references: [id])
  attribute    Attribute @relation(fields: [attribute_id], references: [id])
}

model PatternAudience {
  id          Int      @id @default(autoincrement())
  pattern_id  Int
  audience_id Int
  pattern     Pattern  @relation(fields: [pattern_id], references: [id])
  audience    Audience @relation(fields: [audience_id], references: [id])
}

model PatternCategory {
  id          Int      @id @default(autoincrement())
  pattern_id  Int
  category_id Int
  pattern     Pattern  @relation(fields: [pattern_id], references: [id])
  category    Category @relation(fields: [category_id], references: [id])
}

model PatternFabricType {
  id            Int        @id @default(autoincrement())
  pattern_id    Int
  fabrictype_id Int
  pattern       Pattern    @relation(fields: [pattern_id], references: [id])
  fabricType    FabricType @relation(fields: [fabrictype_id], references: [id])
}

model PatternSuggestedFabric {
  id                 Int             @id @default(autoincrement())
  pattern_id         Int
  suggestedfabric_id Int
  pattern            Pattern         @relation(fields: [pattern_id], references: [id])
  suggestedFabric    SuggestedFabric @relation(fields: [suggestedfabric_id], references: [id])
}

model SuggestedFabric {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @db.VarChar(255)
  PatternSuggestedFabric PatternSuggestedFabric[]
}